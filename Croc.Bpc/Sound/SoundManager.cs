using System; 

using System.Collections.Generic; 

using System.Threading; 

using Croc.Bpc.Common.Config; 

using Croc.Core.Configuration; 

using Croc.Core; 

using Croc.Bpc.Sound.Config; 

using Croc.Bpc.Common; 

using Croc.Bpc.Common.Diagnostics; 

 

 

namespace Croc.Bpc.Sound 

{ 

    [SubsystemConfigurationElementTypeAttribute(typeof(SoundManagerConfig))] 

    public class SoundManager : Subsystem, ISoundManager 

    { 

        /// <summary> 

        /// ????????????? ?????????? 

        /// </summary> 

        /// <param name="config"></param> 

        public override void Init(SubsystemConfig config) 

        { 

            _config = (SoundManagerConfig)config; 

 

 

            InitSoundPlayer(); 

            InitSoundsPaths(); 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????? ??????? 

        /// </summary> 

        /// <param name="newConfig"></param> 

        public override void ApplyNewConfig(SubsystemConfig newConfig) 

        { 

            Init(newConfig); 

        } 

 

 

        #region ISoundManager Members 

 

 

        #region ???????????? ???????? ? ????????? ???? 

 

 

        private const string SoundsDirPrefix = "Sounds"; 

        private const string NumbersSoundsDir = "Numbers/"; 

        private const string TimesSoundsDir = "Times/"; 

        private const string MonthsSoundsDir = "Months/"; 


        private const string LettersSoundsDir = "Letters/"; 

        private const string ReverseReasonsSoundsDir = "ReverseReasons/"; 

        private const string BadReasonsSoundsDir = "BadReasons/"; 

 

 

        private SoundManagerConfig _config; 

        private string _stubSoundFileName; 

        private string _numbersSoundsDirPath; 

        private string _timesSoundsDirPath; 

        private string _monthsSoundsDirPath; 

        private string _lettersSoundsDirPath; 

 

 

        /// <summary> 

        /// ?????????????? ?????????? ? ??????????? ? ????? ? ???????? ?????? 

        /// </summary> 

        private void InitSoundsPaths() 

        { 

            SoundsDirPath = string.Format("{0}{1}/", SoundsDirPrefix, _config.Player.Format); 

            _stubSoundFileName = "stub"; 

            _numbersSoundsDirPath = SoundsDirPath + NumbersSoundsDir; 

            _timesSoundsDirPath = SoundsDirPath + TimesSoundsDir; 

            _monthsSoundsDirPath = SoundsDirPath + MonthsSoundsDir; 

            _lettersSoundsDirPath = SoundsDirPath + LettersSoundsDir; 

        } 

 

 

        /// <summary> 

        /// ??? ????. ?????-???????? 

        /// </summary> 

        public string StubSoundFileName 

        { 

            get 

            { 

                return _stubSoundFileName; 

            } 

        } 

 

 

        /// <summary> 

        /// ???? ? ?????, ? ??????? ????????? ???????? ????? 

        /// </summary> 

        public string SoundsDirPath 

        { 

            get; 

            private set; 

        } 

 

 

        #region ??????? ??????? ? ??? 


 
 

        /// <summary> 

        /// ?????????? ???? ? ????. ????? ??? ??????????????? ??????? ??????? ? ???????? ????? 

        /// </summary> 

        /// <param name="reverseReasonCode"></param> 

        /// <returns></returns> 

        public string GetSoundForReverseReason(int reverseReasonCode) 

        { 

            return string.Format("{0}reverse_{1}", ReverseReasonsSoundsDir, reverseReasonCode); 

        } 

 

 

        private const string BAD_BULLETIN_SOUND = "blanktype_bad"; 

 

 

        /// <summary> 

        /// ???? ? ????. ????? "????????? ??????????????? ?????" 

        /// </summary> 

        public string BadBulletinSound 

        { 

            get 

            { 

                return BAD_BULLETIN_SOUND; 

            } 

        } 

 

 

        /// <summary> 

        /// ???? ? ????. ????? "?????? ?? ??????????" 

        /// </summary> 

        public string StampNotRecognizedSound 

        { 

            get 

            { 

                const string STAMP_NOT_RECOGNIZED_SOUND = "stamp-not-recognized"; 

                return BadReasonsSoundsDir + STAMP_NOT_RECOGNIZED_SOUND; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ?????? ??? ??????????????? ????? 

        /// "????????? ??????????????? ?????. [??????? ???]" 

        /// </summary> 

        /// <param name="badBulletinReasonCode">??? ??????? ???</param> 

        /// <param name="badStampReasonCode">?????????? ??? ??????? ???, ????? ??? ??-?? ??????</param> 

        /// <returns></returns> 

        public string[] GetSoundsForBadBulletinReason(string badBulletinReasonCode, string badStampReasonCode) 

        { 


            if (string.IsNullOrEmpty(badBulletinReasonCode)) 

                return new[] { BAD_BULLETIN_SOUND }; 

 

 

            var badReasonSound = string.IsNullOrEmpty(badStampReasonCode) 

                ? badBulletinReasonCode 

                : string.Format("{0}-{1}", badBulletinReasonCode, badStampReasonCode); 

 

 

            return new[] { BAD_BULLETIN_SOUND, BadReasonsSoundsDir + badReasonSound.ToLower() }; 

        } 

 

 

        /// <summary> 

        /// ????? ??????? ??? 

        /// </summary> 

        /// <param name="badBulletinReason">????????? ????????????? ???????????? BadBulletinReason</param> 

        /// <returns>??????? ???</returns> 

        public string GetTextForBadBulletinReason(string badBulletinReason) 

        { 

            switch (badBulletinReason) 

            { 

                case "Marker": 

                    return "???: ??????"; 

                case "Lines": 

                    return "???: ?????"; 

                case "Squares": 

                    return "???: ????????"; 

                case "Stamp": 

                    return "???: ??????"; 

                case "Refp": 

                    return "???: ?????"; 

 

 

                default: 

                    return "???"; 

            } 

        } 

 

 

        #endregion 

 

 

        #region ????? 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 

        /// ?????????? ???????? ????? 

        /// </summary> 


        /// <param name="number">????? ? ????????? [-999999, +999999]</param> 

        /// <returns></returns> 

        public string[] GetSoundForNumber(int number, bool useFeminine, NumberDeclension declension) 

        { 

            CodeContract.Requires(-999999 <= number && number <= 999999); 

 

 

            var sounds = new List<string>(); 

 

 

            if (number < 0) 

            { 

                sounds.Add(_numbersSoundsDirPath + "minus"); 

                number *= -1; 

            } 

 

 

            // ????? ?? 0 ?? 20  

            if (0 <= number && number <= 20) 

            { 

                sounds.Add(GetSoundForMonotonousNumber(number, useFeminine, declension)); 

            } 

            // ????? ?? 21 ?? 99 

            else if (number < 100) 

            { 

                sounds.AddRange(GetGetSoundForNumberFrom21To99(number, useFeminine, declension)); 

            } 

            // ????? ?? 100 ?? 999 

            else if (number < 1000) 

            { 

                sounds.AddRange(GetGetSoundForNumberFrom100To999(number, useFeminine, declension)); 

            } 

            // ????? ?? 1000 ?? 999999 

            else if (number < 1000000) 

            { 

                sounds.AddRange(GetGetSoundForNumberFrom1000To999999(number, useFeminine, declension)); 

            } 

            else 

            { 

                sounds.Add(_stubSoundFileName); 

            } 

 

 

            return sounds.ToArray(); 

        } 

 

 

        private List<string> GetGetSoundForNumberFrom1000To999999(int number, bool useFeminine, NumberDeclension declension) 

        { 

            var sounds = new List<string>(); 


 
 

            // ??????? ???????? ?????? 

            var thousand = number / 1000; 

            // ??????? ???????? ????? 

            var hundred = number % 1000; 

 

 

            sounds.AddRange(GetSoundForNumber(thousand, true, hundred == 0 ? declension : NumberDeclension.None)); 

 

 

            // ??????? ????? ?????? ? ?????? ?????? 

            var soundForThousandWord = string.Format("{0}{1}", _numbersSoundsDirPath, GetThousandKeyWord(thousand)); 

            sounds.Add(soundForThousandWord); 

 

 

            if (hundred != 0) 

                sounds.AddRange(GetSoundForNumber(hundred, useFeminine, declension)); 

 

 

            return sounds; 

        } 

 

 

        private const string ThousandKeyWord_Tysyacha = "1000"; 

        private const string ThousandKeyWord_Tysyachi = "1000chi"; 

        private const string ThousandKeyWord_Tysyach = "1000ch"; 

 

 

        /// <summary> 

        /// ?????????? ???? ??? ????? "??????" ? ?????? ?????? 

        /// </summary> 

        /// <param name="thousand"></param> 

        /// <returns></returns> 

        private string GetThousandKeyWord(int thousand) 

        { 

            if (thousand > 20) 

                thousand %= 10; 

 

 

            // 1 ?????? 

            if (thousand == 1) 

                return ThousandKeyWord_Tysyacha; 

 

 

            // 2,3,4 ?????? 

            else if (2 <= thousand && thousand <= 4) 

                return ThousandKeyWord_Tysyachi; 

 

 


            // 0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 ????? 

            else 

                return ThousandKeyWord_Tysyach; 

        } 

 

 

        private List<string> GetGetSoundForNumberFrom100To999(int number, bool useFeminine, NumberDeclension declension) 

        { 

            var sounds = new List<string>(); 

 

 

            // ??????? ???????? ????? 

            var hundred = number / 100 * 100; 

            // ??????? ???????? ??????? ? ???????? 

            var tenWithOne = number % 100; 

 

 

            sounds.Add(GetSoundForMonotonousNumber(hundred, useFeminine,  

                tenWithOne == 0 ? declension : NumberDeclension.None)); 

 

 

            if (tenWithOne != 0) 

            { 

                if (tenWithOne <= 20) 

                    sounds.Add(GetSoundForMonotonousNumber(tenWithOne, useFeminine, declension)); 

                else 

                    sounds.AddRange(GetGetSoundForNumberFrom21To99(tenWithOne, useFeminine, declension)); 

            } 

 

 

            return sounds; 

        } 

 

 

        private List<string> GetGetSoundForNumberFrom21To99(int number, bool useFeminine, NumberDeclension declension) 

        { 

            var sounds = new List<string>(); 

 

 

            // ??????? ???????? ??????? 

            var ten = number / 10 * 10; 

            // ??????? ???????? ??????? 

            var one = number % 10; 

 

 

            if (ten != 0) 

                sounds.Add(GetSoundForMonotonousNumber(ten, useFeminine, one == 0 ? declension : NumberDeclension.None)); 

 

 

            if (one != 0) 


                sounds.Add(GetSoundForMonotonousNumber(one, useFeminine, declension)); 

 

 

            return sounds; 

        } 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ????? ??? ??????????????? ???????????? ?????. 

        /// ? ????? ?????? ?????????: 0,1,...,19,20,30,40,50,60,70,80,90,100,200,...,900,1000 

        /// </summary> 

        /// <param name="number"></param> 

        /// <param name="useFeminine">???????????? ?? ??????? ???, ?.?. ???? true, ?? 1=????, 2=???, ????? 1=????, 2=???</param> 

        /// <returns></returns> 

        private string GetSoundForMonotonousNumber(int number, bool useFeminine, NumberDeclension declension) 

        { 

            if (useFeminine) 

            { 

                if (number == 1) 

                    return GetNumberSoundFilePath(declension, "1a"); 

 

 

                if (number == 2) 

                    return GetNumberSoundFilePath(declension, "2e"); 

            } 

 

 

            return GetNumberSoundFilePath(declension, number); 

        } 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ????? ??? ????????? ????? ? ?????? ????????? 

        /// </summary> 

        /// <param name="declension"></param> 

        /// <param name="numberName"></param> 

        /// <returns></returns> 

        private string GetNumberSoundFilePath(NumberDeclension declension, object numberName) 

        { 

            if (declension == NumberDeclension.None) 

                return string.Format("{0}{1}", _numbersSoundsDirPath, numberName); 

 

 

            return string.Format("{0}{1}/{2}", _numbersSoundsDirPath, declension, numberName); 

        } 

 

 

        #endregion 

 

 


        #region ???? 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 

        /// ?????????? ???????? ???-?? ?????, ???????? "1 ???", "12 ?????" 

        /// </summary> 

        /// <param name="hours"></param> 

        /// <returns></returns> 

        public string[] GetSoundForHours(int hours) 

        { 

            CodeContract.Requires(0 <= hours && hours <= 23); 

 

 

            var sounds = new List<string>(); 

            sounds.AddRange(GetSoundForNumber(hours, false, NumberDeclension.None)); 

 

 

            var soundForHourWord = string.Format("{0}{1}", _timesSoundsDirPath, GetHourKeyWord(hours)); 

            sounds.Add(soundForHourWord); 

 

 

            return sounds.ToArray(); 

        } 

 

 

        /// <summary> 

        /// ?????????? ????? ??? ??????????? ????????? ???-?? ?????, ???????? "1 ???", "12 ?????" 

        /// </summary> 

        /// <param name="hours"></param> 

        /// <returns></returns> 

        public string GetTextForHours(int hours) 

        { 

            CodeContract.Requires(0 <= hours && hours <= 23); 

 

 

            var keyWord = GetHourKeyWord(hours); 

            switch (keyWord) 

            { 

                case HourKeyWord_Chas: 

                    keyWord = "???"; 

                    break; 

 

 

                case HourKeyWord_Chasa: 

                    keyWord = "????"; 

                    break; 

 

 

                case HourKeyWord_Chasov: 


                    keyWord = "?????"; 

                    break; 

            } 

 

 

            return string.Format("{0} {1}", hours, keyWord); 

        } 

 

 

        private const string HourKeyWord_Chas = "chas"; 

        private const string HourKeyWord_Chasa = "chasa"; 

        private const string HourKeyWord_Chasov = "chasov"; 

 

 

        /// <summary> 

        /// ?????????? ???? ??? ????? "???" ? ?????? ??????, ?.?. ???, ????, ????? 

        /// </summary> 

        /// <param name="hours"></param> 

        /// <returns></returns> 

        private string GetHourKeyWord(int hours) 

        { 

            // 1,21 ??? 

            if (hours == 1 || hours == 21) 

                return HourKeyWord_Chas; 

 

 

            // 2,3,4,22,23 ???? 

            else if ((2 <= hours && hours <= 4) || hours >= 22) 

                return HourKeyWord_Chasa; 

 

 

            // 0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 ????? 

            else 

                return HourKeyWord_Chasov; 

        } 

 

 

        #endregion 

 

 

        #region ?????? 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 

        /// ?????????? ???????? ???-?? ?????, ???????? "1 ??????", "3 ??????", "30 ?????" 

        /// </summary> 

        /// <param name="minutes"></param> 

        /// <returns></returns> 

        public string[] GetSoundForMinutes(int minutes) 


        { 

            CodeContract.Requires(0 <= minutes && minutes <= 59); 

 

 

            var sounds = new List<string>(); 

            sounds.AddRange(GetSoundForNumber(minutes, true, NumberDeclension.None)); 

            sounds.Add(GetSoundForMinuteWord(minutes)); 

 

 

            return sounds.ToArray(); 

        } 

 

 

        /// <summary> 

        /// ?????????? ????? ??? ??????????? ????????? ???-?? ?????, ???????? "1 ??????", "3 ??????", "30 ?????" 

        /// </summary> 

        /// <param name="minutes"></param> 

        /// <returns></returns> 

        public string GetTextForMinutes(int minutes) 

        { 

            CodeContract.Requires(0 <= minutes && minutes <= 59); 

 

 

            var keyWord = GetMinuteKeyWord(minutes); 

            switch (keyWord) 

            { 

                case MinuteKeyWord_Minut: 

                    keyWord = "?????"; 

                    break; 

 

 

                case MinuteKeyWord_Minuta: 

                    keyWord = "??????"; 

                    break; 

 

 

                case MinuteKeyWord_Minuty: 

                    keyWord = "??????"; 

                    break; 

            } 

 

 

            return string.Format("{0} {1}", minutes, keyWord); 

        } 

 

 

        /// <summary> 

        /// ?????????? ????. ???? ??? ????? "??????" ? ?????? ??????, 

        /// ?.?. ??????, ??????, ????? 

        /// </summary> 


        /// <param name="minutes"></param> 

        /// <returns></returns> 

        private string GetSoundForMinuteWord(int minutes) 

        { 

            return string.Format("{0}{1}", _timesSoundsDirPath, GetMinuteKeyWord(minutes)); 

        } 

 

 

        private const string MinuteKeyWord_Minuta = "minuta"; 

        private const string MinuteKeyWord_Minuty = "minuty"; 

        private const string MinuteKeyWord_Minut = "minut"; 

 

 

        /// <summary> 

        /// ?????????? ???? ??? ????? "??????" ? ?????? ?????? 

        /// </summary> 

        /// <param name="minutes"></param> 

        /// <returns></returns> 

        private string GetMinuteKeyWord(int minutes) 

        { 

            if (minutes > 20) 

                minutes %= 10; 

 

 

            // 1 ?????? 

            if (minutes == 1) 

                return MinuteKeyWord_Minuta; 

 

 

            // 2,3,4 ?????? 

            else if (2 <= minutes && minutes <= 4) 

                return MinuteKeyWord_Minuty; 

 

 

            // 0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 ????? 

            else 

                return MinuteKeyWord_Minut; 

        } 

 

 

        #endregion 

 

 

        #region ??? 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 

        /// ?????????? ???????? ???-?? ????, ???????? "1 ????", "3 ???", "30 ????" 

        /// </summary> 


        /// <param name="days"></param> 

        /// <returns></returns> 

        public string[] GetSoundForDays(int days) 

        { 

            CodeContract.Requires(0 <= days); 

 

 

            var sounds = new List<string>(); 

            sounds.AddRange(GetSoundForNumber(days, false, NumberDeclension.None)); 

 

 

            var soundForDayWord = string.Format("{0}{1}", _timesSoundsDirPath, GetDayKeyWord(days)); 

            sounds.Add(soundForDayWord); 

 

 

            return sounds.ToArray(); 

        } 

 

 

        /// <summary> 

        /// ?????????? ????? ??? ??????????? ????????? ???-?? ????, ???????? "1 ????", "3 ???", "30 ????" 

        /// </summary> 

        /// <param name="minutes"></param> 

        /// <returns></returns> 

        public string GetTextForDays(int days) 

        { 

            CodeContract.Requires(0 <= days); 

 

 

            var keyWord = GetDayKeyWord(days); 

            switch (keyWord) 

            { 

                case DayKeyWord_Den: 

                    keyWord = "????"; 

                    break; 

 

 

                case DayKeyWord_Dnya: 

                    keyWord = "???"; 

                    break; 

 

 

                case DayKeyWord_Dney: 

                    keyWord = "????"; 

                    break; 

            } 

 

 

            return string.Format("{0} {1}", days, keyWord); 

        } 


 
 

        private const string DayKeyWord_Den = "den"; 

        private const string DayKeyWord_Dnya = "dnya"; 

        private const string DayKeyWord_Dney = "dney"; 

 

 

        /// <summary> 

        /// ?????????? ???? ??? ????? "????" ? ?????? ??????, ?.?. ????, ???, ???? 

        /// </summary> 

        /// <param name="days"></param> 

        /// <returns></returns> 

        private string GetDayKeyWord(int days) 

        { 

            // ?? ??????, ???? ???-?? ???? ?????? 100 

            days = days % 100; 

 

 

            // 11,12,13,14,15,16,17,18,19 ???? 

            if (11 <= days && days <= 19) 

                return DayKeyWord_Dney; 

 

 

            var one = days % 10; 

 

 

            // x1 ???? 

            if (one == 1) 

                return DayKeyWord_Den; 

 

 

            // x2,x3,x4 ??? 

            if (2 <= one && one <= 4) 

                return DayKeyWord_Dnya; 

 

 

            // x0,x5,x6,x7,x8,x9 ???? 

            else 

                return DayKeyWord_Dney; 

        } 

 

 

        #endregion 

 

 

        #region ???? (???? ????? ???) 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 


        /// ?????????? ????? ??? ? ??????, ???????? "??????", "???????? ?????" 

        /// </summary> 

        /// <param name="dayNumber">????? ??? (?? 1 ?? 31)</param> 

        /// <returns></returns> 

        public string[] GetSoundForDayInMonth(int dayNumber) 

        { 

            CodeContract.Requires(1 <= dayNumber && dayNumber <= 31); 

            return GetSoundForNumber(dayNumber, false, NumberDeclension.N_oe); 

        } 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 

        /// ?????????? ???????? ?????? ? ??????????? ??????, ???????? "?????", "????" 

        /// </summary> 

        /// <param name="monthNumber">????? ?????? (?? 1 ?? 12)</param> 

        /// <returns></returns> 

        public string GetSoundForMonth(int monthNumber) 

        { 

            CodeContract.Requires(1 <= monthNumber && monthNumber <= 12); 

            return string.Format("{0}{1}_a", _monthsSoundsDirPath, monthNumber); 

        } 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ??????, ??????? ??? ???????????????? ??????????????? 

        /// ?????????? ????? ???? ? ??????????? ??????, ???????? "1945-???", "2010-???" 

        /// </summary> 

        /// <param name="yearNumber"></param> 

        /// <returns></returns> 

        public string[] GetSoundForYear(int yearNumber) 

        { 

            var sounds = new List<string>(); 

            sounds.AddRange(GetSoundForNumber(yearNumber, false, NumberDeclension.N_ogo)); 

            sounds.Add(string.Format("{0}goda", _timesSoundsDirPath)); 

 

 

            return sounds.ToArray(); 

        } 

 

 

        #endregion 

 

 

        #region ????? 

 

 

        /// <summary> 

        /// ?????????? ???? ? ????. ????? ??? ??????????????? ?????  

        /// </summary> 


        /// <param name="letter"></param> 

        /// <returns></returns> 

        public string GetSoundForLetter(char letter) 

        { 

            return _lettersSoundsDirPath + (int)letter; 

        } 

 

 

        #endregion 

 

 

        #endregion 

 

 

        #region ??????????????? ???? 

 

 

        /// <summary> 

        /// ???????? ????? 

        /// </summary> 

        private ISoundPlayer _soundPlayer; 

        /// <summary> 

        /// ?????? ???????? ?????? ??? ??????????????? 

        /// </summary> 

        /// <remarks>???? ?????? ?????????? != null, ?? ??? ?????? ? ?????? ?????? ??????????? ???????????????</remarks> 

        private volatile string[] _soundFiles = null; 

        /// <summary> 

        /// ?????? ???????? ???????????????? ????????? ????? 

        /// </summary> 

        private int _currentSoundFileIndex; 

        /// <summary> 

        /// ?????????? ??? ?????? ??? ?????????? ??????????????? 

        /// </summary> 

        private EventHandler _playingFinishedCallback; 

 

 

        /// <summary> 

        /// ????????????? ?????? 

        /// </summary> 

        private void InitSoundPlayer() 

        { 

            if (_soundPlayer != null) 

                _soundPlayer.Dispose(); 

 

 

            switch (_config.Player.Format) 

            { 

                case SoundPlayerType.Wav: 

                    _soundPlayer = new WavPlayer(Logger, _config.Player.DeviceLatency, _config.Player.AfterPlayDelay); 

                    break; 


 
 

                case SoundPlayerType.Spx: 

                    _soundPlayer = new SpeexPlayer(Logger, _config.Player.DeviceLatency, _config.Player.AfterPlayDelay); 

                    break; 

 

 

                case SoundPlayerType.SpxCmd: 

                    _soundPlayer = new CommandSpeexPlayer(Logger); 

                    break; 

 

 

                default: 

                    throw new Exception("??????????? ?????? ??????"); 

            } 

 

 

            _soundPlayer.PlayingStopped += new EventHandler(SoundPlayer_PlayingStopped); 

        } 

 

 

        /// <summary> 

        /// ????????????? ???????? ????? 

        /// </summary> 

        /// <param name="soundFiles">?????? ????? ? ???????? ??????</param> 

        /// <param name="playingFinishedCallback">?????????? ??????? ?????????? ???????????????</param> 

        public void PlaySounds(string[] soundFiles, EventHandler playingFinishedCallback) 

        { 

            CodeContract.Requires(soundFiles != null && soundFiles.Length > 0); 

 

 

            // ???? ? ?????? ?????? ??????????? ??????????????? 

            if (_soundFiles != null) 

                // ?? ????????????? ????? 

                _soundPlayer.Stop(); 

            else 

            { 

                // ????? - ???????? ??????? ?? 

                ProcessHelper.ExecCommand(_config.Commands.BeforePlaying); 

            } 

 

 

            _soundFiles = soundFiles; 

            _currentSoundFileIndex = 0; 

            _playingFinishedCallback = playingFinishedCallback; 

 

 

            // ????????? ??????????????? ??????? ????????? ????? 

            _soundPlayer.Play(_soundFiles[0]); 

        } 


 
 

        /// <summary> 

        /// ?????????? ?????????? ??????????????? ?????????? ????????? ????? 

        /// </summary> 

        /// <param name="sender"></param> 

        /// <param name="e"></param> 

        private void SoundPlayer_PlayingStopped(object sender, EventArgs e) 

        { 

            if (_soundFiles == null) 

                return; 

 

 

            // ???? ??? ?? ??? ???????? ????? ????????? 

            if (++_currentSoundFileIndex < _soundFiles.Length) 

            { 

                // ????????? ??????????????? ?????????? ????????? ????? 

                _soundPlayer.Play(_soundFiles[_currentSoundFileIndex]); 

            } 

            else 

            { 

                _soundFiles = null; 

                // ???????? ??????? ????? 

                ProcessHelper.ExecCommand(_config.Commands.AfterPlaying); 

 

 

                // ???????, ??? ??????????????? ????????? 

                if (_playingFinishedCallback != null) 

                    _playingFinishedCallback(this, EventArgs.Empty); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ????? ?????????? ??????????????? ???????? ?????? 

        /// </summary> 

        public void StopPlaying() 

        { 

            // ????????????? ????? 

            _soundPlayer.Stop(); 

 

 

            if (_soundFiles != null) 

            {                 

                _soundFiles = null; 

                // ???????? ??????? ????? 

                ProcessHelper.ExecCommand(_config.Commands.AfterPlaying); 

            } 

        } 

 


 
        #endregion 

 

 

        #endregion 

 

 

        #region IDisposable Members 

 

 

        public override void Dispose() 

        { 

            base.Dispose(); 

 

 

            if (_soundPlayer != null) 

                _soundPlayer.Dispose(); 

 

 

            GC.SuppressFinalize(this); 

        } 

 

 

        #endregion 

    } 

}


