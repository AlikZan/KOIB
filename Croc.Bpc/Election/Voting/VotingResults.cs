using System; 

using System.Collections.Generic; 

using System.Diagnostics; 

using System.Collections; 

using System.IO; 

using System.Threading; 

using System.Xml; 

using Croc.Bpc.Common; 

 

 

namespace Croc.Bpc.Election.Voting 

{ 

    /// <summary> 

    /// ??????? ?????????? ??????????? 

    /// </summary> 

    [Serializable] 

    public class VotingResults 

    { 

        /// <summary> 

        /// ?????? ????????????? ??? ?????? ?? ???????? ??????? 

        /// </summary> 

        private static object s_votesSync = new object(); 

        /// <summary> 

        /// ??????? ???????: [???? ?????? VoteKey, ???-?? ??????? Int32] 

        /// </summary> 

        /// <remarks>Hashtable ?????????? ??????, ??? ??? ???????????? Dictionary ????????? ?????? ? ????</remarks> 

        private Hashtable _votes = new Hashtable(); 

 

 

        /// <summary> 

        /// ??????? ??????/????????? ????????? ?????? 

        /// </summary> 

        internal void ClearTestData() 

        { 

            lock (s_votesSync) 

            { 

                var keys = new VoteKey[_votes.Keys.Count]; 

                _votes.Keys.CopyTo(keys, 0); 

 

 

                foreach (var key in keys) 

                    if (key.VotingMode == VotingMode.Test) 

                        _votes.Remove(key); 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ????????? ????? 

        /// </summary> 


        /// <param name="voteKey">???? ??????</param> 

        internal void AddVote(VoteKey key) 

        { 

            // ???? ???? ????, ?? ?? ?????? ??????????? ????? 

            lock (s_votesSync) 

            { 

                if (_votes.ContainsKey(key)) 

                    _votes[key] = (int)_votes[key] + 1; 

                else 

                    _votes[key] = 1; 

            } 

        } 

 

 

        /// <summary> 

        /// ????????? ??????? ??????????? ??????????? 

        /// </summary> 

        public enum MergeResult 

        { 

            /// <summary> 

            /// ?????????? ?????????, ??????? ?? ????? ????????? 

            /// </summary> 

            NotNeed, 

            /// <summary> 

            /// ?????? ?????????? ????????? ?????? ??????? ?? ??????? 

            /// </summary> 

            OtherContainMoreVotes, 

            /// <summary> 

            /// ???? ?????????? ????????? ?????? ??????? ?? ??????? 

            /// </summary> 

            OurContainMoreVotes, 

        } 

 

 

        /// <summary> 

        /// ????????? ??????? ?????? ??????????? ? ??????? 

        /// </summary> 

        /// <param name="otherVotingResults">?????? ??????????</param> 

        /// <returns> 

        /// 0       - ?????????? ?????????, ??????? ?? ??????????? 

        /// -1      - ?????? ?????????? ????????? ?????? ??????? 

        /// 1       - ???? ?????????? ???????? ?????? ??????? 

        /// </returns> 

        internal MergeResult Merge(VotingResults otherVotingResults) 

        { 

            bool otherVotesMore = false; 

            bool ourVotesMore = false; 

 

 

            // ????????? ????? ?????? ??????????? ??????????? 


            foreach (VoteKey key in otherVotingResults._votes.Keys) 

            { 

                // ???? ????? ????? ??????????? ?????? ????? ?? ??????? 

                // ??? ???? ??????, ?? ???? ???-?? ??????? ?????? 

                if (!_votes.ContainsKey(key) || 

                    (int)_votes[key] < (int)otherVotingResults._votes[key]) 

                { 

                    _votes[key] = otherVotingResults._votes[key]; 

                    otherVotesMore = true; 

                } 

            } 

 

 

            // ????????? ????? ????? ??????????? ??????????? 

            foreach (VoteKey key in _votes.Keys) 

            { 

                // ???? ????? ?????? ??????????? ?????? ????? ?? ??????? 

                // ??? ???? ??????, ?? ???-?? ??????? ?????? 

                if (!otherVotingResults._votes.ContainsKey(key) || 

                    (int)otherVotingResults._votes[key] < (int)_votes[key]) 

                { 

                    ourVotesMore = true; 

                } 

            } 

 

 

            return ourVotesMore 

                ? MergeResult.OurContainMoreVotes 

                : (otherVotesMore ? MergeResult.OtherContainMoreVotes : MergeResult.NotNeed); 

        } 

 

 

        #region public-?????? ??? ????????? ???-?? ??????? 

 

 

        /// <summary> 

        ///	?????????? ??????????, ????????? ?? ??? ??????? ?? ??????? 

        /// </summary> 

        public int TotalBulletinCount 

        { 

            get 

            { 

                var key = new VoteKey() 

                { 

                    BlankType = BlankType.All 

                }; 

 

 

                return VotesCount(key); 

            } 


        } 

 

 

        /// <summary> 

        /// ???-?? ??????????, ????????? ? ???????? ?????? 

        /// </summary> 

        /// <param name="scannerSerialNumber"></param> 

        /// <returns></returns> 

        public int GetBulletinCountForScanner(int scannerSerialNumber) 

        { 

            var key = new VoteKey() 

            { 

                ScannerSerialNumber = scannerSerialNumber, 

                BlankType = BlankType.All 

            }; 

 

 

            return VotesCount(key); 

        } 

 

 

        /// <summary> 

        ///	?????????? ???-?? ???????, ??????????????? ???????? ????? 

        /// </summary> 

        /// <param name="mask">?????</param> 

        public int VotesCount(VoteKey mask) 

        { 

            lock (s_votesSync) 

            { 

                int res = 0; 

 

 

                foreach (VoteKey key in _votes.Keys) 

                    if (key.CheckMask(mask)) 

                        res += (int)_votes[key]; 

 

 

                return res; 

            } 

        } 

 

 

		/// <summary> 

		/// ??????? ?????? ??????????? ??????? ?? ??????? 

		/// </summary> 

		/// <param name="electionId">?? ???????</param> 

		/// <returns>?????????? ???????</returns> 

		public int GetTotalVotesCount(string electionId) 

		{ 

			var key = new VoteKey 


			{ 

				ElectionNum = electionId 

			}; 

 

 

			return VotesCount(key); 

		} 

 

 

		/// <summary> 

		/// ??????? ???????????? ??????? ?????? ???? 

		/// </summary> 

		/// <param name="election">??????</param> 

		/// <returns>??????????? ???????</returns> 

		public int GetAboveCandidateVotesCount(Election election) 

		{ 

			if (!election.NoneAboveExists) 

				return 0; 

 

 

			var key = new VoteKey 

			{ 

				ElectionNum = election.ElectionId, 

				CandidateId = election.NoneAboveCandidate.Id 

			}; 

 

 

			return VotesCount(key); 

		} 

 

 

		/// <summary> 

		/// ???????? ??? ???????, ?? ??????? ???? ?????? 

		/// </summary> 

		/// <returns>?????? ????????</returns> 

		public List<ScannerInfo> GetScannerInfos() 

		{ 

			var resultList = new List<ScannerInfo>(); 

 

 

			// ????????? ?? ???? ?????? ??????????? ? ?????? ??????? 

			foreach (VoteKey key in _votes.Keys) 

			{ 

				if(key.ScannerSerialNumber == null) 

					continue; 

 

 

				var scanner = new ScannerInfo(key.ScannerSerialNumber.ToString(), null); 

				// ???? ?????? ??????? ??? ??? 

				if (!resultList.Contains(scanner)) 


				{ 

					resultList.Add(scanner); 

				} 

			} 

 

 

			return resultList; 

		} 

 

 

        #endregion 

 

 

        #region ????????? ???? ??? ???????? ???????????? ??????????? ?????? ?? 2? ???????? 

        ///// <summary> 

        ///// ?????????? ??? ??????????? ??????????? 

        ///// </summary> 

        ///// <returns>??? ??????????? ???????????</returns> 

        //public int getCommonVotesHash() 

        //{ 

        //    int S = 0; 

 

 

        //    for(int i = 0; i < Scanner.Voting.SourceData.m_aElections.Length; i++)  

        //    { 

        //        S += Scanner.Voting.GetCommonVotesCount(Scanner.Voting.SourceData.m_aElections[i].ElectionID, 'S') * (i + 1); 

        //    } 

 

 

        //    return S; 

        //} 

 

 

        ///// <summary> 

        ///// ?????????? ??? ???????, ???????? ?? ?????????? 

        ///// </summary> 

        ///// <returns>??? ???????, ???????? ?? ??????????</returns> 

        //public int getVotesHash() 

        //{ 

        //    int S = 0; 

 

 

        //    for(int i = 0; i < Scanner.Voting.SourceData.m_aElections.Length; i++)  

        //    { 

        //        //?????? ?????????? 

        //        VotesKey oMask = new VotesKey(); 

        //        oMask.Type = VoteType.VOTE; 

        //        oMask.ElectionNum = Scanner.Voting.SourceData.m_aElections[i].ElectionID; 

 

 


        //        for(int j = 0; j < Scanner.Voting.SourceData.m_aElections[i].m_aCandidates.Length; j++)  

        //        { 

        //            //???????????: 

        //            oMask.CandidateID = Scanner.Voting.SourceData.m_aElections[i].m_aCandidates[j].ID; 

        //            //????? ???????: 

        //            int nVotesCount = Scanner.Voting.m_oVotingResults.VotesCount(oMask); 

 

 

        //            S += nVotesCount * (j + 1) * (i + 1); 

        //        } 

        //    } 

 

 

        //    return S; 

        //} 

 

 

        ///// <summary> 

        ///// ??? ?????????? ???????? ?????????? 

        ///// </summary> 

        ///// <returns>??? ?????????? ???????? ??????????</returns> 

        //public int getBulletinHash() 

        //{ 

        //    int S = 0; 

 

 

        //    VotesKey oMask = new VotesKey();		// ????? ?????? 

        //    oMask.Type = VoteType.BULLETIN; 

 

 

        //    int colCount = /*1 /* ??????? ?????? */ Scanner.Manager.DriverList.Count + RemoteSIBList.Instance.ToArray().Length; 

        //    // ?????? ??????? ???????? 

        //    int[] scanners = new int[colCount]; 

        //    /* ??????? ?????? */ 

        //    int k = 0; 

        //    //MARK: ?????? ??????? 

        //    //scanners[k] = Convert.ToInt32(Scanner.Manager.SerialNumber); 

        //    foreach (var driver in Scanner.Manager.DriverList) 

        //    { 

        //        scanners[k++] = Convert.ToInt32(driver.SerialNumber); 

        //    } 

 

 

        //    /* ????????? ??????? */ 

        //    foreach(RemoteSIBInfo oSIB in RemoteSIBList.Instance.ToArray()) 

        //    { 

        //        scanners[k++] = Convert.ToInt32(oSIB.Serial); 

        //    } 

 

 


        //    for(int i = 0; i < scanners.Length; i++)  

        //    { 

        //        oMask.ScannerNum = scanners[i]; 

        //        foreach(BlankType tp in new BlankType[] {BlankType.Valid, BlankType.NoMarks, BlankType.TooManyMarks}) 

        //        { 

        //            oMask.BlankType = tp; 

        //            S += Scanner.Voting.m_oVotingResults.VotesCount(oMask) * scanners[i] * ((int)tp + 1); 

        //        } 

        //    } 

 

 

        //    return S; 

        //} 

        #endregion 

    } 

}


