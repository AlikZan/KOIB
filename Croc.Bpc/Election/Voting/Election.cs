using System; 

using System.Collections; 

using System.Diagnostics; 

using System.Xml.Serialization; 

using System.Text; 

 

 

namespace Croc.Bpc.Election.Voting 

{ 

	/// <summary> 

	/// ?????? ?????????? ? ?????? ??????????? 

	/// </summary> 

	[Serializable, XmlType("Election")] 

	public class Election 

	{ 

        /// <summary> 

        /// ?????? ????????? (?? ????????????? ? ?? ???????????? ?????????) 

        /// </summary> 

        [XmlAttribute("disabled")] 

        public bool Disabled; 

		/// <summary> 

		///		?????? ? ??????????? ???????? 

		/// </summary> 

        [XmlElement("ParentComittee")] 

        public ParentComittee ParentComittee; 

		/// <summary> 

		/// ?????? ??????????? ???????? 

		/// </summary> 

        [XmlArray("StampCommittees")] 

        [XmlArrayItem("StampCommittee", IsNullable = false)] 

        public StampCommittee[] StampCommittees = new StampCommittee[0]; //?????????????? ?????? ???????? 

        /// <summary> 

        /// ???????? ?????? ?? ???????? 

        /// </summary> 

        private ProtocolTemplate _protocol; 

		/// <summary> 

		/// ?????? ????????? ??????????? 

		/// </summary> 

        [XmlElement("Protocol")] 

        public ProtocolTemplate Protocol 

        { 

            get 

            { 

                return _protocol; 

            } 

            set 

            { 

                _protocol = value; 

                _protocol.SetElection(this); 

            } 


        } 

		/// <summary> 

		/// ????????? ?? ?????? ??????? 

		/// </summary> 

        [XmlArray("Candidates")] 

        public Candidate[] Candidates = new Candidate[0]; //?????????????? ?????? ???????? 

		/// <summary> 

		/// ???? (??????) ??????????? 

		/// </summary> 

        [XmlArray("Modes")] 

        [XmlArrayItem("Mode")] 

        public VotingMode[] VotingModes = new VotingMode[0]; //?????????????? ?????? ???????? 

		/// <summary> 

		/// ???????????? ??????? 

		/// </summary> 

        [XmlAttribute("name")] 

        public string Name; 

		/// <summary> 

		/// ?????????? ???????? 

		/// </summary> 

        [XmlAttribute("maxMarks")] 

        public int MaxMarks; 

		/// <summary> 

		/// ????? ??????? ?? ??????? ??????? (????????, ? ??? ??????) 

		/// </summary> 

        [XmlAttribute("num")] 

        public string ExternalNumber; 

        /// <summary> 

        /// ????? ?? ??????? ? ???????? ?????? 

        /// </summary> 

        [XmlAttribute("id")] 

        public string Id; 

        /// <summary> 

        /// ????? ??????? ??? ????? ? ???????? ?????? 

        /// </summary> 

        [XmlIgnore] 

        public string ElectionId 

        { 

            get 

            { 

                // ???? ?? ????? ??????? "id" 

                if(string.IsNullOrEmpty(Id)) 

                    // ?? ????????? ????? ?? ??????? ??????? 

                    return ExternalNumber; 

 

 

                return Id; 

            } 

        } 

		/// <summary> 


		/// ?????????? ?? ??? ?????? ??????? ??????? "?????? ????". 

		/// </summary> 

        [XmlIgnore] 

        public bool NoneAboveExists 

        { 

            get 

            { 

                //???? ? ????????? ?????????? ????????? 

                foreach (Candidate oCand in Candidates) 

                    if (oCand.NoneAbove) //????? 

                        return true; 

 

 

                return false; //?? ????? 

            } 

        } 

		/// <summary> 

		/// ?????????? ????????? "?????? ???? ? ???????" 

		/// </summary> 

        [XmlIgnore] 

        public Candidate NoneAboveCandidate 

        { 

            get 

            { 

                foreach (Candidate oCand in Candidates) 

                    if (oCand.NoneAbove) return oCand; 

 

 

                return null; 

            } 

        } 

        /// <summary> 

        /// ?????? ? ?????????? ??????? 

        /// </summary> 

        [XmlIgnore] 

        public string Modes 

        { 

            get 

            { 

                return SourceData.GetModeNames(VotingModes); 

            } 

        } 

        /// <summary> 

        /// ?????????? ?????????? ??? ????? "?????? ????" 

        /// </summary> 

        /// <returns>?????????? ?????????? ??? ????? "?????? ????"</returns> 

        public int GetRealCandidateLength() 

        { 

            int iAgainstAll = 0; 

 


 
            for (int index = 0; index < Candidates.Length; index++) 

            { 

                if (Candidates[index].NoneAbove == true) 

                { 

                    iAgainstAll++; 

                } 

            } 

 

 

            return Candidates.Length - iAgainstAll; 

        } 

 

 

		/// <summary> 

		/// ?????? ?? ????????????? ?? 

		/// </summary> 

		private string m_sFailedKS = String.Empty; 

 

 

        /// <summary> 

        /// ?????? ??????????????? ?? 

        /// </summary> 

        private ArrayList m_aFailedKS = new ArrayList(); 

 

 

		/// <summary> 

		/// ???? ?? ???? ?? ??????????????? ?? ?? ????????? 

		/// </summary> 

		private bool m_bKSTurnedOff = false; 

 

 

		/// <summary> 

		/// ?????? ?? ????????????? ?? 

		/// </summary> 

        [XmlIgnore] 

        public string KSFailedNumbers 

		{ 

			get 

			{ 

				return m_sFailedKS; 

			} 

			set 

			{ 

				m_sFailedKS = value; 

			} 

		} 

 

 

        /// <summary> 


        /// ?????? ??????? ?? ????????????? ?? 

        /// </summary> 

        [XmlIgnore] 

        public ArrayList FailedControlRelations 

        { 

            get 

            { 

                return m_aFailedKS; 

            } 

        } 

 

 

		/// <summary> 

		/// ???? ?? ???? ?? ??????????????? ?? ?? ????????? 

		/// </summary> 

        [XmlIgnore] 

        public bool KSTurnedOff 

		{ 

			get 

			{ 

				return m_bKSTurnedOff; 

			} 

			set 

			{ 

				m_bKSTurnedOff = value; 

			} 

		} 

 

 

		/// <summary> 

		/// ????????? ???????? ?? 

		/// </summary> 

		public enum CheckResult 

		{ 

			/// <summary> 

			/// -3 - ?? ????????? ?????? ?????????? ?? 

			/// </summary> 

			LogicalFailed = -3, 

			/// <summary> 

			/// -2 - ?? ??? ? ?? 

			/// </summary> 

			NotDefined = -2, 

			/// <summary> 

			/// -1 - ?? ?? ??????????? 

			/// </summary> 

			Off = -1, 

			/// <summary> 

			///  0 - ?? ?? ????????? (? ?.?. ? ??????????) 

			/// </summary> 

			Failed = 0, 


			/// <summary> 

			///  1 - ?? ????????? (? ?.?. ? ??????????) 

			/// </summary> 

			OK = 1, 

		} 

 

 

        /// <summary> 

        /// ?????????, ??????????? ?? ??????????? ??????????? 

        /// </summary> 

        /// <returns></returns> 

        public bool IsControlRelationsSatisfied() 

        { 

            return AllChecksDone() != CheckResult.Failed; 

        } 

 

 

        /// <summary> 

        /// ??????????????? ??????? ??? ??????? ?? 

        /// </summary> 

        /// <returns>????????? ???????? ??</returns> 

        public CheckResult AllChecksDone() 

        { 

            //TODO: ?????????? ?? 

			// ??????? ?? 

			FailedControlRelations.Clear(); 

			CheckResult nDone = CheckResult.NotDefined; 

			KSFailedNumbers = ""; 

			KSTurnedOff = true; 

 

 

			if (Protocol.Checks != null) 

			{ 

				nDone = CheckResult.OK; 

				// ????? ?? 

				int ksNumber = 0; 

 

 

				// ????????? ?? ??? ?? ? ???????? ?? 

				foreach (CheckExpression check in Protocol.Checks) 

				{ 

					try 

					{ 

						// ???? ?? ?? ????????? 

						if (!check.Check(Protocol)) 

						{ 

							if (check.Enabled) KSTurnedOff = false; 

							nDone = MakeKSError(check.Mild, ksNumber, nDone, null); 

						} 

					} 


					catch (Exception ex) 

					{ 

						nDone = MakeKSError(check.Mild, ksNumber, nDone, ex.Message); 

					} 

 

 

					ksNumber++; 

				} 

 

 

				// ?????? ????????? ?????? 

				if (m_sFailedKS.Length != 0) 

					m_sFailedKS = m_sFailedKS.TrimEnd(','); 

			} 

 

 

            return nDone; 

		} 

 

 

		/// <summary> 

		/// ????????? ???????????? ????????? ?? ?????? ?? 

		/// </summary> 

		/// <param name="mildKS">??????? ??????????? ??</param> 

		/// <param name="i">????? ??</param> 

		/// <param name="nDone">??????????? ????????? ????????</param> 

		/// <param name="additionalMessage">?????????????? ????????? ? ???? ??; ????? ???? null</param> 

		/// <returns>????????????????? ????????? ????????</returns> 

		private CheckResult MakeKSError(bool mildKS, int i, CheckResult nDone, string additionalMessage) 

		{ 

			// ????????? ???????? ???????????????? ?? 

			m_sFailedKS += (i + 1).ToString() +  

				(additionalMessage != null ? "(" + additionalMessage + ")" : "") + ","; 

			// ????????? ? ?????? ??????????????? ?? 

			m_aFailedKS.Add(i); 

			// ????????? ????????? ??????? ???????? ?????? ? ??? ?????? 

			// ???? ?????? ???????? ?? ?????????? ? "?? ??????????? ??????? ??" 

			if(nDone != CheckResult.Failed && mildKS) 

			{ 

				nDone = CheckResult.LogicalFailed; 

			} 

			else  

			{ 

				nDone = CheckResult.Failed; 

			} 

			return nDone; 

		} 

 

 

		/// <summary> 


		/// ?????????? ????????? ????????????? ??????? 

		/// </summary> 

		/// <returns></returns> 

		public override string ToString() 

		{ 

			StringBuilder sText = new StringBuilder(); 

			// ????????? ?????? 

			sText.Append("["); 

			// ????????? ???? ?????????? ??????? 

			sText.Append("isDisabled=" + Disabled.ToString() + ";"); 

			// ????????? ?????? ? ??????????? ???????? 

			sText.Append("ParentComittee" + ParentComittee + ";"); 

			// ????????? ?????? ??????????? ???????? 

			sText.Append("StampCommittees=["); 

			foreach(StampCommittee oCommittie in StampCommittees) 

			{ 

				sText.Append(oCommittie + ";"); 

			} 

			sText.Append("];"); 

			// ????????? ?????? ????????? ??????????? 

			sText.Append("Protocol=" + Protocol + ";"); 

 

 

            // ????????? ?????????? ?? ??????? 

			sText.Append("Candidates=["); 

			foreach(Candidate oCand in Candidates) 

			{ 

				sText.Append(oCand + ";"); 

			} 

			sText.Append("],"); 

 

 

			// ????????? ?????? ??????????? 

			sText.Append("Modes=["); 

			foreach(VotingMode mode in VotingModes) 

			{ 

				sText.Append(mode.ToString() + ";"); 

			} 

			sText.Append("];"); 

			// ????????? ???????????? ??????? 

			sText.Append("Name=" + Name + ";"); 

			// ????????? ?????????? ???????? 

			sText.Append("MaxMarks=" + MaxMarks.ToString() + ";"); 

			// ????????? ????? ??????? ?? ??????? ???????  

			sText.Append("Num=" + ExternalNumber + ";"); 

			// ????????? ????? ?? ??????? ? ???????? ?????? 

			sText.Append("Id=" + Id + ";"); 

 

 

			// ????????? ?????? 


			sText.Append("]"); 

 

 

			return sText.ToString(); 

		} 

	} 

}


