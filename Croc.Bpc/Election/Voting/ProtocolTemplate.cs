using System; 

using System.Xml.Serialization; 

using System.Text; 

 

 

namespace Croc.Bpc.Election.Voting 

{ 

    /// <summary> 

    /// ?????? ????????? ? ?????????? ??????? 

    /// </summary> 

    [Serializable] 

    public class ProtocolTemplate 

    { 

        /// <summary> 

        /// ?????? ????????? 

        /// </summary> 

        [XmlArray("Lines")] 

        public Line[] Lines 

        { 

            get 

            { 

                foreach (Line oLine in _linesInternal) 

                    oLine.SetProtocol(this); 

                //?????? ??????????? ??????: 

                return _linesInternal; 

            } 

            set 

            { 

                _linesInternal = value; 

                foreach (Line oLine in _linesInternal) 

                    oLine.SetProtocol(this); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ???????? ?????? ?????.... 

        /// </summary> 

        private Line[] _linesInternal = new Line[0]; // ???????? ????????? ?????? ???????? 

 

 

        /// <summary> 

        /// ??????????? ?????? ??? ???????? ?? (??? ?????? ????????????) 

        /// </summary> 

        [XmlArray("ExtraChecks")] 

        public Line[] ExtraChecks 

        { 

            get 

            { 

                foreach (Line oLine in _extraChecksInternal) 


                    oLine.SetProtocol(this); 

                //?????? ??????????? ??????: 

                return _extraChecksInternal; 

            } 

            set 

            { 

                _extraChecksInternal = value; 

                foreach (Line oLine in _extraChecksInternal) 

                    oLine.SetProtocol(this); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ???????? ??????????? ????? ??? ???????? ??.... 

        /// </summary> 

        private Line[] _extraChecksInternal = new Line[0]; //???????? ????????? ?????? ???????? 

 

 

        /// <summary> 

        /// ?????? ????? ? ???????????? ????????????? 

        /// </summary> 

        [XmlArray("Checks")] 

        [XmlArrayItem("Check")] 

        public CheckExpression[] Checks; 

        /// <summary> 

        /// ???????????? ????????? 

        /// </summary> 

        [XmlAttribute("name")] 

        public string Name; 

        /// <summary> 

        ///		?????? ??????? ?? ????????? ?????? ???????? 

        /// </summary> 

        [XmlAttribute("textValueWidth")] 

        public int TextValueWidth; 

        /// <summary> 

        /// ?????? ??????? ? ??????? ?????? 

        /// </summary> 

        [XmlAttribute("numberWidth")] 

        public int NumberWidth; 

        /// <summary> 

        /// ?????? ??????? ? ?????? ?????? 

        /// </summary> 

        [XmlAttribute("nameWidth")] 

        public int NameWidth; 

        /// <summary> 

        /// ?????? ??????? ?? ????????? ?????? 

        /// </summary> 

        [XmlAttribute("valueWidth")] 

        public int ValueWidth; 


        /// <summary> 

        /// ?????? - ?????? ??????????? ?????? ?????????? 

        /// </summary> 

        [XmlAttribute("disabledString")] 

        public string DisabledString; 

 

 

        /// <summary> 

        /// ?????? ???????? ????????? 

        /// </summary> 

        [XmlArray("Texts")] 

        [XmlArrayItem("Text")] 

        public ProtocolText[] Texts = new ProtocolText[0]; 

 

 

        /// <summary> 

        /// ????? ? ????????, ? ??????? ????????? ???????? 

        /// </summary> 

        [XmlIgnore] 

        public Election ElectionLink 

        { 

            get 

            { return m_oElectionLink; } 

        } 

 

 

        /// <summary> 

        /// ????????????? ????? ? ???????? 

        /// </summary> 

        /// <param name="oElection">?????? ?? ??????</param> 

        public void SetElection(Election oElection) 

        { 

            m_oElectionLink = oElection; 

        } 

 

 

        /// <summary> 

        /// ????? ? ???????? 

        /// </summary> 

        private Election m_oElectionLink = null; 

 

 

        /// <summary> 

        /// ?????????? ?????? ????????? 

        /// </summary> 

        /// <param name="final"> 

        /// ??? ?????????: 

        ///     true - ???????? 

        ///     false - ??????????????? 

        /// </param> 


        /// <returns>?????? ????????? ??? null</returns> 

        public ProtocolText GetProtocolTemplate(bool final) 

        { 

            if (Texts != null) 

            { 

                // ?????????? ??? ???????? Text 

                foreach (ProtocolText oCurText in Texts) 

                { 

                    // ???? ????? ? ????????? 

                    if (oCurText.Final == final) 

                    { 

                        return oCurText; 

                    } 

                } 

            } 

 

 

            return null; 

        } 

 

 

        /// <summary> 

        /// ????? ????????? ?????? ??? ???????? 

        /// </summary> 

        public int LatestLineNumber 

        { 

            get 

            { 

                if (Lines != null && Lines.Length > 0) 

                { 

                    return Lines[Lines.Length - 1].Num; 

                } 

                else 

                { 

                    return 0; 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ????? ????????? ?????? ??? ???????? ? ?????? ??????? ??? ???????? ? ??????? 

        /// ???? ??????? ???, ?? ?????????? ????? ????????? ?????? 

        /// ???? ?????? ????, ?? ?????????? ????? ????????? ??????, ???? ??? ???????? ???? ? ???????, ????? ???? 

        /// </summary> 

        /// <param name="final"> 

        /// ??? ?????????: 

        ///     true - ???????? 

        ///     false - ??????????????? 

        /// </param> 


        /// <returns>????? ????????? ?? ??????? ??????</returns> 

        public int GetLatestLineNumber(bool final) 

        { 

            // ???? ?????? ?????????? ?????? ??? ???????? 

            if (Lines != null && Lines.Length > 0) 

            { 

                ProtocolText template = GetProtocolTemplate(final); 

                if (template != null) 

                { 

                    foreach (VoteTextLine oVoteLine in template.m_aVoteLines) 

                    { 

                        // ???? ??? ???????? ?????? ????????? 

                        if (oVoteLine.Type == VoteLineType.Line) 

                        { 

                            // ? ??????? ???? ???? ?? ???? ??????  

                            return LatestLineNumber; 

                        } 

                    } 

 

 

                    // ? ??????? ??? ????? 

                    return 0; 

                } 

                else 

                { 

                    // ??? ???????, ????????? ????? ????????? ?????? 

                    return LatestLineNumber; 

                } 

            } 

            else 

            { 

                // ??? ?????, ??????? 0 

                return 0; 

            } 

        } 

 

 

        ///// <summary> 

        ///// ??????? ????????????? ????? ?????????????? ????? ????????? 

        ///// </summary> 

        ///// <returns>true, ???? ??? ?????? ???????</returns> 

        //public bool isEditingComplete() 

        //{ 

        //    foreach(Line line in m_aLines) 

        //    { 

        //        if( !line.isLineEntered && line.m_nType != LineTypes.DontQueryUser ) 

        //        { 

        //            return false; 

        //        } 

        //    } 


 
 

        //    return true; 

        //} 

 

 

        /// <summary> 

        /// ?????????? ????????? ????????????? ??????? 

        /// </summary> 

        /// <returns></returns> 

        public override string ToString() 

        { 

            StringBuilder sText = new StringBuilder(); 

 

 

            sText.Append('['); 

 

 

            // ????????? c????? ????????? 

            sText.Append("m_aLines=["); 

            foreach (Line line in Lines) 

            { 

                sText.Append(line); 

                sText.Append(';'); 

            } 

 

 

            // ????????? c?????????? ?????? ??? ???????? ?? 

            sText.Append("];m_aExtraChecks=["); 

            foreach (Line line in ExtraChecks) 

            { 

                sText.Append(line); 

                sText.Append(';'); 

            } 

 

 

            // ????????? ?????? ????? ? ???????????? ????????????? 

            sText.Append("];m_aChecks=["); 

            foreach (CheckExpression exp in Checks) 

            { 

                sText.Append(exp); 

                sText.Append(';'); 

            } 

            // ????????? ???????????? ????????? 

            sText.Append("];m_sName="); 

            sText.Append(Name); 

 

 

            // ????????? ?????? ??????? ?? ????????? ?????? ???????? 

            sText.Append(";m_ntextValueWidth="); 


            sText.Append(TextValueWidth); 

 

 

            // ????????? ?????? ??????? ? ??????? ?????? 

            sText.Append(";m_nNumberWidth="); 

            sText.Append(NumberWidth); 

 

 

            // ????????? ?????? ??????? ? ?????? ?????? 

            sText.Append(";m_nNameWidth="); 

            sText.Append(NameWidth); 

 

 

            // ????????? ?????? ??????? ?? ????????? ?????? 

            sText.Append(";m_nValueWidth="); 

            sText.Append(ValueWidth); 

 

 

            // ????????? ?????? ??????????? ?????? ?????????? 

            sText.Append(";m_sDisabledString="); 

            sText.Append(DisabledString); 

            sText.Append(';'); 

 

 

            // ????????? ???????? ?????????			 

            if (Texts != null) 

            { 

                sText.Append("m_aTexts=["); 

 

 

                foreach (ProtocolText oText in Texts) 

                { 

                    sText.Append(oText); 

                    sText.Append(';'); 

                } 

 

 

                sText.Append("];"); 

            } 

 

 

 

 

            sText.Append(']'); 

            return sText.ToString(); 

        } 

    } 

}


