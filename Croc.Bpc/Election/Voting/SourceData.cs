using System; 

using System.Collections; 

using System.Text.RegularExpressions; 

using System.Xml; 

using System.Xml.Serialization; 

using System.Text; 

using System.Reflection; 

using System.Runtime.Serialization; 

using System.Collections.Generic; 

using Croc.Bpc.Common; 

using Croc.Core; 

 

 

namespace Croc.Bpc.Election.Voting 

{ 

    /// <summary> 

    /// ???????? ?????? ???????? ??????????? 

    /// </summary> 

    [Serializable, XmlType("SourceData", Namespace = SourceDataLoader.SOURCEDATA_XMLNS)] 

    public class SourceData 

    { 

        #region ????????????? ???? 

        #region xml-???????? 

        /// <summary> 

        /// ?????????? ????????????? ???????? ??????. ??????????????? ??? ????????? ?? 

        /// </summary> 

        [XmlAttribute("id")] 

        public Guid Id; 

        /// <summary> 

        /// ?????? ???????? ??????. ????????????? ??? ????? ????????? ?? ?? ???????? 

        /// </summary> 

        [XmlAttribute("version")] 

        public int Version; 

        /// <summary> 

        /// ???? ??????????? 

        /// </summary> 

        [XmlAttribute("DateTime", DataType = "date")] 

        public DateTime ElectionDate; 

        /// <summary> 

        /// ????????? ????????????? ???????? ???????? ????? 

        /// </summary> 

        [XmlAttribute("localTimeZone")] 

        public string LocalTimeZoneString; 

        /// <summary> 

        /// ????? ??????? 

        /// </summary> 

        [XmlAttribute("Mode")] 

        public ElectionMode ElectionMode; 

        /// <summary> 

        /// C?????? ????? ????? ????????? ???? ? ??????????? ???????? ??? ??????? ?????? 


        /// </summary> 

        [XmlAttribute("FileSuffix")] 

        public string RealModeFileSuffix; 

        /// <summary> 

        /// ??????? ????? ????? ????????? ???? ? ??????????? ???????? ??? ?????????????? ?????? 

        /// </summary> 

        [XmlAttribute("TrainingFileSuffix")] 

        public string TrainingModeFileSuffix; 

        /// <summary> 

        /// ??????? ????????? ?? ? ??? "??????" (? ????????? ?????? ????????? 

        /// ????????????? ??? ???. ??? ?? ??? "??????" ? ???????? ??????????????? 

        /// ??????????) 

        /// </summary> 

        [XmlAttribute("isGasVrn")] 

        public bool IsGasVrn; 

        #endregion 

 

 

        #region xml-???????? 

        /// <summary> 

        /// ??????, ??????? ?????? ? ???????? ?????? 

        /// </summary> 

        [XmlArray("Elections")] 

        public Election[] Elections; 

        /// <summary> 

        /// ??????, ???????? ? ???????? ?????? 

        /// </summary> 

        [XmlArray("Blanks")] 

        public Blank[] Blanks; 

        /// <summary> 

        /// ???, ??? ??????? ????????????? ???????? ?????? 

        /// </summary> 

        [XmlArray("Targets")] 

        public TargetCommittee[] Targets; 

        /// <summary> 

        /// ?????????????????? ????? ????? (???????) ??????????? 

        /// </summary> 

        [XmlArray("Modes")] 

        [XmlArrayItem("Mode")] 

        public VotingMode[] VotingModes = new VotingMode[0]; //?????????????? ?????? ???????? 

        /// <summary> 

        /// ???????? ?????? ????? ????? (???????) ??????????? 

        /// </summary> 

        [XmlArray("ModeTimeTable")] 

        [XmlArrayItem("ModeTime")] 

        public ModeTime[] VotingModeTimes = new ModeTime[0]; //?????????????? ?????? ???????? 

        #endregion 

 

 

        #endregion 


 
 

        /// <summary> 

        /// ????????????? 

        /// </summary> 

        public void Init() 

        { 

            // ????????? ?? 

            Check(); 

 

 

            foreach (var blank in Blanks) 

                blank.SourceData = this; 

        } 

 

 

        /// <summary> 

        /// ??????? ??????? ???? 

        /// </summary> 

        [XmlIgnore] 

        [NonSerialized] 

        private TimeZoneInfo _localTimeZone; 

 

 

        /// <summary> 

        /// ??????? ??????? ???? 

        /// </summary> 

        [XmlIgnore] 

        public TimeZoneInfo LocalTimeZone 

        { 

            get 

            { 

                if (_localTimeZone == null) 

                { 

                    if (string.IsNullOrEmpty(LocalTimeZoneString)) 

                    { 

                        // ??????? ???? ?? ????? ? ?? => ?????????? ???. ???? ??????? 

                        _localTimeZone = TimeZoneInfo.Local; 

                    } 

                    else 

                    { 

                        try 

                        { 

                            var elems = LocalTimeZoneString.Split(';'); 

                            _localTimeZone = TimeZoneInfo.CreateCustomTimeZone( 

                                elems[0], 

                                TimeSpan.FromMinutes(int.Parse(elems[1])), 

                                elems[2], 

                                elems[3], 

                                null, 


                                new TimeZoneInfo.AdjustmentRule[] { }, 

                                true); 

                        } 

                        catch (Exception ex) 

                        { 

                            throw new Exception("??????????? ????? ??????? ???? ? ??", ex); 

                        } 

                    } 

                } 

 

 

                return _localTimeZone; 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ????? ?? ???????? ??????? 

        /// </summary> 

        [XmlIgnore] 

        public DateTime LocalTimeNow 

        { 

            get 

            { 

                var utc = TimeZoneInfo.ConvertTimeToUtc(DateTime.Now); 

                return TimeZoneInfo.ConvertTimeFromUtc(utc, LocalTimeZone); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ?? ??????? ???? ????? ??????? 

        /// </summary> 

        [XmlIgnore] 

        public bool IsElectionDay 

        { 

            get 

            { 

                return ElectionDate.Date == LocalTimeNow.Date; // ???? ??????? ????? ??????? 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ????? ????? (??????????????? ????????) 

        /// </summary> 

        [XmlIgnore] 

        private string NullableFileSuffix 

        { 

            get 


            { 

                return ElectionMode == ElectionMode.Real 

                    ? RealModeFileSuffix 

                    // ???? ?? ?????? ????????????? ???????, ?? ?????? ?????? 

                    : (TrainingModeFileSuffix ?? RealModeFileSuffix); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ?? ?????? ????? "??????" 

        /// </summary> 

        [XmlIgnore] 

        public bool IsReal 

        { 

            get 

            { 

                return 

                    // ???? ?????? "??????" ????? 

                    ElectionMode == ElectionMode.Real ||  

                    // ??? ????? ?? ??????, ?? ???? ??????????? ????? ??????? 

                    (ElectionMode == ElectionMode.None && ElectionDate.Date <= DateTime.Now.Date); 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ????? ?????  

        /// ???????? null ?? ?????? ?????? 

        /// </summary> 

        [XmlIgnore] 

        public string FileSuffix 

        { 

            get 

            { 

                return NullableFileSuffix ?? ""; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????? ? ???????? ??????????? ???????? 

        /// </summary> 

        public string GetParentComitteeStamps() 

        { 

            var stampList = new SortedList(); 

 

 

            foreach (var election in Elections) 

                foreach (var stampCommittee in election.StampCommittees) 


                    // ???? ????? ?????????, ?? ???????? 

                    if (stampCommittee.Num > 0) 

                    { 

                        string number = stampCommittee.Num.ToString("0000"); 

                        if (!stampList.ContainsKey(number)) 

                            stampList.Add(number, null); 

                    } 

 

 

            var sb = new StringBuilder(); 

            for (int i = 0; i < stampList.Count; i++) 

            { 

                sb.Append(stampList.GetKey(i)); 

                sb.Append(", "); 

            } 

 

 

            if (sb.Length > 0) 

                sb.Length -= 2; 

 

 

            return sb.ToString(); 

        } 

 

 

        /// <summary> 

        /// ????? ?????? ????. ??????????? 

        /// </summary> 

        public DateTime MainVotingStartTime 

        { 

            get 

            { 

                var startTime = GetVotingModeStartTime(VotingMode.Main); 

                return new DateTime(startTime.Ticks); 

            } 

        } 

        /// <summary> 

        /// ????? ????????? ????. ??????????? 

        /// </summary> 

        public DateTime MainVotingEndTime 

        { 

            get 

            { 

                var endTime = GetVotingModeStartTime(VotingMode.Portable); 

                return new DateTime(endTime.Ticks); 

            } 

        } 

 

 

        /// <summary> 


        /// ?????? ? ?????????? ??????? 

        /// </summary> 

        [XmlIgnore] 

        public string Modes 

        { 

            get 

            { 

                return GetModeNames(VotingModes); 

            } 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ? ?????????? ??????? 

        /// </summary> 

        /// <param name="modes"></param> 

        /// <returns></returns> 

        public static string GetModeNames(VotingMode[] modes) 

        { 

            var sb = new StringBuilder(); 

            foreach (var mode in modes) 

            { 

                switch (mode) 

                { 

                    case VotingMode.Main: 

                        sb.Append("????????????"); 

                        break; 

                    case VotingMode.Portable: 

                        sb.Append("??????????"); 

                        break; 

                    default: 

                        sb.Append(mode); 

                        break; 

                } 

 

 

                sb.Append(", "); 

            } 

 

 

            if (sb.Length > 0) 

                sb.Length -= 2; 

 

 

            return sb.ToString(); 

        } 

 

 

        /// <summary> 

        ///		?????????? ????????????? ??????, ?? ??????? ??????????? ??????, ????????????? 


        ///		??????? ??????? ? ???????? ????????? 

        /// </summary> 

        /// <param name="sElNum">?????? ???????</param> 

        /// <returns> 

        ///		string - ?????????? ????????????? ??????. ???? ?? ??????? ??????, ?? ?????????? -1 

        /// </returns> 

        public string GetBlankIdByElectionNumber(string sElNum) 

        { 

            string sRes = "-1";	// ????????? 

 

 

            // ???????? ?? ???? ??????? 

            foreach (Blank oCurBlank in Blanks) 

            { 

                // ???????? ?? ???? ??????? 

                foreach (string sEl in oCurBlank.Sections) 

                { 

                    if (0 == sElNum.CompareTo(sEl)) 

                    { 

                        sRes = oCurBlank.Id; 

                        break; 

                    } 

                } 

            } 

            return sRes; 

        } 

 

 

        /// <summary> 

        ///		?????????? ?????? ??????, ?? ??????? ??????????? ??????, ????????????? 

        ///		??????? ??????? ? ???????? ????????? 

        /// </summary> 

        /// <param name="sElNum">??????</param> 

        /// <returns> 

        ///		?????????? ?????? ??????. ???? ?? ??????? ??????, ?? ?????????? -1 

        /// </returns> 

        public int GetBlankMarkerByElectionNumber(string sElNum) 

        { 

            // ???????? ?? ???? ??????? 

            foreach (Blank oCurBlank in Blanks) 

            { 

                // ???????? ?? ???? ??????? 

                foreach (string sEl in oCurBlank.Sections) 

                { 

                    if (0 == sElNum.CompareTo(sEl)) 

                    { 

                        return oCurBlank.Marker; 

                    } 

                } 

            } 


            return -1; 

        } 

 

 

        /// <summary> 

        ///		?????????? ?????? Election ?? ??? ?????????????? (??????? num) 

        /// </summary> 

        /// <param name="sNum">????????????? ???????</param> 

        /// <returns></returns> 

        public Election GetElectionByNum(string sNum) 

        { 

            Election elRes = null;	// ????????? 

 

 

            foreach (Election oCurEl in Elections) 

                if (0 == sNum.CompareTo(oCurEl.ElectionId)) 

                { 

                    elRes = oCurEl; 

                    break; 

                } 

 

 

            return elRes; 

        } 

 

 

        /// <summary> 

        ///		?????????? ????? ???? Blank ?? ?????? 

        /// </summary> 

        /// <param name="nNumber">????? (??????) ??????</param> 

        /// <returns> 

        ///		Blank - ?????????? ???????? ?????? ?? ??? ?????? 

        /// </returns> 

        public Blank GetBlankByNumber(int nNumber) 

        { 

            Blank oRes = null;		// ????????? 

 

 

            foreach (Blank oBlank in Blanks) 

            { 

                if (nNumber == oBlank.Marker) 

                { 

                    oRes = oBlank; 

                    break; 

                } 

            } 

 

 

            return oRes; 

        } 


 
 

        /// <summary> 

        /// ???? ?? ? ?? ?????? ????????? ?/??? ??????????? ??????????? 

        /// </summary> 

        /// <returns>true, ???? ????</returns> 

        public bool HasChecks() 

        { 

            // ?? ???? ??????? ????????? 

            foreach (Election oEl in Elections) 

            { 

                // ???? ?? ??????????? ??????????? 

                if (oEl.Protocol.Checks.Length > 0) 

                { 

                    return true; 

                } 

            } 

 

 

            return false; 

        } 

 

 

        /// <summary> 

        /// ????????? ???? ?? ???? ?? ???? ?? ?????? ?? ?????? ??? "???????" ?????? 

        /// </summary> 

        /// <returns>true, ???? ????</returns> 

        public bool HasElections() 

        { 

            foreach (Election oCurEl in Elections) 

            { 

                if (!oCurEl.Disabled) 

                { 

                    return true; 

                } 

            } 

 

 

            return false; 

        } 

 

 

        /// <summary> 

        ///	????????? ?????? ???. ?????? ????????? ???????? 

        /// </summary> 

        /// <returns> 

        ///	string - ?????????? ?????? ???. 

        /// </returns> 

        public string GetUIKList() 

        { 


            // ?????? ? ???????? ??? 

            StringBuilder sUIKList = new StringBuilder(); 

            foreach (TargetCommittee tcTarget in Targets) 

            { 

                if (0 < sUIKList.Length) sUIKList.Append(", "); 

                sUIKList.Append(" " + tcTarget.Num.ToString("0000")); 

            } 

 

 

            return sUIKList.ToString(); 

        } 

 

 

        private static string GetTargetsName(TargetCommittee[] targets) 

        { 

            StringBuilder sb = new StringBuilder(); 

            foreach (var target in targets) 

            { 

                sb.Append(target.Name); 

                sb.Append(", "); 

            } 

 

 

            if (sb.Length == 0) 

                return ""; 

 

 

            sb.Length -= 2; 

            return sb.ToString(); 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????? ? ???-??? ???????? 

        /// </summary> 

        /// <param name="electionCount"></param> 

        /// <returns></returns> 

        /// <remarks>???? electionCount ????? ?????? 20, ?? ?????? ????? ????????????. 

        /// ?? ?????? ???-?? ???????? ????? ???? ?????? 20</remarks> 

        private static string GetElectionCountName(int electionCount) 

        { 

            if (electionCount == 1) 

                return "1 ????????"; 

 

 

            if (electionCount <= 4) 

                return electionCount.ToString() + " ????????"; 

 

 

            return electionCount.ToString() + " ????????"; 


        } 

 

 

        private static string GetElectionsTypeName(Election[] elections) 

        { 

            bool foundOneMandateType = false; 

            bool foundManyMandateType = false; 

 

 

            foreach (var election in elections) 

            { 

                if (election.MaxMarks == 1) 

                    foundOneMandateType = true; 

 

 

                if (election.MaxMarks > 1) 

                    foundManyMandateType = true; 

            } 

 

 

            if (foundOneMandateType && foundManyMandateType) 

                return "????????????? ? ?????????????? ??????"; 

 

 

            if (foundOneMandateType) 

                return "????????????? ??????"; 

 

 

            if (foundManyMandateType) 

                return "?????????????? ??????"; 

 

 

            return "??????????? ??? ???????"; 

        } 

 

 

        #region ?????? ??????????? 

 

 

        /// <summary> 

        /// ???????? ?????? ????????? ????? ??????? ?? ?????????????????? ?????? 

        /// </summary> 

        /// <returns>?????? ????????? ????? ??????? ?? ?????????????????? ??????</returns> 

        [XmlIgnore] 

        public VotingMode FirstVotingMode 

        { 

            get 

            { 

                return VotingModes[0]; 

            } 


        } 

 

 

        /// <summary> 

        /// ???????? ????????? ????????? ????? ??????? ?? ?????????????????? ?????? 

        /// </summary> 

        /// <param name="mode">??????? ?????</param> 

        /// <returns>????????? ????????? ????? ??????? ?? ?????????????????? ??????</returns> 

        public VotingMode GetNextVotingMode(VotingMode mode) 

        { 

            // ? ?????? ????????? ?????? ????????? ?????? ????? ??????? 

            if (mode == Voting.VotingMode.Test) 

            { 

                return VotingModes[0]; 

            } 

 

 

            // -1 ??????, ??? ?? ??????? ?????? ??????, ??????? ????? ????? ????  

            // "????? ???????" ????? 

            for (int i = 0; i < VotingModes.Length - 1; i++) 

            { 

                if (VotingModes[i] == mode) 

                { 

                    return VotingModes[i + 1]; 

                } 

            } 

 

 

            // ???? ?????? ?? ????? ??? ????? ??? ????????? ? ?????????????????? ???????, 

            // ?? ????????? ????? ???????? ??????????? 

            return Voting.VotingMode.Results; 

        } 

 

 

        /// <summary> 

        /// ???????? ?????????????? ????????? ????? ??????? ?? ?????????????????? ?????? 

        /// </summary> 

        /// <param name="mode">??????? ?????</param> 

        /// <returns>?????????????? ????????? ????? ??????? ?? ?????????????????? ??????</returns> 

        public VotingMode GetPreviousVotingMode(VotingMode mode) 

        { 

            // ? ?????? ?????? ?????????? ?????? ????????? ????????? ????? ??????? 

            if (mode == Voting.VotingMode.Results) 

            { 

                return VotingModes[VotingModes.Length - 1]; 

            } 

 

 

            // >0 ??????, ??? ?? ??????? ?????? ??????, ??????? ????? ????? ????? 

            // "????? ??????" ????? 


            for (int i = VotingModes.Length - 1; i > 0; i--) 

            { 

                if (VotingModes[i] == mode) 

                { 

                    return VotingModes[i - 1]; 

                } 

            } 

 

 

            // ???? ?????? ?? ????? ??? ????? ??? ????????? ? ?????????????????? ???????, 

            // ?? ????????? ???????? ????? 

            return Voting.VotingMode.Test; 

        } 

 

 

        /// <summary> 

        /// ?????????? ?? ????? ????????? ?????? ??????????? 

        /// </summary> 

        /// <param name="mode"></param> 

        /// <returns></returns> 

        public bool IsVotingModeExpired(VotingMode mode) 

        { 

            for (int i = 0; i < VotingModeTimes.Length; ++i) 

            { 

                var mt = VotingModeTimes[i]; 

                if (mt.mode == mode) 

                { 

                    if (++i == VotingModeTimes.Length) 

                        return false; 

 

 

                    mt = VotingModeTimes[i]; 

                } 

                else if (mt.mode < mode) 

                { 

                    continue; 

                } 

 

 

                // ???? ????? ????, ?????? ? mt - ????? ??????, ???. ??????? ?? ???, ??????? ???????? 

 

 

                // ????? ????????? ?????? ???????, ???? ??????? ????? >= ??????? ?????? ?????????? ?????? 

                var now = LocalTimeNow; 

                return mt.hour * 60 + mt.minute <= now.Hour * 60 + now.Minute; 

            } 

 

 

            return false; 

        } 


 
 

        /// <summary> 

        /// ?????? ????? ????????? ??????? 

        /// </summary> 

        /// <param name="mode"></param> 

        /// <returns></returns> 

        public bool IsVotingModeTime(VotingMode mode) 

        { 

            for (int i = 0; i < VotingModeTimes.Length; ++i) 

            { 

                var modeTime = VotingModeTimes[i]; 

                if (modeTime.mode == mode) 

                { 

                    ModeTime nextModeTime; 

 

 

                    // ???? ????????? ????? - ?? ????????? 

                    if (++i < VotingModeTimes.Length) 

                    { 

                        nextModeTime = VotingModeTimes[i]; 

                    } 

                    else 

                    { 

                        // ?????, ??????? ??? ????. ????? ???????? ????? ??????? 

                        nextModeTime = ModeTime.MaxValue; 

                    } 

 

 

                    var now = LocalTimeNow; 

                    var nowTotalMinutes = now.Hour * 60 + now.Minute; 

 

 

                    return modeTime.TotalMinutes <= nowTotalMinutes && nowTotalMinutes < nextModeTime.TotalMinutes; 

                } 

            } 

 

 

            return false; 

        } 

 

 

        /// <summary> 

        /// ????? ?????? (??????? ?? ????? ? ?????, ??? ???????? ???) ????????? ?????? 

        /// </summary> 

        /// <param name="mode"></param> 

        /// <returns></returns> 

        public TimeSpan GetVotingModeStartTime(VotingMode mode) 

        { 

            foreach (var modeTime in VotingModeTimes) 


            { 

                if (modeTime.mode == mode) 

                    return TimeSpan.FromHours(modeTime.hour) + TimeSpan.FromMinutes(modeTime.minute); 

            } 

 

 

            // ?? ????, ???? ?? ?? ?????? ???????, ?.?. ??? ???????? ?? ??????????? ?? ????????, 

            // ?, ???? ????? ??? ?????? ?? ??????, ?? ???????????? ????? ?? ?????????, ???????? ? ?????????? 

 

 

            // ?????????? ??????????? ????? 

            return TimeSpan.MinValue; 

        } 

 

 

        /// <summary> 

        /// ????????? ?? ????????? ????????? ????????? ?????? ? ???????? ?????? ??????????? 

        /// </summary> 

        /// <param name="blank">?????</param> 

        /// <param name="votingMode">????? ???????????</param> 

        public bool IsVotingModeValidForBlank(Blank blank, VotingMode votingMode) 

        { 

            // ? ?????? ???????????? ????? ????????? ????? ?????? 

            if (votingMode == VotingMode.Test) 

                return true; 

 

 

            foreach (string electionNum in blank.Sections) 

            { 

                var election = GetElectionByNum(electionNum); 

                foreach (var mode in election.VotingModes) 

                    if (mode == votingMode) 

                        return true; 

            } 

 

 

            return false; 

        } 

 

 

        /// <summary> 

        /// ??????????????? ?????, ???????????? ??????? ? ????????? ?????????????? ?????? ??????????? 

        /// </summary> 

        /// <param name="eMode">????????????? ?????</param> 

        /// <returns>true - ? ?????? ??????? ? ????????? ?????????????? ??????, false - ? ????????? ??????</returns> 

        public bool VotingModeExists(Voting.VotingMode eMode) 

        { 

            for (int i = 0; i < Elections.Length; i++) 

            { 

                foreach (Voting.VotingMode m in Elections[i].VotingModes) 


                { 

                    if (m == eMode) 

                    { 

                        return true; 

                    } 

                } 

            } 

 

 

            return false; 

        } 

 

 

        #endregion 

 

 

        #region ???????? 

 

 

        /// <summary> 

        /// ???????? ?? ????????????? ???????????? ?? 

        /// </summary> 

        private void Check() 

        { 

            // ??????? ?????????? ??????? ?? ??????? 

            Hashtable oMap = new Hashtable(); 

            // ??????? ?????????? ?????? ??????? ??? ?????? 

            Hashtable electionVotingModes = new Hashtable(); 

 

 

            // ??????? ???????? ??? ?????? ? ??????? 

            foreach (Blank oBlank in Blanks) 

            { 

                // ???????? ?? ??????? ?????? 

                if (oBlank.Sections.Length == 0) 

                    throw new Exception(String.Format("????? {0} ?? ???????? ??????", oBlank.Id)); 

 

 

                // ??????? ??????? 

                electionVotingModes.Clear(); 

                foreach (string sSection in oBlank.Sections) 

                { 

                    Election oElection = GetElectionByNum(sSection); 

 

 

                    if (oElection == null) 

                    { 

                        // ???????? ???????? ?????? 

                        string sDescr = String.Format( 

                            "????? {0} ????????? ?? ?????????????? ?????? {1}", 


                            oBlank.Id, sSection); 

 

 

                        throw new Exception(sDescr); 

                    } 

                    else 

                    { 

                        // ???????? ??? ?????? ??????????? ?????? ?? ????? ?????? 

                        if (oMap.ContainsKey(oElection.ElectionId)) 

                            throw new Exception( 

                                String.Format( 

                                "?????? {0} ????????? ?? ???? ???????: {1}, {2}", 

                                oElection.ElectionId, oBlank.Id, oMap[oElection.ElectionId])); 

                        // ????????? ?????? ??????????? ? ??????? 

                        foreach (var mode in oElection.VotingModes) 

                        { 

                            if (electionVotingModes.Contains(mode)) 

                                electionVotingModes[mode] = (int)electionVotingModes[mode] + 1; 

                            else 

                                electionVotingModes.Add(mode, 1); 

                        } 

                    } 

                } 

 

 

                // ????????, ??? ??? ???? ??????? ?? ????????? ?????????? ?????? 

                foreach (VotingMode mode in electionVotingModes.Keys) 

                { 

                    if ((int)electionVotingModes[mode] != oBlank.Sections.Length) 

                        throw new Exception(String.Format( 

                            "?? ??? ?????? ?? ?????? {0} ???????? ????? {1}" 

                            , oBlank.Id 

                            , mode)); 

                } 

            } 

 

 

            // ???????? ?? ???????????? ????? ???????? ????? 

            if (!CheckSuffix(RealModeFileSuffix)) 

            { 

                throw new Exception("? ???????? ????? ????? \"???????\" ?????? ????????? ?????? ??????? 0-9, a-z, A-Z, \"_\", \"-\""); 

            } 

 

 

            // ???????? ?? ???????????? ????? ???????? ????? 

            if (!CheckSuffix(TrainingModeFileSuffix)) 

            { 

                throw new Exception("? ???????? ????? ????? ?????????????? ?????? ????????? ?????? ??????? 0-9, a-z, A-Z, \"_\", \"-\""); 

            } 

 


 
            if (VotingModes.Length <= 0) 

            { 

                // ???? ?????????????????? ????? ??????? ?? ??????, ?? 

                // ????????????? ?? ? ??????????? ?????????????????? 

                VotingModes = new VotingMode[2]; 

                // ???????????? 

                VotingModes[0] = VotingMode.Main; 

                // ?????????? 

                VotingModes[1] = VotingMode.Portable; 

            } 

 

 

            // ??????? ?? ?????????????????? ??? ????, ??????? ??? ? ?? ? ???????  

            ArrayList m_lModes = new ArrayList(); 

            for (int i = 0; i < VotingModes.Length; i++) 

            { 

                if (VotingModeExists(VotingModes[i])) 

                { 

                    if (!m_lModes.Contains(VotingModes[i])) 

                    { 

                        m_lModes.Add(VotingModes[i]); 

                    } 

                } 

            } 

 

 

            // ????????? ?????????????????? ??????? 

            VotingModes = new VotingMode[m_lModes.Count]; 

            int j = 0; 

            foreach (VotingMode mode in m_lModes) 

            { 

                VotingModes[j++] = mode; 

            } 

 

 

            // ???? ?????????????????? ????????? ??????, ?????? ? ??? 

            // ?????-?? ???????????? ? ?? ? ?? ???????, ??? ?? ?? ????? 

            if (VotingModes.Length <= 0) 

            { 

                throw new Exception("?? ??????? ???????????? ?????? ????????? ??????? ??????? ?? ???????? ??????"); 

            } 

 

 

            // ???????? ?? ?????? ???????? ???????? ??????? 

            for (VotingMode vm = VotingMode.Main; vm <= VotingMode.Portable; vm++) 

            { 

                if (VotingModeExists(vm) && !m_lModes.Contains(vm)) 

                { 

                    throw new Exception("? ???????? ?????? ?????? ???????? ?????????????????? ????? ???????"); 


                } 

            } 

 

 

            var electionManager = CoreApplication.Instance.GetSubsystem<IElectionManager>(); 

 

 

            // ??????????????? ??????? ?????? ???????, ???????? ? ?? 

            // ? ?????? ???????????? ?????????????????? ??????? 

            ArrayList m_lModeTimes = new ArrayList(); 

            foreach (VotingMode mode in VotingModes) 

            { 

                // ????? ??? ????? ?????? ??????? ? ?? 

                bool timeFound = false; 

 

 

                // ????? ?????? ????????????? ????? ?????? ?????? 

                foreach (ModeTime mt in VotingModeTimes) 

                { 

                    if (mt.mode == mode) 

                    { 

                        // ????????? ??? 

                        m_lModeTimes.Add(mt); 

                        timeFound = true; 

                        break; 

                    } 

                } 

 

 

                // ???? ????? ?????? ?????? ?? ??????? 

                if (!timeFound) 

                { 

                    // ????????? ??? ????? ?????? ????? ?? ????????? 

                    var time = electionManager.GetDefaultVotingModeTime(mode); 

                    var mt = new ModeTime() 

                    { 

                        mode = mode, 

                        hour = time.Hours, 

                        minute = time.Minutes 

                    }; 

                    m_lModeTimes.Add(mt); 

                } 

            } 

 

 

            // ????????? ? ???????? ?????? 

            VotingModeTimes = new ModeTime[m_lModeTimes.Count]; 

            for (int i = 0; i < m_lModeTimes.Count; i++) 

            { 

                VotingModeTimes[i] = (ModeTime)m_lModeTimes[i]; 


            } 

 

 

            // ????????? ???????? ??????? ????? ??????? ?? ????????????  

            // ?????????????????? ????? ??????? 

            if (VotingModeTimes.Length > 1) 

            { 

                // ???? ?????? ????? ?????? ??????? 

                // ??????? ????????????? ? ????? ? ??????????????????? ??????? 

                for (int i = 1; i < VotingModeTimes.Length; i++) 

                { 

                    // ???? ????? ?????? ??????????? ?????? ?????? 

                    if (VotingModeTimes[i - 1].hour > VotingModeTimes[i].hour) 

                    { 

                        //throw new Exception("????? ?????? ?????? " + Scanner.Voting.GetModeNameLC(m_aModeTimes[i].mode) + " ?? ????? ???? ??????, ??? ?????

?????? ?????? " + Scanner.Voting.GetModeNameLC(m_aModeTimes[i - 1].mode)); 

                        throw new Exception("????? ?????? ?????? ?? ????? ???? ??????, ??? ????? ?????? ?????? "); 

 

 

                    } 

                    if (VotingModeTimes[i - 1].hour == VotingModeTimes[i].hour) 

                    { 

                        // ?????????????? ???????? ????? ? ?????? ?????????? ???? 

                        if (VotingModeTimes[i - 1].minute > VotingModeTimes[i].minute) 

                        { 

                            //throw new Exception("????? ?????? ?????? " + Scanner.Voting.GetModeNameLC(m_aModeTimes[i].mode) + " ?? ????? ???? ??????, ??? ?????

?????? ?????? " + Scanner.Voting.GetModeNameLC(m_aModeTimes[i - 1].mode)); 

                            throw new Exception("????? ?????? ?????? ?? ????? ???? ??????, ??? ????? ?????? ?????? "); 

                        } 

 

 

                    } 

                } 

            } 

 

 

            // ???????? ???????????? ??????? ??????????? ?????????? ? ????? ????????? 

            // ? ???????? ?????? 

            ?heckProtocol(); 

        } 

 

 

        /// <summary> 

        /// ???????? ???????????? ????????  

        /// </summary> 

        /// <param name="sSuffix">??????? ????? ?????</param> 

        /// <returns>true, ???? ??????????</returns> 

        private bool CheckSuffix(string sSuffix) 

        { 

            Regex oRegex = new Regex(@"\A(\w|-)*\z"); 


 
 

            return (sSuffix == null) || oRegex.IsMatch(sSuffix); 

        } 

 

 

        /// <summary> 

        /// ???????? ??????? ????????? ? ???????? ?????? 

        /// </summary> 

        private void ?heckProtocol() 

        { 

            // ?????????? ??? ?????? 

            foreach (Election oElection in Elections) 

            { 

                if (oElection.Protocol.Texts == null) 

                    continue; 

 

 

                // ?????????? ????????? ????????? ????????? Text 

                int nCountFinal = 0; 

                // ?????????? ????????? ??????????????? ????????? Text 

                int nCountUnfinal = 0; 

 

 

				// ???? ??????????? ?????? 

				bool bError = false; 

 

 

				// ????? ?????? ???????? ?????? 

				StringBuilder sErrText = new StringBuilder(); 

				sErrText.Append("? ???????? ?????? ??? ??????? \"" + oElection.Name + "\" ???? ?????????? ??????:\r\n"); 

 

 

				// ??? ??????? ????? ????????? 

				Hashtable htLines = new Hashtable(); 

				// ???-???????  

				Hashtable htDupplicateLines = new Hashtable(); 

				// ??? ??????? ?????????? 

				Hashtable htCandidates = new Hashtable(); 

				// ???-??????? ????????????? ?????????? 

				Hashtable htDupplicateCand = new Hashtable(); 

				// ?????????? ????? ????????? 

				int nLineCount = oElection.Protocol.Lines.Length; 

 

 

				// ?????????? ???? ??????????, ??????????? ? ??????? 

				foreach (Candidate oCand in oElection.Candidates) 

				{ 

					try 

					{ 


						if (!htCandidates.ContainsKey(oCand.Id)) 

							htCandidates.Add(oCand.Id, oCand); 

						else 

							htDupplicateCand.Add(oCand.Id, oCand); 

					} 

					catch 

					{ 

						continue; 

					} 

				} 

 

 

				// ?????????? ?????? ????????? 

				foreach (Line oLine in oElection.Protocol.Lines) 

				{ 

					try 

					{ 

						// ???? ?????????????? ????? ?????? ?? ????? ?? ? ?? ? 

						if (!CheckLineAdditionalNumber(oLine)) 

						{ 

							sErrText.Append(String.Format( 

									"?????? {0} ???????? ???????? ?????????????? ????? {1}\r\n", 

									oLine.Id, 

									oLine.AdditionalNum)); 

							bError = true; 

						} 

 

 

						if (!htLines.ContainsKey(oLine.Id)) 

							htLines.Add(oLine.Id, oLine); 

						else 

							htDupplicateLines.Add(oLine.Id, oLine); 

					} 

					catch 

					{ 

						continue; 

					} 

				} 

 

 

				// ?????????? ??? ??????? ? ?????????? ????? ????????? 

                foreach (ProtocolText oText in oElection.Protocol.Texts) 

                { 

                    // ???? ? ?????? ????? ??????? Final - ??????????? ??????? 

                    if (oText.Final) 

                        nCountFinal++; 

                    else 

                        nCountUnfinal++; 

 

 


                    // ???-??????? ????????, ??????????? ??????????? ?????????? 

                    Hashtable htCandidatesView = new Hashtable(); 

                    // ???-??????? ????????, ??????????? ??????????? ????? ????????? 

                    Hashtable htLinesView = new Hashtable(); 

                    // ???-??????? ????????????? ??????????????? ?????????? 

                    Hashtable htDupplicateCandView = new Hashtable(); 

                    // ???-??????? ????????????? ??????????????? ????? 

                    Hashtable htDupplicateLinesView = new Hashtable(); 

                    // ???-??????? ? ????????????? ???????? ?????  

                    Hashtable htBadNumbers = new Hashtable(); 

 

 

					// ?????? ??????, ???????? ?????? ?????? 

                    foreach (VoteTextLine oLine in oText.m_aVoteLines) 

                    { 

                        try 

                        { 

                            // ???? ??? ?????? ??????????? ??????????? ????????? 

                            if (oLine.Type == VoteLineType.Vote) 

                            { 

                                // ???? ???????? ?????????? ??? ?? ??????????? -  

                                // ????????? ??? ? ???-??????? ???????? 

                                if (!htCandidatesView.ContainsKey(oLine.ID)) 

                                { 

                                    htCandidatesView.Add(oLine.ID, oLine); 

                                } 

                                // ????? - ????????? ? ???-??????? ????????????? ???????? 

                                else 

                                { 

                                    htDupplicateCandView.Add(oLine.ID, oLine); 

                                } 

                            } 

                            // ???? ??? ?????? ??????????? ?????? ????????? 

                            else 

                            { 

                                // ????????? ???????????? ?????????????? ?????? ????????? ? ???????? ?????? 

                                // ???????? ?????????????? ????????????? ?????? ????????? ? ????? 

                                try 

                                { 

                                    int nLineNum = Convert.ToInt32(oLine.ID); 

                                } 

                                catch 

                                { 

                                    // ????????? ?????? ? ?????? ???????????? ??????? ????? 

                                    htBadNumbers.Add(oLine.ID, oLine); 

                                    continue; 

                                } 

 

 

                                // ???? ???????? ????? ??? ?? ??????????? -  


                                // ????????? ??? ? ???-??????? ???????? 

                                if (!htLinesView.ContainsKey(oLine.ID)) 

                                { 

                                    htLinesView.Add(oLine.ID, oLine); 

                                } 

                                // ????? - ????????? ? ???-??????? ????????????? ???????? 

                                else 

                                { 

                                    htDupplicateLinesView.Add(oLine.ID, oLine); 

                                } 

                            } 

                        } 

                        catch 

                        { 

                            continue; 

                        } 

                    } 

 

 

                    // ???? ???? ??????? ????? ?????? ???????? Table ? ????????? final 

                    if (nCountFinal > 1) 

                    { 

                        sErrText.Append("??????? ????? ?????? ???????? Text ? ????????????? ????????? Final\r\n"); 

                        bError = true; 

                    } 

 

 

                    // ???? ???? ??????? ????? ?????? ???????? Table ? ????????? final 

                    if (nCountUnfinal > 1) 

                    { 

                        sErrText.Append("??????? ????? ?????? ???????? Text ?? ?????????? ????????? Final\r\n"); 

                        bError = true; 

                    } 

 

 

                    // ???? ? ???????? ?????? ???????????? ??????? ???????? ??????????? ????? 

                    // ??? ????? ? ????????? 

                    if (htLinesView.Count > nLineCount) 

                    { 

                        sErrText.Append(string.Format("?????????? ???????? ??????????? ????? {0} ?????? ??? ?????????? ????? ? ????????? {1} \r\n",

htLinesView.Count, nLineCount)); 

                        bError = true; 

                    } 

 

 

                    // ???? ???? ??????? ???????????? ?????? ????? 

                    if (htBadNumbers.Count > 0) 

                    { 

                        sErrText.Append("???????????? ?????????????? ????? ?????????:\r\n"); 

                        foreach (string oID in htBadNumbers.Keys) 


                        { 

                            sErrText.Append(oID + "\r\n"); 

                        } 

                        bError = true; 

                    } 

 

 

                    // ????????? ??? ?? ? ??? ?????? ???????? ?????????? 

                    // ?????????? ??? ???????? ??????????? ?????????? 

                    foreach (string sID in htCandidatesView.Keys) 

                    { 

                        // ???? ???? ?????? ??????????? (?.?. ??? ???? ??? ?????????) 

                        if (!htCandidates.ContainsKey(sID)) 

                        { 

                            sErrText.Append("?? ????????? ???????? ? ???????????????: " + sID + "\r\n"); 

                            bError = true; 

                        } 

                    } 

 

 

                    // ????????? ??? ?? ? ??? ?????? ???????? ????? ????????? 

                    // ?????????? ??? ???????? ??????????? ????? ????????? 

                    foreach (string sID in htLinesView.Keys) 

                    { 

                        // ???? ???? ?????? ??????????? (?.?. ??? ???? ??? ?????????) 

                        if (!htLines.ContainsKey(sID)) 

                        { 

                            sErrText.Append("?? ?????????? ?????? ????????? ? ???????????????: " + sID + "\r\n"); 

                            bError = true; 

                        } 

                    } 

 

 

                    // ???? ???? ?????????? ????????????? ???????? ??????????? ?????????? 

                    if (htDupplicateCandView.Count > 0) 

                    { 

                        sErrText.Append("?????????? ????????????? ?????????????? ???????? ??????????? ??????????:\r\n"); 

                        foreach (string oID in htDupplicateCandView.Keys) 

                        { 

                            sErrText.Append(oID + "\r\n"); 

                        } 

                        bError = true; 

                    } 

 

 

                    // ???? ???? ?????????? ????????????? ???????? ??????????? ????? ????????? 

                    if (htDupplicateLinesView.Count > 0) 

                    { 

                        sErrText.Append("?????????? ????????????? ?????????????? ???????? ??????????? ????? ?????????:\r\n"); 

                        foreach (string oID in htDupplicateLinesView.Keys) 


                        { 

                            sErrText.Append(oID + "\r\n"); 

                        } 

                        bError = true; 

                    } 

                } 

 

 

				// ???? ???? ?????????? ????????????? ????????? 

				if (htDupplicateCand.Count > 0) 

				{ 

					sErrText.Append("?????????? ????????????? ?????????????? ??????????:\r\n"); 

					foreach (string oID in htDupplicateCand.Keys) 

					{ 

						sErrText.Append(oID + "\r\n"); 

					} 

					bError = true; 

				} 

 

 

				// ???? ???? ?????????? ????????????? ?????? ????????? 

				if (htDupplicateLines.Count > 0) 

				{ 

					sErrText.Append("?????????? ????????????? ?????????????? ????? ?????????:\r\n"); 

					foreach (string oID in htDupplicateLines.Keys) 

					{ 

						sErrText.Append(oID + "\r\n"); 

					} 

					bError = true; 

				} 

 

 

				// ???? ???? ?????????? ?????? - ?????? ?????????? 

				if (bError) 

				{ 

					throw new Exception(sErrText.ToString()); 

				} 

            } 

        } 

 

 

		/// <summary> 

		/// ????????, ??? ?????????????? ????? ?????? ??? ????? ?? ? ?? ? 

		/// </summary> 

		/// <returns>true - ?????? ??????????, false - ?????? ?? ??????????</returns> 

		private bool CheckLineAdditionalNumber(Line line) 

		{ 

			// ???? ??? ?????? ???, ?? ??? ?? 

			if (String.IsNullOrEmpty(line.AdditionalNum)) 

				return true; 


 
 

			// ???????? ? ??????? ???????? 

			line.AdditionalNum = line.AdditionalNum.ToLower().Trim(); 

 

 

			// ???? ? ???. ?????? ????? 1 ???????, ?? ?? ???????????  

			if (line.AdditionalNum.ToCharArray().Length > 1) 

				return false; 

 

 

			char addNum = line.AdditionalNum.ToCharArray()[0]; 

 

 

			// ???? ????? ?? ????? ? ? ? 

			if (addNum > '?' || addNum < '?') 

			{ 

				// ?????????? ????????? ?????? ????? 

				var replacementChar = FindBadAdditionalNumberReplacement(addNum); 

				if (replacementChar != null) 

				{ 

					line.AdditionalNum = replacementChar.ToString(); 

					return true; 

				} 

				else 

					return false; 

 

 

			} 

 

 

			return true; 

		} 

 

 

		/// <summary> 

		/// ???????? ????????? ?????????????? ????? ??????: 

		///		???????? ????? ?????? ???????????? ???????? ?????.  

		/// </summary> 

		/// <param name="addNum">???. ????? ??????</param> 

		/// <returns>null, ???? ????? ?????? ?? ???????, ?????????? ?????, ???? ???????????? ????</returns> 

		private char? FindBadAdditionalNumberReplacement(char addNum) 

		{ 

			// ???????? ???????, ???? ?? ?????? 

			if (_letterReplacementDict == null) 

				FillLetterComparerDict(); 

 

 

			// ????????, ???? ?? ? ??????? ???????????? 

			if (_letterReplacementDict.ContainsKey(addNum)) 


				return _letterReplacementDict[addNum]; 

 

 

			return null; 

		} 

 

 

		/// <summary> 

		/// ??????? ?????????? ???????????? ????????? ? ??????? ???? 

		/// </summary> 

		private Dictionary<char, char> _letterReplacementDict = null; 

 

 

		/// <summary> 

		/// ????????? ??????? ???????????? ????, ??????? ????? ???????? ?? ????? ?? ? ?? ? 

		/// </summary> 

		private void FillLetterComparerDict() 

		{ 

			_letterReplacementDict = new Dictionary<char, char>(); 

 

 

			// ????????? ?? ??????? 

			_letterReplacementDict.Add('a', '?'); 

			_letterReplacementDict.Add('p', '?'); 

			_letterReplacementDict.Add('c', '?'); 

			_letterReplacementDict.Add('b', '?'); 

			_letterReplacementDict.Add('y', '?'); 

			_letterReplacementDict.Add('h', '?'); 

			_letterReplacementDict.Add('k', '?'); 

			_letterReplacementDict.Add('x', '?'); 

		} 

 

 

		#region ???????????? ?????? ??? ?????????? ????? ????????? 

 

 

		/// <summary> 

		/// ?????? ? ???????? ??? ?????????? ?? ? ????????? ????? ????????? 

		/// </summary> 

		[XmlIgnore] 

		[NonSerialized] 

		private Assembly _protocolLinesAssembly = null; 

 

 

        /// <summary> 

        /// ??????????? ?????? ??? ?????????? ?? ? ????????? ????? ????????? 

        /// </summary> 

		private Assembly CompileAutoLinesAndChecksAssembly() 

        { 

            // ?????????? ??????????? ???????????? ?????? 


			const string ASSEMBLY_TEXT = @"using Croc.Bpc.Election;  

				using Croc.Core; 

				using Croc.Bpc.Election.Voting;  

				namespace Croc.Bpc.DynamicTypes { "; 

 

 

            const string ASSEMBLY_TEXT_END = @"};"; 

			// ???????????? ?????? 

			Assembly oAssembly = null; 

            StringBuilder oAssemblyText = new StringBuilder(ASSEMBLY_TEXT); 

			// ????? ?????????? ?????? ??? ???????? 

			string sClassText;  

 

 

			oAssemblyText.Append(GetManagersClassForAssembly()); 

            // ????????? ?? ???? ??????? 

            foreach (Election oElection in Elections) 

            { 

                // ???????? ??????? ??? ?????????? ? ?????? ????... 

                foreach (Line oLine in oElection.Protocol.Lines) 

                { 

                    sClassText = oLine.BuildCheckTypeText(this); 

                    if (sClassText != null) 

                        oAssemblyText.Append(sClassText); 

                } 

 

 

                // ?????????? ?????? ??????????? ??????????? 

                foreach (CheckExpression oCheck in oElection.Protocol.Checks) 

                { 

                    sClassText = oCheck.BuildCheckTypeText(oElection.Protocol); 

                    if (sClassText != null) 

                        oAssemblyText.Append(sClassText); 

                } 

 

 

            } 

 

 

            //?????? ??? ????? ??????????????: 

            oAssemblyText.Append(ASSEMBLY_TEXT_END); 

 

 

            // ?????????? ????????? 

			oAssembly = DynamicAssemblyHelper.Compile( 

				DynamicAssemblyHelper.SplitStringByLength(oAssemblyText.ToString()) 

				, new string[2] { "Croc.Core", "Croc.Bpc.Election" }); 

 

 

            return oAssembly; 


        } 

 

 

		/// <summary> 

		/// ????????? ?????? ??? ?????????? ????? ????????? ? ???????? ?? 

		/// </summary> 

		public void BindAutoLinesAndChecksCountMethods() 

		{ 

			if (_protocolLinesAssembly == null) 

				_protocolLinesAssembly = CompileAutoLinesAndChecksAssembly(); 

 

 

			// ??? ??? ?? ???? ???????: ???????? ?? ? ??????? ? ??: 

			// ????????? ?? ???? ??????? 

			foreach (Election oElection in Elections) 

			{ 

                BindAutoLinesAndChecksCountMethods(oElection); 

			} 

		} 

 

 

        /// <summary> 

        /// ????????? ?????? ??? ?????????? ????? ????????? ? ???????? ?? 

        /// </summary> 

        /// <param name="oElection">??????</param> 

        public void BindAutoLinesAndChecksCountMethods(Election oElection) 

        { 

            if (_protocolLinesAssembly == null) 

                _protocolLinesAssembly = CompileAutoLinesAndChecksAssembly(); 

 

 

            // ??? ??? ?? ???? ???????: ???????? ?? ? ??????? ? ??: 

            // ????????? ?????? ?? ????? ?????? 

            foreach (Line oLine in oElection.Protocol.Lines) 

                oLine.BindMethod(_protocolLinesAssembly); 

            foreach (CheckExpression oCheck in oElection.Protocol.Checks) 

                oCheck.BindMethod(_protocolLinesAssembly); 

        } 

 

 

        /// <summary> 

		/// ????? ??? ??????? ? ????????? ???????, ??????? ????? ? ???????????? ?????? 

		/// </summary> 

		/// <remarks>FIX: ????????????? ? ???? ?????? ???????? ??-?? ????, ??? ? ???????????? ??????, 

		/// ??????????? ??? ???????? ???????? ????? ? ??????????? ???????????  

		/// ????? ??????? ElectionManager. 

		private string GetManagersClassForAssembly() 

		{ 

			return @"internal static class Managers 

			{ 


				private static IElectionManager _electionManager; 

				/// <summary> 

				/// ???????? ??????? 

				/// </summary> 

				public static IElectionManager ElectionManager 

				{ 

					get 

					{ 

						if (_electionManager == null) 

							_electionManager = CoreApplication.Instance.GetSubsystemOrThrow<IElectionManager>(); 

 

 

						return _electionManager; 

					} 

				} 

			}"; 

		} 

 

 

		#endregion 

 

 

		/// <summary> 

        /// ????????? ??????????? ??????????? 

        /// </summary> 

        public void ExecuteChecks() 

        { 

            foreach (var election in Elections) 

                election.AllChecksDone(); 

        } 

 

 

        #endregion 

 

 

        /// <summary> 

        /// ????????? ???????? 

        /// </summary> 

        /// <param name="obj"></param> 

        /// <returns></returns> 

        public override bool Equals(object obj) 

        { 

            var otherSD = obj as SourceData; 

            return otherSD != null && this.Id.Equals(otherSD.Id); 

        } 

 

 

        /// <summary> 

        /// ????????? ???-???? 

        /// </summary> 


        /// <returns></returns> 

        public override int GetHashCode() 

        { 

            return Id.GetHashCode(); 

        } 

 

 

        /// <summary> 

        /// ????????? ????????? ????????????? ?? ??????? 

        /// </summary> 

        /// <returns></returns> 

        public override string ToString() 

        { 

            StringBuilder sText = new StringBuilder(); 

 

 

            // ????????? ?????? 

            sText.Append("["); 

            // ????????? ?????? ???????? ?????? 

            sText.Append("version=" + Version.ToString() + ";"); 

            // ????????? ????????????? ???????? ?????? 

            sText.Append("uniqueID=" + Id.ToString() + ";"); 

            // Elections 

 

 

            // ????????? ?????? ??????? 

            sText.Append("m_aBlanks=["); 

            foreach (Blank oBlank in Blanks) 

            { 

                sText.Append(oBlank); 

            } 

            sText.Append("];"); 

            // ????????? ???, ??? ??????? ????????????? ???????? ?????? 

            sText.Append("m_aTargets=["); 

            foreach (TargetCommittee oTarget in Targets) 

            { 

                sText.Append(oTarget); 

            } 

            sText.Append("];"); 

            // ????????? ???? ??????????? 

            sText.Append("m_dtDateTime=" + ElectionDate.ToString() + ";"); 

            // ????????? ????? ??????????? 

            sText.Append("m_Mode=" + ElectionMode.ToString() + ";"); 

            // ????????? ??????? ????? ? ???????????? ?????? 

            sText.Append("m_sTrainingFileSuffix=" + TrainingModeFileSuffix + ";"); 

            // ????????? ??????? ????? 

            sText.Append("m_sFileSuffix=" + RealModeFileSuffix + ";"); 

 

 

            // ????????? ?????? ??????? ??????????? 


            sText.Append("m_aModes=["); 

            foreach (VotingMode mode in VotingModes) 

            { 

                sText.Append(mode.ToString() + ";"); 

            } 

            sText.Append("];"); 

 

 

            // ????????? ?????? ????? ??????? ??????????? 

            sText.Append("m_aModeTimes=["); 

            foreach (ModeTime mt in VotingModeTimes) 

            { 

                sText.Append(mt + ";"); 

            } 

            sText.Append("];"); 

 

 

            // ????????? ?????? 

            sText.Append("]"); 

            return sText.ToString(); 

        } 

    } 

}


