using System; 

using System.Collections; 

using System.Reflection; 

using System.Text; 

using System.Text.RegularExpressions; 

using System.Xml.Serialization; 

using Croc.Bpc.Common; 

 

 

namespace Croc.Bpc.Election.Voting 

{ 

    /// <summary> 

    /// ???? ????? 

    /// </summary> 

    public enum LineTypes 

    { 

        /// <summary> 

        /// ?? ??????????? ???????????? 

        /// </summary> 

        [PresentationForReport("?? ??????????? ????????????")] 

        DontQueryUser = 0, 

        /// <summary> 

        /// ??? ??????????? 

        /// </summary> 

        [PresentationForReport("??? ???????????")] 

        Voting = 1, 

        /// <summary> 

        /// ??? ?????? 

        /// </summary> 

        [PresentationForReport("??? ??????")] 

        Blank = 2, 

        /// <summary> 

        /// ??? ??????? 

        /// </summary> 

        [PresentationForReport("??? ???????")] 

        Election = 3 

    } 

 

 

    /// <summary> 

    /// ?????? ????????? 

    /// </summary> 

    [Serializable, XmlType("Line")] 

    public class Line 

    { 

        /// <summary> 

        /// ??????? ?????????? ???????? ?????? 

        /// </summary> 

        [XmlAttribute("expression")] 

        public string Expression; 


 
 

        /// <summary> 

        /// ???????? ?????? 

        /// </summary> 

        [XmlAttribute("name")] 

        public string Name; 

 

 

        /// <summary> 

        /// ????? ?????? 

        /// </summary> 

        [XmlAttribute("num")] 

        public int Num; 

 

 

        /// <summary> 

        /// ????????????? ?????? 

        /// </summary> 

        [XmlAttribute("ID")] 

        public string Id; 

 

 

        /// <summary> 

        /// ?????????????? ????? - ????? ? ?.?. 

        /// </summary> 

        [XmlAttribute("additionalNum")] 

        public string AdditionalNum = String.Empty; 

 

 

        /// <summary> 

        /// ??? ?????? 

        /// </summary> 

        [XmlAttribute("type")] 

        public LineTypes Type; 

 

 

        /// <summary> 

        /// ?????? ?? ???????? ?????? ??????????? ????????????? 

        /// </summary> 

        [XmlIgnore] 

        public bool IsAutoCalculated 

        { 

            get 

            { 

                return Type == LineTypes.DontQueryUser; 

            } 

        } 

 

 


        /// <summary> 

        /// ?????? ????? ??????, ??????? ????????? ????? 

        /// </summary> 

        [XmlIgnore] 

        public string FullKey 

        { 

            get 

            { 

                return Num.ToString() + AdditionalNum; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????, ??????????? ???????? ?????? 

        /// </summary> 

        [NonSerialized] 

        private MethodInfo _method = null; 

 

 

        /// <summary> 

        /// ????????? ????? ? ?????-???????? ???????????, ????? 

        /// ??? ????? ???? ?? ???????????? ? ?????????????? 

        /// </summary> 

        [XmlIgnore] 

        protected string Identifier 

        { 

            get 

            { 

                // ????? ???????? ????????? 

                StringBuilder sResult = new StringBuilder(Num.ToString()); 

 

 

                for (int i = 0; i < AdditionalNum.Length; i++) 

                { 

                    sResult.Append("_"); 

                    sResult.Append(Convert.ToInt32(AdditionalNum[i]).ToString()); 

                } 

 

 

                return sResult.ToString(); 

            } 

		} 

 

 

		#region ?????? ??? ????????????? ???????????? ??????, ??????????? ???????? ????? 

 

 

		/// <summary> 

		/// ????????? ????????? ?????? ??? ????????? ?????? 


		/// </summary> 

		/// <param name="oSD">?????? ?? ???????? ??????</param> 

		/// <returns>????? ??????, ??? null, ???? ?? ?????????</returns> 

		public string BuildCheckTypeText(SourceData oSD) 

		{ 

			// ?????????? ??????????? ???????????? ?????? 

			const string ASSEMBLY_TEXT 

				= @"public class LineExpression_SUFFIX{FUNCTIONS static public int check(){return EXPRESSION;}} "; 

 

 

			// ?????? ?? ?????????? ?????????? ?????????? ??? ??????? 

			const string REGEX_VALUE_REFERENCES 

				= @"(\{@?\w*=((\d+)|(\w*))(,\w*=((\d+)|(\w*)))*\})|(\[(M|S|P|(\w+\.\w+))\])"; 

 

 

			// ?? ?????????? ?????? ??????? ????? 

			if (Type != LineTypes.DontQueryUser) return null; 

 

 

			try 

			{ 

				// ?????? ??? ?????? ? ?????????? ?????????? 

				Regex oRegExpression; 

				// ???????? ?????????? ? ????????? 

				MatchCollection oMatches; 

				// ???????? ????? ?? ???????. 

				string sFullKey; 

				//?????????, ? ???????????? ????????????? 

				StringBuilder sPreparedExpression = new StringBuilder(ASSEMBLY_TEXT); 

 

 

				// ????? ?? ??????? _SUFFIX ?? ?????? ???????: 

				sPreparedExpression.Replace( 

					"_SUFFIX", 

					String.Format("_{0}_{1}_{2}", Num, AdditionalNum, _template.ElectionLink.ElectionId)); 

 

 

				// ???????????. 

				sPreparedExpression.Replace("EXPRESSION", Expression); 

 

 

				// ?????? ???? ? ???????? ????????? ??? ?????? ???? [xxyy] 

				// ???????? ?? ??????????????? ?? ???????? ?????. 

				oRegExpression = new Regex(REGEX_VALUE_REFERENCES); 

 

 

				// ??????? ?????? ?????????? 

				oMatches = oRegExpression.Matches(Expression); 

 

 


				StringBuilder sFunctions = new StringBuilder(String.Empty); 

 

 

				// ?? ???? ?????????? ????????? 

				int iNum = 0; 

				foreach (Match oMatch in oMatches) 

				{ 

					sFullKey = oMatch.Value; 

					// ?? ?????? 

					var blankId = oSD.GetBlankIdByElectionNumber(_template.ElectionLink.ElectionId); 

 

 

					sFunctions.Append(?ompileSimpleExpression(blankId, sFullKey, ++iNum)); 

 

 

					// ???????? ?????????: 

					// ??????? ???????? - ????????????, ??? ????????? ???????????? ????????? ?? ?????? 

					sPreparedExpression.Replace(sFullKey, " " + "Expression" + iNum.ToString() + "()" + " " + "\n"); 

				} 

 

 

				// ???????? ??????? 

				sPreparedExpression.Replace("FUNCTIONS", sFunctions.ToString()); 

 

 

				return sPreparedExpression.ToString(); 

			} 

			catch (Exception ex) 

			{ 

				throw new Exception( 

					String.Format( 

						"?????? ?????? ? ????????? ? {0}{1} \"{2}\". ?????? ? {3}:\n{4}" 

						, Num 

						, AdditionalNum 

						, Expression 

						, _template.ElectionLink.ElectionId 

						, ex.Message) 

					, ex); 

			} 

		} 

 

 

		/// <summary> 

		/// ???????? ?????? ? ??????????????? ?? ???? 

		/// </summary> 

		/// <param name="oAssembly">?????? ?? ?????? ? ????? ????? ?????</param> 

		public void BindMethod(Assembly oAssembly) 

		{ 

			// ?????, ??????????? ????????? ?????? 

			const string CHECK_METHOD = "check"; 


			// ???????????? ????????????? ???? ??? ???????? ????????? 

			const string CHECKER_TYPE_NAME = "Croc.Bpc.DynamicTypes.LineExpression"; 

 

 

			// ?? ?????????? ?????? ??????? ????? 

			if (Type != LineTypes.DontQueryUser) return; 

			try 

			{ 

				// ??? ???????????? ?????? 

				string sCheckTypeName; 

				// ??????????? ?????? 

				System.Type oCheckerType; 

 

 

				// ?????????? ?????????? ??? ?????? [name_<????? ??????>_<???.????? ??????>_<????? ???????>]: 

				sCheckTypeName = String.Format( 

					"{0}_{1}_{2}_{3}", 

					CHECKER_TYPE_NAME 

					, Num 

					, AdditionalNum 

					, _template.ElectionLink.ElectionId); 

 

 

				// ??????? ???: 

				oCheckerType = oAssembly.GetType(sCheckTypeName, true, false); 

 

 

				// ??????? ?????: 

				_method = oCheckerType.GetMethod(CHECK_METHOD); 

			} 

			catch (Exception ex) 

			{ 

				throw new Exception( 

					String.Format( 

						"?????? ?????????? ??? ????????? ? {0}{1} \"{2}\". ?????? ? {3}:\n{4}" 

						, Num 

						, AdditionalNum 

						, Expression 

						, _template.ElectionLink.ElectionId 

						, ex.Message) 

					, ex); 

			} 

		} 

 

 

		/// <summary> 

        /// ??????????? ????????? ????????? ????????? 

        /// </summary> 

        private string ?ompileSimpleExpression(string sBlankElectionID, string sExpr, int iNum) 

        { 


            // ????? ???? ??????????? ????????? 

            StringBuilder sResult = new StringBuilder(); 

 

 

            // ???????? ????????? ??????? 

            sResult.Append(String.Format("private static int Expression{0}()", iNum)); 

 

 

            // ???????? ???? ??????? 

            sResult.Append("{"); 

            sResult.Append("int nResult;"); 

			sResult.Append("VoteKey oMask = new VoteKey();"); 

 

 

            // ???????? ????????? 

            Line.ParsedExpression oParseResult = new Line.ParsedExpression(sExpr); 

 

 

            // ??????? ?????? ??? ???? ???????? 

            bool bAllElections = sExpr.Trim().StartsWith("{@"); 

 

 

            // ????????????? ??????, ?? ??????? ??????????? ??????? ?????? 

            string sBlankId = string.Empty; 

 

 

            // ????????? ????????????? ?????? ?? ??????? 

            // ??????????? ?????? ?????? 

            if (!bAllElections) 

                sBlankId = sBlankElectionID; 

 

 

            // ??? ? ??? ???????? - ?????????? ?? ????: 

            switch (oParseResult.Type) 

            { 

                case Line.ParsedExpression.ExpType.VotesSum: 

					// ??? ???????? ?????? ????? ??????? ????? ?????? ?? ??????? 

					sResult.Append(String.Format( 

						"oMask.ElectionId = \"{0}\";",  

						_template.ElectionLink.ElectionId)); 

 

 

                    // ????? ??????????? ?????????: ??? ????????? ?? ???????, ?? ??????? ????????? ??????. 

					sResult.Append("nResult = Managers.ElectionManager.VotingResults.VotesCount(oMask);"); 

                    break; 

                case Line.ParsedExpression.ExpType.MandateCount: 

                    // ????? ??????? ? ?????? ???????: 

					sResult.Append("nResult = " + _template.ElectionLink.MaxMarks + ";"); 

                    break; 

                case Line.ParsedExpression.ExpType.AgainstVotesCount: 


					// ??? ???????? "?????? ????", ????? ?? ??????? ? ????????? ?????? ???? 

					if (!_template.ElectionLink.NoneAboveExists) 

					{ 

						sResult.Append("nResult = 0"); 

					} 

					else 

					{ 

						sResult.Append(String.Format( 

						   "oMask.ElectionId = \"{0}\"; oMask.CandidateId = \"{1}\";" 

						   , _template.ElectionLink.ElectionId 

						   , _template.ElectionLink.NoneAboveCandidate.Id)); 

 

 

						sResult.Append("nResult = Managers.ElectionManager.VotingResults.VotesCount(oMask);"); 

					} 

					break; 

                case Line.ParsedExpression.ExpType.RestrictedCount: 

                    if (0 != sBlankId.CompareTo(string.Empty)) 

                        sResult.Append(String.Format("oMask.BlankId = \"{0}\";", sBlankId)); 

 

 

                    //??????? ??? ???????????? ???????????... 

                    PrepareMask(sResult, oParseResult.Restrictions); 

 

 

                    //??????? ????? ??????? ? ???????? ?????????????... 

					sResult.Append("nResult = Managers.ElectionManager.VotingResults.VotesCount(oMask);"); 

                    break; 

 

 

                default: 

                    throw new Exception("??????????? ??? ?????????."); 

            } 

 

 

            // ????????? ???? ??? ???? ????? ?????????? 

            sResult.Append("return nResult;"); 

            sResult.Append("}"); 

 

 

            return sResult.ToString(); 

        } 

 

 

		/// <summary> 

		///		????????? ?????????? ?????? - ????? ? ???????????? ? ????????????? 

		///		????????! ???????? ???????????? ?????? 

		/// </summary> 

		/// <param name="sResult">?????</param> 

		/// <param name="hRestr">???????????</param> 


		private void PrepareMask(StringBuilder sResult, Hashtable hRestr) 

		{ 

			if (hRestr.ContainsKey("Scanner")) 

				sResult.Append(String.Format( 

					"oMask.ScannerSerialNumber = {0};", 

					Convert.ToInt32(hRestr["Scanner"]))); 

 

 

			if (hRestr.ContainsKey("VotingMode")) 

				sResult.Append(String.Format( 

					"oMask.VotingMode = VotingMode.{0};", 

					(VotingMode)Enum.Parse(typeof(VotingMode), hRestr["VotingMode"].ToString()))); 

 

 

			if (hRestr.ContainsKey("BlankType")) 

				sResult.Append(String.Format( 

					"oMask.BlankType = BlankType.{0};", 

					(BlankType)Enum.Parse(typeof(BlankType), hRestr["BlankType"].ToString()))); 

 

 

			if (hRestr.ContainsKey("Election")) 

				sResult.Append(String.Format( 

					"oMask.ElectionNum = \"{0}\";", 

					Convert.ToInt32(hRestr["Election"]))); 

 

 

			if (hRestr.ContainsKey("Candidate")) 

				sResult.Append(String.Format( 

					"oMask.CandidateId = \"{0}\";", 

					Convert.ToInt32(hRestr["Candidate"]))); 

 

 

			if (hRestr.ContainsKey("Blank")) 

				sResult.Append(String.Format( 

					"oMask.BlankId = \"{0}\";", 

					Convert.ToInt32(hRestr["Blank"]))); 

		} 

 

 

		#endregion 

 

 

		/// <summary> 

        /// ?????????? ??????? "???????? ?????? ????????? ??????????" 

        /// </summary> 

        /// <remarks> 

        /// ???????? ?????? ???, ? ?? ????? event, ?????? ??? ????? ??? ???????????? ??, 

        /// ????? ??????????? ????????? ????????? ???????, ????????? ??????, 

        /// ?.?. ?????????? ??????? - ???????? ???????, ?? ???????????. 

        /// </remarks> 


        [NonSerialized] 

        [XmlIgnore] 

        public EventHandler ValueChangedHandler; 

 

 

        /// <summary> 

        /// ???????? ?????? ????????? 

        /// </summary> 

        [XmlIgnore] 

        private int _value; 

 

 

		/// <summary> 

        /// ??????? ????, ??? ???????? ?????? ????????? ?????? 

        /// </summary> 

        /// <remarks>??????? ???, ? ?? ????? int?, ?????? ??? ??? ???????????? Nullable ????, 

        /// ????? ?????????? ?????????????, ????????? ??????</remarks> 

        [XmlIgnore] 

        private bool _valueDefined = false; 

 

 

        /// <summary> 

        /// ???????? ?????? ????????? 

        /// </summary> 

        [XmlIgnore] 

        public int? Value 

        { 

            get 

            { 

                if (IsAutoCalculated) 

                { 

                    CalculateValue(); 

                } 

                return _valueDefined ? (int?)_value : null; 

            } 

            set 

            { 

                // ????  

                if (// ????? ???????? ?????? 

                    value.HasValue &&  

                    // ? ??????? ?? ?????? ??? ??????, ?? ?????????? ?? ?????? 

                    (!_valueDefined || _value != value.Value)) 

                { 

                    // ??????? ???????? 

                    _value = value.Value; 

                    _valueDefined = true; 

 

 

                    // ????????, ??? ???????? ?????????? 

                    var handler = ValueChangedHandler; 


                    if (handler != null) 

                        handler(this, EventArgs.Empty); 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ????????? ???????? ?????? ????????? 

        /// </summary> 

        /// <returns></returns> 

        public void CalculateValue() 

        { 

            // ???? ?????? ?? ???? ??????????????, ?????????? 

            if (_method == null) 

            { 

                throw new Exception("?? ????? ????? ??? ?????????????? ?????? ?????????"); 

            } 

 

 

            //// ????????? ??????????? ???????? 

			Value = (int)_method.Invoke(null, null); 

        } 

 

 

        /// <summary> 

        /// ????? ??? ???????? ???????? ?????? 

        /// </summary> 

        public class LineValue 

        { 

            /// <summary> 

            /// ???????? ?????? ????????? 

            /// </summary> 

            public int Value; 

 

 

            /// <summary> 

            /// ???? ??????????? ?????? ????????? 

            /// </summary> 

            public DateTime Modified; 

 

 

            /// <summary> 

            /// ????????????? ???????? ?????? 

            /// </summary> 

            /// <param name="nValue">????????</param> 

            public LineValue(int nValue) 

            { 

                Value = nValue; 

 


 
                Modified = DateTime.Now; 

            } 

 

 

            /// <summary> 

            /// ????????????? ???????? ?????? 

            /// </summary> 

            /// <param name="nValue">???????? ?????? ?????????</param> 

            /// <param name="dtModified">???? ???????????</param> 

            public LineValue(int nValue, DateTime dtModified) 

            { 

                Value = nValue; 

 

 

                Modified = dtModified; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????, ?????????? ???? ??? ??????, ??????????? ? ???????? ? ????????? 

        /// </summary> 

        [XmlType("LineValue")] 

        public class LineKey 

        { 

            /// <summary> 

            /// ??????????? 

            /// </summary> 

            public LineKey() { } 

 

 

            /// <summary> 

            /// ????????? 

            /// </summary> 

            /// <param name="oVal">???????????? ??????</param> 

            /// <returns>true, ???? ?????</returns> 

            public override bool Equals(object oVal) 

            { 

                LineKey oCompareTo = oVal as LineKey; 

                if (oCompareTo == null) 

                    return false; 

                if ((oCompareTo.AdditionalNumber == this.AdditionalNumber) && (oCompareTo.Number == this.Number) && (oCompareTo.ElNumber == this.ElNumber)) 

                    return true; 

                else 

                    return false; 

            } 

 

 

            /// <summary> 


            /// ????????? ???-????? 

            /// </summary> 

            /// <returns>??? ????</returns> 

            public override int GetHashCode() 

            { 

                int nNumber; 

                int nAddNumChar0; 

                int nAddNumChar1; 

 

 

                //???????? ????? - ????? ?????. ?????????????? - ???? ??? ??? ?????. 

                //???? ????? ??????????? ????????? ???????: ELNumber.GetHashCode() ^ Number*1000 + AddNumber[1].OrderNumber*50 +

AddNumber[0].OrderNumber)%int.MaxVal 

                nNumber = this.ElNumber.GetHashCode() ^ (this.Number * 1000); 

                if ((this.AdditionalNumber != null) && (this.AdditionalNumber.Length > 0)) 

                { 

                    nAddNumChar0 = Convert.ToInt32(this.AdditionalNumber[0]); 

                    if (this.AdditionalNumber.Length > 1) 

                        nAddNumChar1 = Convert.ToInt32(this.AdditionalNumber[1]); 

                    else 

                        nAddNumChar1 = 0; 

                } 

                else 

                { 

                    nAddNumChar0 = 0; 

                    nAddNumChar1 = 0; 

                } 

                return nNumber + nAddNumChar0 + nAddNumChar1; 

            } 

 

 

 

 

            /// <summary> 

            /// ???? ?????? - ?????????? ?????? ???????, ?????? ? ???. ??????. 

            /// </summary> 

            /// <param name="oLine"></param> 

            public LineKey(Line oLine) 

            { 

                _number = oLine.Num; 

                _additionalNumber = ((oLine.AdditionalNum == null) ? String.Empty : oLine.AdditionalNum); 

 

 

                switch (oLine.Type) 

                { 

                    case LineTypes.Voting: 

                        _electionNumber = string.Empty; 

                        break; 

 

 


                    case LineTypes.DontQueryUser: 

                    case LineTypes.Election: 

                    case LineTypes.Blank: 

                        _electionNumber = oLine._template.ElectionLink.ElectionId; 

                        break; 

                } 

            } 

 

 

            /// <summary> 

            /// ???????? ????? 

            /// </summary> 

            [XmlAttribute("Number")] 

            public int Number 

            { 

                get 

                { return _number; } 

                set 

                { _number = value; } 

            } 

            /// <summary> 

            /// ?????????????? ????? 

            /// </summary> 

            [XmlAttribute("AddNumber")] 

            public string AdditionalNumber 

            { 

                get 

                { return _additionalNumber; } 

                set 

                { _additionalNumber = ((value == null) ? String.Empty : value); } 

            } 

            /// <summary> 

            /// ????? ??????? 

            /// </summary> 

            [XmlAttribute("ElNumber")] 

            public string ElNumber 

            { 

                get 

                { return _electionNumber; } 

                set 

                { _electionNumber = value; } 

            } 

 

 

			/// <summary> 

            /// ???????? ????? 

            /// </summary> 

            private int _number; 

            /// <summary> 

            /// ?????????????? ????? 


            /// </summary> 

            private string _additionalNumber; 

            /// <summary> 

            /// ????? ??????? 

            /// </summary> 

            private string _electionNumber; 

        } 

 

 

        /// <summary> 

        /// ????? ?????????????? ????? ?????????? ????????? 

        /// </summary> 

        public class ParsedExpression 

        { 

            /// <summary> 

            /// ???? ????????? 

            /// </summary> 

            public enum ExpType 

            { 

                /// <summary> 

                /// ????? ??????? 

                /// </summary> 

                VotesSum, 

 

 

                /// <summary> 

                /// ?????????? ???????? 

                /// </summary> 

                MandateCount, 

 

 

                /// <summary> 

                /// ?????????? ??????? "?????? ????" 

                /// </summary> 

                AgainstVotesCount, 

 

 

                /// <summary> 

                /// ?????? ?? ???????? ???????? ??????? 

                /// </summary> 

                PropertyReference, 

 

 

                /// <summary> 

                /// ?????????? ??????? ??? ??????????, ?????????????? ? ????????????? 

                /// </summary> 

                RestrictedCount 

            } 

 

 


            /// <summary> 

            ///		????????? ????? ??????????? ?????????, ????????????? ?????? ??? ?????????? ???????? 

            /// </summary> 

            /// <param name="sExpression">????? ?????????</param> 

            public ParsedExpression(string sExpression) 

            { 

                // ?????? ???? ?? null!!! 

                if (string.IsNullOrEmpty(sExpression)) 

                    throw new ArgumentNullException("???????? ??????? ?????? ?? ?????? ? ??????????."); 

 

 

                // ??? ?? ?????????? ????????? ? ???????? ???????????: 

                sExpression = sExpression.Trim(); 

 

 

                // ???????? ?? ?????????? ??????????: 

                _expression = sExpression; 

 

 

                // ????????, ??? ????? ??????, ? ??? ?????? ???? ?? ???????????????? ????????: 

                switch (sExpression.ToUpper()) 

                { 

                    case "[S]": // ????? ??????? 

                        _expType = ExpType.VotesSum; 

                        break; 

                    case "[M]": // ?????????? ???????? 

                        _expType = ExpType.MandateCount; 

                        break; 

                    case "[P]": // ?????? ???? 

                        _expType = ExpType.AgainstVotesCount; 

                        break; 

                    default: 

                        // ??????? ?????? - ???????? ????????? ??????.... 

                        // ???? ?????? ?????? - ??????????? ??????, ?? ??? ???????? ??????????? 

                        if (sExpression[0] == '{') 

                        { 

                            ParseRestrictions(); 

 

 

							// ??????? ?????????. ???? ??????? ???: 

                            // ???? ?????? ??? ??????, ??  

                            _expType = ExpType.RestrictedCount; 

                        } 

                        else 

                        { 

							throw new Exception("??????????? ??? ????????? " + sExpression); 

                        } 

                        break; 

                } 

            } 


 
 

            /// <summary> 

            /// ?????? ????????? ??????????? 

            /// </summary> 

            private void ParseRestrictions() 

            { 

                // ?????? ??? ????????, ??? ?? ????? ???? ? ?????????? ??????????: 

                Regex oTestExp = new Regex(RESTRINCTIONS_EXP); 

				// ????????? ???????? 

				Match oResult; 

 

 

                // ????????, ??? ??? ???????? ???????????: 

                oResult = oTestExp.Match(_expression); 

                if (!oResult.Success) 

                    throw new Exception("????????? ???????????? ???????????:" + _expression); 

 

 

                // ?????? ??????? ?????????? ???????????. ??? ??????? ????: 

                // ??? ???????: 

                ImportValueOfRestriction(SCANNER_EXP, "Scanner"); 

                // ??? ?????? ???????????: 

                ImportValueOfRestriction(VOTINGMODE_EXP, "VotingMode"); 

                ImportValueOfRestriction(CANDIDATE_EXP, "Candidate"); 

                ImportValueOfRestriction(BLANKTYPE_EXP, "BlankType"); 

                ImportValueOfRestriction(ELECTION_EXP, "Election"); 

                ImportValueOfRestriction(BLANK_EXP, "Blank"); 

                ImportValueOfRestriction(TYPE_EXP, "Type"); 

            } 

 

 

            /// <summary> 

            /// ???????? ?? ????????? ???????? ??????????? ? ??????? ??????. 

            /// ???????? ????????? ? hRestrictions ??????? - ? ??????, ???? ???????. 

            /// </summary> 

            /// <param name="sRestrictionPairExp">?????????? ????????? ??? ?????? ????</param> 

            /// <param name="sRestrictionName">??? ???????????</param> 

            private void ImportValueOfRestriction(string sRestrictionPairExp, string sRestrictionName) 

            { 

                Regex oPairExp; // ?????? ??? ?????? ???? ????-???????? 

                Match oKeyValue; // ????????? ?????? ????? ? ????????. 

                Regex oRegValue; // ?????? ??? ?????? ???????? 

                Match oValue;	// ????????? ?????? ???????? 

                string sValue;	// ???????? ??????????? 

 

 

                oPairExp = new Regex(sRestrictionPairExp); 

                // ?????? ??????????? ?? ??????: 

                oKeyValue = oPairExp.Match(_expression); 


 
 

				// ????? ??????????? 

                if (oKeyValue.Success) 

                { 

                    oRegValue = new Regex(VALUE_EXP); 

                    oValue = oRegValue.Match(oKeyValue.Value); 

                    // ???? ??? ??????? ????????? - ???????? ??????? ???????? ?????? 

                    if (!oValue.Success) 

                        throw new Exception("?????? ??? ?????????? ???????? ?????????: " + _expression); 

                    // ??????????? ???????? ? ?????: 

                    try 

                    { 

                        sValue = oValue.Value.TrimStart('='); 

                    } 

                    catch (Exception ex) 

                    { 

                        throw new Exception("?????? ??? ?????????? ???????? ???????????: " + _expression, ex); 

                    } 

                    // ?????? ????????? ???????? ???????? ? ?????????: 

                    try 

                    { 

                        Restrictions.Add(sRestrictionName, sValue); 

                    } 

                    catch (Exception ex) 

                    { 

                        throw new Exception("?????? ??? ?????????? ??????????? ? ?????????:" + _expression, ex); 

                    } 

                } 

            } 

 

 

            /// <summary> 

            /// ????????? ???? ????????? 

            /// </summary> 

            public ExpType Type 

            { 

                get 

                {  

					return _expType;  

				} 

            } 

 

 

            /// <summary> 

            /// ??? ????????, ??????? ????? ?????????? ??? ????????? ???????? 

            /// </summary> 

            public string PropName 

            { 

                get 


                { 

                    if (_expType == ExpType.PropertyReference) 

                        return _propName; 

                    else 

                        throw new Exception("??? ???????? ????? ???? ??????? ?????? ??? ?????????, ???????????? ?? ????????"); 

                } 

            } 

 

 

            /// <summary> 

            /// ??? ??????? (??? ????), ????? ???????? ????? ?????????? 

            /// </summary> 

            public string InstanceName 

            { 

                get 

                { 

                    if (_expType == ExpType.PropertyReference) 

                        return _instanceName; 

                    else 

                        throw new Exception("??? ?????????? ????? ???? ???????? ?????? ??? ?????????, ???????????? ?? ????????"); 

                } 

            } 

 

 

            /// <summary> 

            /// ????? ?????? ??? ????????? 

            /// </summary> 

            private ExpType _expType; 

 

 

            /// <summary> 

            /// ????? ?????? ?????????????? ????????? 

            /// </summary> 

            private string _expression; 

 

 

            /// <summary> 

            /// ???-??????? ?? ?????????? ??????????? 

            /// </summary> 

            public Hashtable Restrictions = new Hashtable(); 

 

 

            /// <summary> 

            /// ??? ????????, ??????? ?? ????? ??????? 

            /// </summary> 

            private string _propName; 

            /// <summary> 

            /// ??? ?????????? (??? ????), ????? ???????? ?? ????? ??????? 

            /// </summary> 

            private string _instanceName; 


 
 

            //?????????? ?????????, ???????????? ??? ??????? ?????????: 

 

 

            /// <summary> 

            /// ?????????, ???????? ?????? ??????????????? ??????, ???????? ?????? ?? ???????? 

            /// </summary> 

            const string REFERENCES_EXP = @"\A((\w)+\.)+(\w)+\Z"; 

 

 

            /// <summary> 

            /// ??????? ???????? ????? ?????????? 

            /// </summary> 

            const string INSTANCE_EXP = @"\A\s*(\w+\.)+"; 

 

 

            /// <summary> 

            /// ??????? ???????? ????? ???????? 

            /// </summary> 

            const string PROPERTY_EXP = @"\s*\w+\Z"; 

 

 

            /// <summary> 

            /// ?????????, ???????? ?????? ?????????????? ??????, ???????????? 

            /// ?????????? ?????????? ??????????? 

            /// </summary> 

            const string RESTRINCTIONS_EXP = @"\A\{@?(\s*(Scanner|VotingMode|Candidate|BlankType|Election|Blank|Type)\s*=\s*(\d+|\w+)\s*(\,|(\}$)))+\Z"; 

 

 

            /// <summary> 

            /// ???????? ???????? ????????, ??????????????? ????????? ????????? 

            /// </summary> 

            const string VALUE_EXP = @"=(\d+|\w+)"; 

 

 

            /// <summary> 

            /// ?????????, ??????????????? ??????????? ?? ?????? 

            /// </summary> 

            const string SCANNER_EXP = @"(\{|\,)\s*Scanner\s*=\s*\d+"; 

 

 

            /// <summary> 

            /// ?????????, ??????????????? ??????????? ?? ????? ??????????? 

            /// </summary> 

            const string VOTINGMODE_EXP = @"(\{|\,)\s*VotingMode\s*=\s*\w+"; 

 

 

            /// <summary> 

            /// ?????????, ??????????????? ??????????? ?? ??? ????????: ??????/?????? 


            /// </summary> 

            const string TYPE_EXP = @"(\{|\,)\s*Type\s*=\s*\w+"; 

 

 

            /// <summary> 

            /// ?????????, ??????????????? ??????????? ?? ????????? 

            /// </summary> 

            const string CANDIDATE_EXP = @"(\{|\,)\s*Candidate\s*=\s*\d+"; 

 

 

            /// <summary> 

            /// ?????????, ??????????????? ??????????? ?? ??? ?????? 

            /// </summary> 

            const string BLANKTYPE_EXP = @"(\{|\,)\s*BlankType\s*=\s*\w+"; 

 

 

            /// <summary> 

            /// ?????????, ??????????????? ??????????? ?? ?????? 

            /// </summary> 

            const string ELECTION_EXP = @"(\{|\,)\s*Election\s*=\s*\d+"; 

 

 

            /// <summary> 

            /// ????????? ??????????????? ??????????? ?? ?????? ?????? 

            /// </summary> 

            const string BLANK_EXP = @"(\{|\,)\s*Blank\s*=\s*\d+"; 

        } 

 

 

        /// <summary> 

        /// ????????? ?????????, ???????? ???????? ?????? ?????? 

        /// </summary> 

        /// <returns>??????, ?????????? ?????????? ?????????????</returns> 

        public ParsedExpression ParseExpression() 

        { 

            return new ParsedExpression(Expression); 

        } 

 

 

        /// <summary> 

        /// ???? ??? ????????? ? ???????... 

        /// </summary> 

        [XmlIgnore] 

        public LineKey Key 

        { 

            get 

            { 

                return new LineKey(this); 

            } 

        } 


 
 

        /// <summary> 

        /// ???????? - ?????? ?? ????????. ?????? ??? ??????. 

        /// </summary> 

        [XmlIgnore] 

        public ProtocolTemplate Template 

        { 

            get 

            {  

				return _template;  

			} 

        } 

 

 

        /// <summary> 

        /// ????? ?????? ?????? ?? ???????? 

        /// </summary> 

        protected ProtocolTemplate _template = null; 

 

 

        /// <summary> 

        /// ??????????? ????? ??? ????????? ????? ? ??????????. ???????????? ?????????! 

        /// </summary> 

        /// <param name="oProtocol">?????? ?? ????????</param> 

        public void SetProtocol(ProtocolTemplate oProtocol) 

        { 

            _template = oProtocol; 

        } 

 

 

        /// <summary> 

        ///		????????? ???????? ???? ?????? ????????? 

        /// </summary> 

        /// <param name="ltType">??? ???? ?????? ?????????</param> 

        /// <returns> 

        ///		string - ?????????? ???????? ???? ?????? ????????? 

        /// </returns> 

        public static string GetLineTypeName(LineTypes ltType) 

        { 

            string sRes = null;	// ????????? 

 

 

            switch (ltType) 

            { 

                case LineTypes.Blank: 

                    sRes = "??? ??????"; 

                    break; 

 

 


                case LineTypes.DontQueryUser: 

                    sRes = "?? ??????????? ????????????"; 

                    break; 

 

 

                case LineTypes.Election: 

                    sRes = "??? ???????"; 

                    break; 

 

 

                case LineTypes.Voting: 

                    sRes = "??? ???????????"; 

                    break; 

 

 

                default: 

                    sRes = "?? ???????????"; 

                    break; 

 

 

            } 

 

 

            return sRes; 

        } 

 

 

        /// <summary> 

        /// ????????? ????????????? ??????? 

        /// </summary> 

        /// <returns></returns> 

        public override string ToString() 

        { 

            StringBuilder sText = new StringBuilder(); 

 

 

            sText.Append("["); 

            // ????????? ??????? ?????????? ???????? ?????? 

            sText.Append("m_sExpression=" + Expression + ";"); 

            // ????????? ???????? ?????? 

            sText.Append("m_sName=" + Name + ";"); 

            // ????????? ????? ?????? 

            sText.Append("m_nNum=" + Num.ToString() + ";"); 

            // ????????? ?????????????? ????? 

            sText.Append("m_nAdditionalNum=" + AdditionalNum.ToString() + ";"); 

            // ????????? ??? ????? 

            sText.Append("m_nType=" + Type.ToString() + ";"); 

 

 

            sText.Append("]"); 


            return sText.ToString(); 

        } 

    } 

}


