using System; 

using System.Collections; 

using System.Collections.Specialized; 

using System.IO; 

using System.Net; 

using System.Net.Sockets; 

using System.Runtime.InteropServices; 

using System.Text; 

using System.Threading; 

using Croc.Bpc.Common; 

using Croc.Bpc.Scanner; 

using Croc.Bpc.Common.Images.Tiff; 

using Croc.Bpc.Common.Images; 

using Croc.Bpc.Common.Diagnostics; 

using Croc.Core.Diagnostics; 

 

 

namespace Croc.Bpc.GsScannerDriver 

{ 

    /// <summary> 

    /// ????? ?????????? ???????? 

    /// </summary> 

    public class Scanner : IScanner 

    { 

        /// <summary> 

        /// ???????????? ??? ????????? ?????? ???????? ???????????? ?????? 

        /// </summary> 

        private static HardwareConfiguration[] ports = 

		{ 

			new HardwareConfiguration(20051, 20052, 20053, SIB2003.SharedMemory.MaxLines,  

                SIB2003.SharedMemory.DotsOneLine, ScannerVersion.V2003, HardwareOptions.Default), 

			new HardwareConfiguration(20041, 20042, 20043, SIB2005.SharedMemory.MaxLines,  

                SIB2005.SharedMemory.DotsOneLine, ScannerVersion.V2005, HardwareOptions.Default), 

			new HardwareConfiguration(20061, 20062, 20063, SIB2009.SharedMemory.MaxLines,  

                SIB2009.SharedMemory.DotsOneLine, ScannerVersion.V2009, HardwareOptions.Default), 

			new HardwareConfiguration(20071, 20072, 20073, SIB2010.SharedMemory.MaxLines,  

                SIB2010.SharedMemory.DotsOneLine, ScannerVersion.V2010,  

                HardwareOptions.OneSide | HardwareOptions.EnhancedDrop | HardwareOptions.RightToLeftHalftone), 

		}; 

 

 

        /// <summary> 

        /// ?????????? ????????? ??????? ???????????? 

        /// </summary> 

        public static int MaxPortVariant = ports.Length; 

 

 

        /// <summary> 

        /// ????? localhost = 127.0.0.1 

        /// </summary> 


        private static long LocalHost = 0x0100007F; 

 

 

        /// <summary> 

        /// 1 ??????? ( 1000 ??????????? ) 

        /// </summary> 

        private static int Timeout = 1000; 

 

 

        /// <summary> 

        /// ???????????? ????? ???????? ?????????? 

        /// </summary> 

        private static int MaxSheetFormats = 20; 

 

 

        /// <summary> 

        /// ?????? 

        /// </summary> 

        private ILogger _logger; 

 

 

        /// <summary> 

        /// ??????? ????? ??????????? 

        /// </summary> 

        private HardwareConfiguration currentConfiguration; 

 

 

        /// <summary> 

        /// ???????? ????? ??????? ?? ???????? 

        /// </summary> 

        private ScannerSocket scannerSocket; 

 

 

        /// <summary> 

        /// ???????? ??????? 

        /// </summary> 

        private ScannerProps scannerProps; 

 

 

        /// <summary> 

        /// ???????????? ?????? ??? ??????????? ?????-?????? ??????????? ?? ???????????? 

        /// </summary> 

        private byte[] whiteCoeff; 

 

 

        /// <summary> 

        /// ???????????? ?????? ??? ??????????? ?????-?????? ??????????? ?? ???????????? (??? ???????? ? ???????? ????????) 

        /// </summary> 

        private MemoryBlock whiteCoeffU = new MemoryBlock(); 

 


 
        /// <summary> 

        /// ????????? ????????? ??????? 

        /// </summary> 

        private IManufProps manufProps; 

 

 

        /// <summary> 

        /// ????? ? ?????????? ???????? ?????? 

        /// </summary> 

        private BaseSharedMemory sh; 

 

 

        /// <summary> 

        /// ??????? ????? ????????? ????????? ??????? 

        /// </summary> 

        private Thread workThread; 

 

 

        /// <summary> 

        /// ????????? ??????? 

        /// </summary> 

        private HybridDictionary waitEvents; 

 

 

        /// <summary> 

        /// ????????? ?????????? ? ????? ?? ????????? ??????? 

        /// </summary> 

        private HybridDictionary recevedEvents; 

 

 

        /// <summary> 

        /// ??????? ????????? ??????? 

        /// </summary> 

        private bool scannerBusy; 

 

 

        /// <summary> 

        /// ??????? ??????? ???????????? ????????? 

        /// </summary> 

        private bool sheetScanning; 

 

 

        /// <summary> 

        /// ??????? ????? ??????????????? ????? 

        /// </summary> 

        private int nStrings; 

 

 

        /// <summary> 


        /// ??????? ?????? ? ????????? ??????????????? ????????? ?? ???????0 

        /// </summary> 

        private int nTreshold0; 

 

 

        /// <summary> 

        /// ??????? ?????? ? ????????? ??????????????? ????????? ?? ???????1 

        /// </summary> 

        private int nTreshold1; 

 

 

        /// <summary> 

        /// ????? ?????? ????????? 

        /// </summary> 

        private const int NumberOfSides = 2; 

 

 

        /// <summary> 

        /// ?????????????? ?????????? ????? ??????? ???????? 

        /// </summary> 

        private short[] x; 

 

 

        /// <summary> 

        /// ???????????? ?????????? ????? ??????? ???????? 

        /// </summary> 

        private short[] y; 

 

 

        /// <summary> 

        /// ????? ????? ????????? (?????-??????) ?????? ? ????? ????? 

        /// </summary> 

        public const int DotsPerByteBinary = 8; 

 

 

        /// <summary> 

        /// ????? ????? ???????????? ?????? ? ????? ????? 

        /// </summary> 

        public const int DotsPerByteHalftone = 1; 

 

 

        /// <summary> 

        /// ?????????? ???????? ?????????? 

        /// </summary> 

        private ValidPageOffset[] validPageOffsets; 

 

 

        /// <summary> 

        /// ?????????? ??????? ?????????? 

        /// </summary> 


        private ValidPageLength[] validPageLengths; 

 

 

        /// <summary> 

        /// ?????? ?? ??????, ?????????? ??????? 

        /// </summary> 

        private IScannerEventHandler pEvent; 

 

 

        /// <summary> 

        /// ????? ???????? ????? ????????? 

        /// </summary> 

        private bool validLength; 

 

 

        /// <summary> 

        /// IP ????? ??????? 

        /// </summary> 

        private IPAddress ipAddress = null; 

 

 

        /// <summary> 

        /// IP ????? ????????????????? ???????? 

        /// </summary> 

        private IPAddress ipBroadCastAddress = null; 

 

 

        /// <summary> 

        /// ????????? IP ?????? 

        /// </summary> 

        private const string ipAddressSignature = "inet addr:"; 

 

 

        /// <summary> 

        /// ????????? IP ?????? ????????????????? ???????? 

        /// </summary> 

        private const string ipBroadCastSignature = "Bcast:"; 

 

 

        /// <summary> 

        /// ??????? ??????????? ???????????? ??????? ??????????? 

        /// </summary> 

        private const string ipAddressDetector = "ifconfig"; 

 

 

        /// <summary> 

        /// ?????? ?????????? ??? ?????????? 

        /// </summary> 

        private int status; 

 


 
        /// <summary> 

        /// ??????? ??? ???????? ????????? ???????? 

        /// </summary> 

        private Queue events; 

 

 

        /// <summary> 

        /// ????? ?????????? ??????? ????????? ????????? ???????? 

        /// </summary> 

        private Thread sendEventsThread; 

 

 

        /// <summary> 

        /// ??????????? ??????? ??????? ?? ????????? ???????? 

        /// </summary> 

        private ManualResetEvent mre; 

 

 

        #region IDisposable members 

 

 

        /// <summary> 

        /// ???????? ?????? 

        /// </summary> 

        ~Scanner() 

        { 

            Dispose(false); 

        } 

 

 

        /// <summary> 

        /// ?????????????? ???????? ??????? 

        /// </summary> 

        public void Dispose() 

        { 

            Dispose(true); 

        } 

 

 

        /// <summary> 

        /// ???????? ????????? 

        /// </summary> 

        /// <param name="disposing">??????? ?????????????????? ????????</param> 

        private void Dispose(bool disposing) 

        { 

            lock (this) 

            { 

                if (disposing) 

                { 


                    GC.SuppressFinalize(this); 

                } 

                // ????????? ??? ?????? 

                if (this.sendEventsThread != null) 

                { 

                    sendEventsThread.Abort(); 

                    sendEventsThread = null; 

                } 

                if (this.workThread != null) 

                { 

                    workThread.Abort(); 

                    workThread = null; 

                } 

                // ????????? ????? 

                if (scannerSocket != null) 

                { 

                    this.ScanningEnabled = false; 

                    scannerSocket.Close(); 

                    scannerSocket = null; 

                } 

                // ????????????? ?? ????? ?????? 

                if (sh != null) 

                { 

                    sh.Close(); 

                    sh = null; 

                } 

            } 

        } 

 

 

        #endregion 

 

 

        /// <summary> 

        /// ??????????? ?? ???????? 

        /// </summary> 

        public Scanner(ILogger logger) 

        { 

            _logger = logger; 

 

 

            waitEvents = new HybridDictionary(); 

            recevedEvents = new HybridDictionary(); 

            events = new Queue(); 

            mre = new ManualResetEvent(false); 

            this.validPageLengths = new ValidPageLength[MaxSheetFormats]; 

            this.validPageOffsets = new ValidPageOffset[MaxSheetFormats]; 

            this.sheetScanning = false; 

            this.scannerBusy = false; 

 


 
            for (int configNumber = 0; configNumber < ports.Length; configNumber++) 

            { 

                this.currentConfiguration = ports[configNumber]; 

                Socket UdpSocketSend = null; 

                Socket UdpSocketReceive = null; 

                Socket TcpSocket = null; 

                try 

                { 

                    // ????? ??? ??????????? 

                    UdpSocketSend = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Unspecified); 

                    // ????? ??? ??????????? 

                    UdpSocketReceive = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Unspecified); 

                    // ??????????? ??????? ???????? ? ????? ??? ????? ?????? 

                    UdpSocketReceive.Bind(new IPEndPoint(System.Net.IPAddress.Any, this.currentConfiguration.UdpPortReceive)); 

 

 

                    // ?????????? ??????. ????? 32????????? ?????, ?????? 1 

                    byte[] data = { 1, 0, 0, 0 }; 

                    // ??????? ?? ?????????? 

                    UserMessage um = new UserMessage(Command.umConnect, data); 

                    // ????? ??????????? ????????? ?????? ???? ??????????? ????? ?? ??????? ???????????? 

                    EndPoint ep = new IPEndPoint(LocalHost, this.currentConfiguration.UdpPortSend); 

                    // ??????? ??????? ?? ?????????? 

                    UdpSocketSend.SendTo(um.Buffer, ep); 

                    // ???????? ?????? 

                    if (!UdpSocketReceive.Poll(Timeout, SelectMode.SelectRead)) 

                    { 

                        // ?? ????????? - ????????? ????????? ???????? ???????????? ?????? 

                        continue; 

                    } 

                    // ??????? ????? 

                    data = new byte[1024]; 

                    UdpSocketReceive.ReceiveFrom(data, ref ep); 

                    // ?????????? ?? ???? ???????????????? ????????? 

                    um = new UserMessage(data); 

                    // ???? ???????????? ??????? != ???????? 

                    if (um.Command != Command.umConnect) 

                    { 

                        throw new Exception("ScannerWantNotConnect"); 

                    } 

                    // ????????? ???????? 

                    // ????????? ?????? ???? umConnectConfirmation 

                    umConnectConfirmation cc = new umConnectConfirmation(um.Data); 

                    // ????? ?????? ???? ????? 32????????? ?????, ?????? 1 

                    if (cc.answer != 1) 

                    { 

                        throw new Exception("ScannerWantNotConnect"); 

                    } 

                    this.status = cc.status; 


                    // ???????? ??????????? ???????? ????? ??????? ? ?????????? ???????? 

                    TcpSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Unspecified); 

                    // ????????? ????????? ????????????? ?????? 

                    TcpSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, 1); 

                    // ????????????? ? ????? 

                    ep = new IPEndPoint(System.Net.IPAddress.Any, this.currentConfiguration.TcpPport); 

                    TcpSocket.Bind(ep); 

                    // ????????????? ????? ??????? ????????? ?????? ? ???? ????????? 

                    TcpSocket.Listen(1); 

                    // ????????????? ??????? ??????? 

                    ScannerSocket.SetBuffers(TcpSocket); 

                    // ?????? ???????? ????? ? ?? ??? ?????? ??????? ???????? ????? ??????? ? ?????????? ???????? 

                    scannerSocket = new ScannerSocket(TcpSocket.Accept()); 

                    // ??????? ??? ???????? ?????? 

                    UdpSocketSend.Close(); 

                    UdpSocketReceive.Close(); 

                    TcpSocket.Close(); 

                    // ???????? ????? - ?????????? ????????? ?? ??????? 

                    this.workThread = new Thread(Work); 

                    this.workThread.Start(); 

                    // ? ????? - ?????????? ????????? ??????? 

                    this.sendEventsThread = new Thread(SendEvents); 

                    this.sendEventsThread.Start(); 

 

 

                    // ???????? ?????? ???????? 

                    um = SendAndWaitAnswer(Command.umGetVersion); 

                    DriverVersion = (new vers(um.Data)).drv; 

 

 

                    switch (this.currentConfiguration.ScannerVersion) 

                    { 

                        case ScannerVersion.V2003: 

                            sh = new SIB2003.SharedMemory(); 

                            break; 

                        case ScannerVersion.V2005: 

                            sh = new SIB2005.SharedMemory(); 

                            break; 

                        case ScannerVersion.V2009: 

                            sh = new SIB2009.SharedMemory(); 

                            break; 

                        case ScannerVersion.V2010: 

                            sh = new SIB2010.SharedMemory(); 

                            break; 

                    } 

 

 

                    this.x = new short[NumberOfSides]; 

                    x[0] = x[1] = 0; 

                    this.y = new short[NumberOfSides]; 


                    y[0] = y[1] = 0; 

                    this.ScanningEnabled = false; 

                    this.ReloadProperties(); 

                    this.ReloadManufProps(); 

                    this.ReloadWhiteCoeffs(); 

 

 

                    logger.LogInfo(Message.ScannerManagerDetectedHardware,  

                        currentConfiguration.ScannerVersion, currentConfiguration.MaxLines, currentConfiguration.DotsOneLine, 

                        currentConfiguration.DotsOneSide, currentConfiguration.SizeofBinaryBuffer, currentConfiguration.SizeofHalftoneBuffer); 

 

 

                    break; 

                } 

                finally 

                { 

                    if (UdpSocketSend != null) 

                        UdpSocketSend.Close(); 

                    if (UdpSocketReceive != null) 

                        UdpSocketReceive.Close(); 

                    if (TcpSocket != null) 

                        TcpSocket.Close(); 

                } 

            } 

            if (scannerSocket == null) 

            { 

                throw new Exception("?? ????????? ?????????? ?? ????????"); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ??????????? ?????? 

        /// NOTE: ??????? ?????? ??????????? ????? ?????? ????????? ???????? 

        /// </summary> 

        public unsafe void ReloadWhiteCoeffs() 

        { 

            UserMessage um = SendAndWaitAnswer(Command.umGetWhiteCoef); 

 

 

            // ?????????? ?????? ??????????? ? ?????? 

            whiteCoeff = new byte[currentConfiguration.DotsOneLine]; 

 

 

            if ((currentConfiguration.Options & HardwareOptions.OneSide) > 0) 

            { 

                // ??? ?????????????? ??????? ???????????? ?????? ????? ? ?????? ???????? ??????? 

                // ????? ???????? ????????? ??? ?????????? ??????????? ?? ?? ?????? ???????? 

                // ??? ??? ?? ???????? ? ???? ?????? ?? ???????? 1 

                Array.Copy(um.Data, 0, whiteCoeff, 0, currentConfiguration.DotsOneSide); 


                Array.Copy(um.Data, 0, whiteCoeff, currentConfiguration.DotsOneSide, currentConfiguration.DotsOneSide); 

            } 

            else 

            { 

                Array.Copy(um.Data, whiteCoeff, currentConfiguration.DotsOneLine); 

            } 

 

 

            // ?????????? ??????? ?????? ??? unmanaged ???? 

            whiteCoeffU.Alloc(currentConfiguration.DotsOneLine); 

            Marshal.Copy(whiteCoeff, 0, whiteCoeffU.ToPointer(), currentConfiguration.DotsOneLine); 

        } 

 

 

        /// <summary> 

        /// ???????? ???????? ??????? ??????? 

        /// </summary> 

        public void ReloadProperties() 

        { 

            UserMessage um = SendAndWaitAnswer(Command.umGetProps); 

            // ?????????? ?????? ???????? ?????????? ScannerProps 

            this.scannerProps = new ScannerProps(um.Data); 

        } 

 

 

        /// <summary> 

        /// ???????? ???????? ????????? ???????? ??????? 

        /// </summary> 

        public void ReloadManufProps() 

        { 

            UserMessage um = SendAndWaitAnswer(Command.umGetManufProps); 

            // ?????????? ?????? ???????? ?????????? ManufScannerProps 

            switch (currentConfiguration.ScannerVersion) 

            { 

                case ScannerVersion.V2003: 

                case ScannerVersion.V2005: 

                case ScannerVersion.V2009: 

                    manufProps = new SIB2003.ManufProps(um.Data); 

                    break; 

                case ScannerVersion.V2010: 

                    manufProps = new SIB2010.ManufProps(um.Data); 

                    break; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????? ??????? ?????????? ??? ?????????? 

        /// </summary> 

        public int Status 


        { 

            get 

            { 

                return this.status; 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ????? ? ???????? ?, ??? ?????????????, ????????  

        /// </summary> 

        /// <param name="sheetIssue">?????????? ???????? ? ?????. 0 - ?? ???????????</param> 

        /// <returns>????????? ?????????? ???????</returns> 

        public DropResult Drop(short sheetIssue) 

        { 

            sheetScanning = false; 

            DropResult dropResult = DropResult.Dropped; 

            UserMessage um = this.SendAndWaitAnswer(Command.umDrop, sheetIssue, Command.umSheetDroped); 

            // ???? ?? ????????? ?????? 

            if (um == null) 

            { 

                dropResult = DropResult.Timeout; 

            } 

            else 

            { 

                if ((currentConfiguration.Options & HardwareOptions.EnhancedDrop) > 0) 

                { 

                    // ????????? ??????? ???????: ????? ????????? ???? 0 - ????????, ???? 1 - ????????????? 

                    short result = (short) (um.Data[0] | um.Data[1] << 8); 

                    if (result == 1) 

                    { 

                        dropResult = DropResult.Reversed; 

                    } 

                } 

            } 

 

 

            pEvent.SheetDroped(this, dropResult); 

 

 

            return dropResult; 

        } 

 

 

        /// <summary> 

        /// ???????????????? ??????? ??? ?????????? ????????????? ??????? ? ???????? 

        /// </summary> 

        /// <param name="source">???????? ???????????</param> 

        /// <param name="destination">????? ??? ?????????????? ???????????</param> 

        /// <param name="whiteCoeffs">?????? ????????????? ?????? ??? ????? ???????</param> 


        /// <param name="width">?????? ???????????</param> 

        /// <param name="height">?????? ???????????</param> 

        [DllImport("xib.dll")] 

        static unsafe extern void applyWhiteCoeffs(byte* source, byte* destination, byte* whiteCoeffs, int width, int height); 

 

 

        /// <summary> 

        /// ???????????????? ??????? ??? ?????????? ????????????? ??????? ? ????? ? ???? ???????? ???????? 

        /// ???????? ???????? ????? 

        /// </summary> 

        /// <param name="side1">???????? ???????????</param> 

        /// <param name="side2">????? ??? ?????????????? ???????????</param> 

        /// <param name="whiteCoeffs">?????? ????????????? ?????? ??? ????? ???????</param> 

        /// <param name="width">?????? ???????????</param> 

        /// <param name="height">?????? ???????????</param> 

        [DllImport("xib.dll")] 

        static unsafe extern void applyWhiteCoeffsDirectly(byte* side1, byte* side2, byte* whiteCoeffs, int width, int height); 

 

 

        /// <summary> 

        /// ???????? ??????????? ????? 

        /// </summary> 

        /// <param name="side">???????</param> 

        /// <param name="x">?????????? x ??????-???????? ????</param> 

        /// <param name="y">?????????? y ??????-???????? ????</param> 

        /// <param name="w">?????? ? ?????? ?????????? ???????</param> 

        /// <param name="h">?????? ? ?????? ?????????? ???????</param> 

        /// <param name="iMemory">????? ??????? ???????</param> 

        /// <param name="nID">????????????? ??????</param> 

        public unsafe void GetHalftoneBuffer(ScannedSide side, short x, short y, short w, short h, MemoryBlock iMemory, out short nID) 

        { 

            if (side == ScannedSide.Undefined) 

                throw new ArgumentException("??????? ?? ??????????"); 

 

 

            int dotsPerByte = DotsPerByteHalftone; 

            // ? ??????????? ?? ??????? ??????? ????????? ?? ???????? ????? 

            int sideIndex = (int)side; 

            IntPtr ptr = sh.HalftoneBuffer[sideIndex]; 

 

 

            if (side == ScannedSide.Top) 

            { 

                ptr = HalfToneBuffer0.ToPointer(); 

            } 

            else if (side == ScannedSide.Bottom) 

            { 

                ptr = HalfToneBuffer1.ToPointer(); 

            } 

 


 
            byte* sourceBuffer = (byte*)ptr.ToPointer(); 

            x -= this.x[sideIndex]; 

            y -= this.y[sideIndex]; 

            if (x < 0) 

            { 

                throw new Exception("???????????? ???????? ????? ???????"); 

            } 

            if (y < 0) 

            { 

                throw new Exception("???????????? ???????? ??????? ???????"); 

            } 

            if (h < 0) 

            { 

                throw new Exception("????????????? ??????"); 

            } 

            if (w < 0) 

            { 

                throw new Exception("????????????? ??????"); 

            } 

            if (x + w > this.currentConfiguration.DotsOneSide || y + h > this.currentConfiguration.MaxLines) 

            { 

                throw new Exception("????????????? ??????????? ??????? ?? ??????? ??????????????? ???????"); 

            } 

            if (x % dotsPerByte != 0) 

            { 

                throw new Exception("????????? ?????????? ?? ???????? ?? ??????? ?????!"); 

            } 

            if (w % dotsPerByte != 0) 

            { 

                throw new Exception("?????? ??????????? ??????? ??????? ?? ????? ????? ????!"); 

            } 

            // ?????? ?????????? ?????? ??? ????? ????? h ???????? 

            // ?? ????? ????? ? ????? ?????? w ???????? ?? ????? ????? ? ????? dotsPerByte 

            // size = h * ( w / dotsPerByte ); 

 

 

            // ????????? ?? ????? - ???????? 

            ptr = iMemory.ToPointer(); 

            if (ptr == IntPtr.Zero) 

            { 

                throw new Exception("??? ?????? ??? ?????? ???????????!"); 

            } 

            byte* destination = (byte*)ptr.ToPointer(); 

            // ?????? ????? ? ?????? 

            int lengthLine = this.currentConfiguration.DotsOneSide / dotsPerByte; 

            // ?????? ?????????? ????? ? ?????? 

            int lengthCopy = w / dotsPerByte; 

            // ????????? ???????? ? ??????? ??????? ?????? 

            int shift = (side == 0 ? 0 : currentConfiguration.DotsOneSide); 


 
 

            if (x == y && y == 0 && lengthCopy == lengthLine) 

            { 

                if (!WhiteCoeffApplyed[sideIndex]) 

                { 

                    // ? ?????? ????? ??????????? ????????? ??????????????  

                    // ? ??????? unmanaged ???? 

                    IntPtr wcPtr = whiteCoeffU.ToPointer(); 

 

 

                    if ((currentConfiguration.Options & HardwareOptions.RightToLeftHalftone) > 0) 

                    { 

                        // ?????????? ???? ????? 

                        if (!HalftoneFlipped[sideIndex]) 

                        { 

                            // TODO: ????? ?? ???? ???? ??????????? ?????, ? ?? ??????? ???????? 

                            FlipBufferVertically(sourceBuffer, lengthCopy, h); 

                            HalftoneFlipped[sideIndex] = true; 

                        } 

                        applyWhiteCoeffs(sourceBuffer, destination, (byte*)wcPtr.ToPointer() + shift, lengthCopy, h); 

                    } 

                    else 

                    { 

                        applyWhiteCoeffs(sourceBuffer, destination, (byte*)wcPtr.ToPointer() + shift, lengthCopy, h); 

                    } 

                } 

                else 

                { 

                    // TODO: ??????????? ????? ??????  

                    // NOTE: ???? ? ?????????? ???????? ?? ???????? ??????? 

                } 

            } 

            else 

            { 

                // ????????? ????? ???????? ?????????? ????, ??? ??? 

                // ????????? ??????? ?? ????? ?????? ?? ??????? ??????? 

                // ? ???? ???????? ??????? ?? ?? ????????????? 

 

 

                // ???????? ?????????? ????? ??? ??????? ???????????? ?????? 

                int wcX = x; 

                int wcInc = 1; 

                if (!HalftoneFlipped[sideIndex] && (currentConfiguration.Options & HardwareOptions.RightToLeftHalftone) > 0) 

                { 

                    // ?? ????????????? ?????? ????? ????????? ?? ??????? ?????????? 

                    // NOTE: x ????? ???????????? (?????????? ? ???????) ??????????! 

                    wcX = x + w - 1; 

                    // ? ??????? 

                    wcInc = -1; 


 
 

                    // ????????? ????????? ?????????? ??? ????????????? ?????? 

                    x = (short)(currentConfiguration.DotsOneSide - x - w); 

                } 

 

 

                // ????????? ?? ?????? ??????? ????? 

                byte* startLine = sourceBuffer + // ?????? ?????? 

                    y * lengthLine + // ????? ???? ? ?????? y-??????? 

                    x / BaseSharedMemory.DotsPerByteHalftone; // ????? ???? ? ?????? x-?????? 

 

 

                // ????????? ? ????????? 

                byte* p = destination; 

 

 

                // ???? ?? ????? ????? 

                for (int i = 0; i < h; i++) 

                { 

                    // ??????? ????????? ? ????????? 

                    byte* source = startLine; 

 

 

                    // ????????? ?????? ????? ?????? 

                    for (int j = 0, wcJ = wcX; j < lengthCopy; j++, wcJ += wcInc) 

                    { 

                        // ???? ????????? ?????????? ??????? ?????? 

                        *p++ = whiteCoeffTable.whiteCoeff[(*source++ << 8) + whiteCoeff[shift + wcJ]]; 

                    } 

                    // ???????? ?? ????????? ?????? 

                    startLine += lengthLine; 

                } 

 

 

                if (!HalftoneFlipped[sideIndex] && (currentConfiguration.Options & HardwareOptions.RightToLeftHalftone) > 0) 

                { 

                    // ?????? ?????????? ????? 

                    FlipBufferVertically(destination, w, h); 

                } 

            } 

            nID = 0; 

        } 

 

 

        /// <summary> 

        /// ??????? ??????????? ???????? ????? ?????????? ?? ?????????? 

        /// </summary> 

        private const int INDICATOR_LENGTH = 16; 

 


 
        /// <summary> 

        /// ????? ?????????? 

        /// </summary> 

        public int IndicatorLength 

        { 

            get 

            { 

                return INDICATOR_LENGTH; 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ?????? ?? ????????? 

        /// </summary> 

        /// <param name="str">?????? ??? ???????????</param> 

        public void SetIndicator(string str) 

        { 

            // ?????? ?? ????? ?????????? ?????? '?' 

            str = str.Replace('?', 'N'); 

            scannerSocket.SendCommand(Command.umIndicatorS, Encode(str)); 

        } 

 

 

        /// <summary> 

        /// ?????????????? ?????? ? ??????? ???? ??? ???????? ??????? 

        /// </summary> 

        /// <param name="str">???????? ??????</param> 

        /// <returns>????? ??? ???????? ???????</returns> 

        private byte[] Encode(string str) 

        { 

            return Encoding.GetEncoding(1251).GetBytes(str); 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????????? ??????? 

        /// </summary> 

        public int MotorCount 

        { 

            get 

            { 

                if ((currentConfiguration.Options & HardwareOptions.OneSide) > 0) 

                { 

                    // ????????????? ?????? ????? ?????? ???? ????? 

                    return 1; 

                } 

                else 

                { 


                    return 2; 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ???????? 

        /// </summary> 

        /// <param name="number">1 - ?????? ????? 2 - ?????? ????? 3 - ??? ??????</param> 

        /// <param name="enable">true - ????????, false - ?????????</param> 

        /// <param name="dir">??????????? ???????? ???????</param> 

        /// <param name="step">?????????? ?????</param> 

        public void Motor(short number, bool enable, int dir, int step) 

        { 

            short onoff = (short)(enable ? 1 : 0); 

 

 

            if ((currentConfiguration.Options & HardwareOptions.OneSide) > 0) 

            { 

                // ?????????? ????? ??????, ?? ???? 

 

 

                // ????????????? ??????? ????????? ?????? 

                byte[] data = { 0, 0, 0, 0 }; 

                // ???? ??????? ?? ????????? 

                if (onoff == 1) 

                { 

                    // ??????? ??????????? 

                    switch (dir) 

                    { 

                        case 0: 

                            // ???????? 1 (???????) 

                            data = new byte[] { 1, 0, 0, 0 }; 

                            break; 

                        case 1: 

                            // ???????? -1 (??????) 

                            data = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF }; 

                            break; 

                    } 

                } 

                // ??????? ?? ?????????? 

                scannerSocket.SendCommand(Command.umMotor, data); 

            } 

            else 

            { 

                MotorData md; 

                if (number == 1) 

                { 

                    md = new MotorData(number, (short)onoff, (short)dir, (short)step); 


                    scannerSocket.SendCommand(Command.umMotor, md.Data); 

                } 

                else if (number == 2) 

                { 

                    md = new MotorData(number, (short)onoff, (short)(1 - dir), (short)step); 

                    scannerSocket.SendCommand(Command.umMotor, md.Data); 

                } 

                else if (number == 3) 

                { 

                    md = new MotorData(1, (short)onoff, (short)dir, (short)step); 

                    scannerSocket.SendCommand(Command.umMotor, md.Data); 

                    md = new MotorData(2, (short)onoff, (short)(1 - dir), (short)step); 

                    scannerSocket.SendCommand(Command.umMotor, md.Data); 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ?????? ? ??????? ???????? ???????? ???? ?????  

        /// ?? ?????? ???? ??????. ??? ?????? ?????? ?????????  

        /// ???????? ???????????? ???????? 

        /// </summary> 

        /// <param name="width">?????????? ?????? ?????????</param> 

        /// <param name="max_offset">???????????? ???????? ?? ????? ???????</param> 

        /// <returns></returns> 

        public int PageOffset_AddItem(int width, int max_offset) 

        { 

            int i; 

            for (i = 0; i < validPageOffsets.Length; i++) 

            { 

                if (validPageOffsets[i] == null) 

                { 

                    validPageOffsets[i] = new ValidPageOffset(width, max_offset); 

                    break; 

                } 

            } 

            SetCurrentPageOffsetTable(); 

            return i; 

        } 

 

 

        /// <summary> 

        /// ???????? ??????? ??????? ???????? ???????? ???? ??????? 

        /// </summary> 

        private void SetCurrentPageOffsetTable() 

        { 

            MemoryStream ms = new MemoryStream(); 

            BinaryWriter bw = new BinaryWriter(ms); 

            int els = 0; 


            // ?????????? ????? ????????? 

            for (int i = 0; i < validPageOffsets.Length; i++) 

            { 

                if (validPageOffsets[i] != null) 

                { 

                    els++; 

                } 

            } 

            bw.Write(els); 

            for (int i = 0; i < validPageOffsets.Length; i++) 

            { 

                if (validPageOffsets[i] != null) 

                { 

                    bw.Write((int)(validPageOffsets[i].width * scannerProps.DpiX1 / 25.4)); 

                    bw.Write((int)(validPageOffsets[i].maxLength * scannerProps.DpiY1 / 25.4)); 

                } 

            } 

            bw.Flush(); 

            byte[] data = ms.ToArray(); 

            bw.Close(); 

            this.scannerSocket.SendCommand(Command.umSetPageOffset, data); 

        } 

 

 

        /// <summary> 

        /// ???????? ??????? ???????? ???????? ????  

        /// ????? ?? ?????? ???? ?????? 

        /// </summary> 

        public void PageOffset_ClearAll() 

        { 

            for (int i = 0; i < validPageOffsets.Length; i++) 

            { 

                validPageOffsets[i] = null; 

            } 

            SetCurrentPageOffsetTable(); 

        } 

 

 

        /// <summary> 

        /// ??????? ?????? ?? ??????? ???????? ????????  

        /// ???? ????? ?? ?????? ???? ??????.  

        /// </summary> 

        /// <param name="itemID">????? ?????? ? ???????</param> 

        public void PageOffset_ClearItem(int itemID) 

        { 

            validPageOffsets[itemID] = null; 

            SetCurrentPageOffsetTable(); 

        } 

 

 


        /// <summary> 

        /// ??????? ??????? ????? 

        /// </summary> 

        public ReverseCommandResult Reverse() 

        { 

            UserMessage um = this.SendAndWaitAnswer(Command.umRevers, true); 

            // ???? ?? ?????? ????? ??? ? ?????? ??? ?????? ??? ?????? ?????? ?? 1 

            if (um == null || um.Data.Length == 0 || um.Data[0] != 1) 

            { 

                // ?????? ?????????? (?? ??? ?? ????? ?????????? ??????) 

                this.sheetScanning = false; 

                scannerBusy = false; 

                return ReverseCommandResult.Impossible; 

            } 

            else 

            { 

                this.sheetScanning = false; 

                scannerBusy = false; 

                return ReverseCommandResult.Accepted; 

            } 

        } 

 

 

        /// <summary> 

        /// ????????????? ?????? ?? ??????, ?????????? ??????? 

        /// </summary> 

        /// <param name="pEvent">?????? ?? ??????, ?????????? ???????</param> 

        public void SetEventsHandler(IScannerEventHandler pEvent) 

        { 

            this.pEvent = pEvent; 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????????? ? ??????? ??????? (????????) ???? ?????. 

        /// </summary> 

        /// <param name="side">???????</param> 

        /// <param name="x">????? ?????</param> 

        /// <param name="y">??????? ?????</param> 

        public void SetWorkZone(ScannedSide side, short x, short y) 

        { 

            if (side == ScannedSide.Undefined) 

                throw new ArgumentException("??????? ?? ??????????"); 

 

 

            var sideIndex = (int)side; 

            this.x[sideIndex] = x; 

            this.y[sideIndex] = y; 

        } 

 


 
        /// <summary> 

        /// ???????? ??????? ????????? ???????.		 

        /// TestMarker (short iSheetIssue) 

        /// 			iSheetIssue: 

        /// 				1 ? ?????????? 1 

        /// 				2 ? ?????????? 2 

        /// 				3 ? ?????????? 3 

        /// </summary> 

        /// <param name="SheetIssue">??? ?????????? (????? ????????)</param> 

        public void TestMarker(short SheetIssue) 

        { 

            byte[] data = new byte[4]; 

            data[0] = (byte)(SheetIssue & 0xFF); 

            data[1] = (byte)(SheetIssue >> 8); 

            scannerSocket.SendCommand(Command.umTestMarker, data); 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????? ??????? ?????????? ???????? ??????????. 

        /// </summary> 

        private void SetEmptyFormatsTable() 

        { 

            this.scannerSocket.SendCommand(Command.umSetFormats, new byte[] { 0, 0, 0, 0 }); 

        } 

 

 

        /// <summary> 

        /// ?????????? (???????? ???????) ??????? ??????? ???????? ???? ??????????. 

        /// </summary> 

        private void SetCurrentFormatsTable() 

        { 

            MemoryStream ms = new MemoryStream(); 

            BinaryWriter bw = new BinaryWriter(ms); 

 

 

            int els = 0; 

            for (int i = 0; i < validPageLengths.Length; i++) 

            { 

                if (validPageLengths[i] != null) 

                { 

                    els++; 

                } 

            } 

            bw.Write(els); 

            for (int i = 0; i < validPageLengths.Length; i++) 

            { 

                if (validPageLengths[i] != null) 

                { 


                    bw.Write((int)(validPageLengths[i].width * scannerProps.DpiX1 / 25.4)); 

                    bw.Write((int)(validPageLengths[i].minLength * scannerProps.DpiY1 / 25.4)); 

                    bw.Write((int)(validPageLengths[i].maxLength * scannerProps.DpiY1 / 25.4)); 

                } 

            } 

            bw.Flush(); 

            byte[] data = ms.ToArray(); 

            bw.Close(); 

            this.scannerSocket.SendCommand(Command.umSetFormats, data); 

        } 

 

 

        /// <summary> 

        /// ???????? ?????? ? ??????? ???????? ???? ??????????. 

        /// ??? ?????? ?????? ????????? ???????? ??????????? ? 

        /// ???????????? ????? ?????. 

        /// </summary> 

        /// <param name="width">?????????? ??????</param> 

        /// <param name="min_length">?????????? ?????????? ?????</param> 

        /// <param name="max_length">??????????? ?????????? ?????</param> 

        /// <returns>????? ?????? ? ???????</returns> 

        public int ValidLength_AddItem(int width, int min_length, int max_length) 

        { 

            int i; 

            for (i = 0; i < validPageLengths.Length; i++) 

            { 

                if (validPageLengths[i] == null) 

                { 

                    validPageLengths[i] = new ValidPageLength(width, min_length, max_length); 

                    break; 

                } 

            } 

            SetCurrentFormatsTable(); 

            return i; 

        } 

 

 

        /// <summary> 

        /// ???????? ??????? ???????? ???? ?????????? 

        /// </summary> 

        public void ValidLength_ClearAll() 

        { 

            for (int i = 0; i < validPageLengths.Length; i++) 

            { 

                validPageLengths[i] = null; 

            } 

            SetCurrentFormatsTable(); 

        } 

 

 


        /// <summary> 

        /// ??????? ??????? ?? ??????? ?????????? ???? 

        /// </summary> 

        /// <param name="itemID">????? ????????? ???????</param> 

        public void ValidLength_ClearItem(int itemID) 

        { 

            validPageLengths[itemID] = null; 

            SetCurrentFormatsTable(); 

        } 

 

 

        /// <summary> 

        /// ?????????? ???????? 

        /// </summary> 

        /// <param name="propName">???????? ????????</param> 

        /// <param name="val">???????? ????????</param> 

        private void SetProperties(PropName propName, short val) 

        { 

            byte[] data = new byte[4]; 

            data[0] = (byte)((short)propName & 0xFF); 

            data[1] = (byte)((short)propName >> 8); 

            data[2] = (byte)(val & 0xFF); 

            data[3] = (byte)(val >> 8); 

            scannerSocket.SendCommand(Command.umSetProps, data); 

        } 

        /// <summary> 

        /// ????? ??????????? ??????? ??????? 

        /// </summary> 

        public short BinaryThresholdTop 

        { 

            get 

            { 

                return scannerProps.BinaryThreshold0; 

            } 

            set 

            { 

                scannerProps.BinaryThreshold0 = value; 

                SetProperties(PropName.BinaryThreshold0, value); 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ??????????? ?????? ??????? 

        /// </summary> 

        public short BinaryThresholdBottom 

        { 

            get 

            { 

                return scannerProps.BinaryThreshold1; 


            } 

            set 

            { 

                scannerProps.BinaryThreshold1 = value; 

                SetProperties(PropName.BinaryThreshold1, value); 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ??????????? ??????? ??????? 

        /// ( ? ?????? ????????? ) 

        /// </summary> 

        public short CurrentBinaryThresholdTop 

        { 

            get 

            { 

                return (short)this.nTreshold0; 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ??????????? ?????? ??????? 

        /// ( ? ?????? ????????? ) 

        /// </summary> 

        public short CurrentBinaryThresholdBottom 

        { 

            get 

            { 

                return (short)this.nTreshold1; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ??????? ??????? ?? X 

        /// </summary> 

        public short DpiXTop 

        { 

            get 

            { 

                return scannerProps.DpiX0; 

            } 

            set 

            { 

                scannerProps.DpiX0 = value; 

                SetProperties(PropName.DpiX0, value); 

            } 

        } 


 
 

        /// <summary> 

        /// ?????????? ?????? ??????? ?? X 

        /// </summary> 

        public short DpiXBottom 

        { 

            get 

            { 

                return scannerProps.DpiX1; 

            } 

            set 

            { 

                scannerProps.DpiX1 = value; 

                SetProperties(PropName.DpiX1, value); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ??????? ??????? ?? Y 

        /// </summary> 

        public short DpiYTop 

        { 

            get 

            { 

                return scannerProps.DpiY0; 

            } 

            set 

            { 

                scannerProps.DpiY0 = value; 

                SetProperties(PropName.DpiY0, value); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????? ??????? ?? Y 

        /// </summary> 

        public short DpiYBottom 

        { 

            get 

            { 

                return scannerProps.DpiY1; 

            } 

            set 

            { 

                scannerProps.DpiY1 = value; 

                SetProperties(PropName.DpiY1, value); 

            } 


        } 

 

 

        /// <summary> 

        /// ??? ???????? ???????? 

        /// </summary> 

        public const string EthernetController = " eth0"; 

 

 

        /// <summary> 

        /// ?????????? ???????? ?????????? ip - ??????? 

        /// </summary> 

        public void FillIpAddresses() 

        { 

            lock (this) 

            { 

                ProcessHelper.StartProcessAndWaitForFinished(ipAddressDetector, EthernetController, 

                    delegate(string s) 

                    { 

                        int i = s.IndexOf(ipAddressSignature); 

                        if (i != -1) 

                        { 

                            i += ipAddressSignature.Length; 

                            int j = s.IndexOf(' ', i); 

                            if (j != -1) 

                            { 

                                ipAddress = System.Net.IPAddress.Parse(s.Substring(i, j - i)); 

                            } 

                        } 

                        i = s.IndexOf(ipBroadCastSignature); 

                        if (i != -1) 

                        { 

                            i += ipBroadCastSignature.Length; 

                            int j = s.IndexOf(' ', i); 

                            if (j != -1) 

                            { 

                                ipBroadCastAddress = System.Net.IPAddress.Parse(s.Substring(i, j - i)); 

                            } 

                        } 

 

 

                        return false; 

                    }, null 

                ); 

            } 

        } 

 

 

        /// <summary> 

        /// ip - ????? ????????????????? ???????? 


        /// </summary> 

        public IPAddress BroadcastIPAdress 

        { 

            get 

            { 

                if (ipBroadCastAddress == null) 

                { 

                    FillIpAddresses(); 

                } 

                return ipBroadCastAddress; 

            } 

        } 

 

 

        /// <summary> 

        /// ??????????? ip - ????? 

        /// </summary> 

        public IPAddress OwnIPAdress 

        { 

            get 

            { 

                if (ipAddress == null) 

                { 

                    FillIpAddresses(); 

                } 

                return ipAddress; 

            } 

        } 

        /// <summary> 

        /// IP ????? ??????? 

        /// </summary> 

        public string IPAddress 

        { 

            get 

            { 

                return OwnIPAdress.ToString(); 

            } 

        } 

 

 

        /// <summary> 

        /// ????????/????????? ???????????? ??? ????? ??????? 

        /// <param name="enable">true - ??? ????? ????????, false - ??? ????? ?????????</param> 

        /// </summary> 

        public void EnableLamps(bool enable) 

        { 

            if (enable) 

            { 

                scannerProps.Lamps = Croc.Bpc.GsScannerDriver.Lamps.BothOn; 

            } 


            else 

            { 

                scannerProps.Lamps = Croc.Bpc.GsScannerDriver.Lamps.BothOff; 

            } 

            SetProperties(PropName.Lamps, (short)scannerProps.Lamps); 

        } 

 

 

        /// <summary> 

        /// ??????? ?? ?????? 

        /// </summary> 

        public bool Marker 

        { 

            get 

            { 

                return scannerProps.Marker == Croc.Bpc.GsScannerDriver.Marker.On; 

            } 

            set 

            { 

                scannerProps.Marker = value ? Croc.Bpc.GsScannerDriver.Marker.On : Croc.Bpc.GsScannerDriver.Marker.Off; 

                SetProperties(PropName.Marker, (short)scannerProps.Marker); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ?? ?????? ??????? 

        /// </summary> 

        public bool MarkerWork 

        { 

            get 

            { 

                return scannerProps.MarkerWork == 1; 

            } 

            set 

            { 

                scannerProps.MarkerWork = (short)(value ? 1 : 0); 

                SetProperties(PropName.MarkerWork, scannerProps.MarkerWork); 

            } 

        } 

 

 

        /// <summary> 

        /// ??????????? ?????????? ????? ????? 

        /// </summary> 

        public short MaxSheetLength 

        { 

            get 

            { 

                return scannerProps.MaxSheetLength; 


            } 

            set 

            { 

                scannerProps.MaxSheetLength = value; 

                SetProperties(PropName.MaxSheetLength, value); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????????? ????? ????? 

        /// </summary> 

        public short MinSheetLength 

        { 

            get 

            { 

                return scannerProps.MinSheetLength; 

            } 

            set 

            { 

                scannerProps.MinSheetLength = value; 

                SetProperties(PropName.MinSheetLength, value); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ????? ??????? 

        /// </summary> 

        public string SerialNumber 

        { 

            get 

            { 

                return manufProps.SerialNumber.ToString(); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ??????? ????,  

        /// ??? ? ?????? ?????? ??????????? ???? 

        /// </summary> 

        public bool SheetScanning 

        { 

            get 

            { 

                return sheetScanning; 

            } 

        } 

 


 
        /// <summary> 

        /// ????? ????????? ?? ??????? ????? 

        /// </summary> 

        public bool TuningEnabled 

        { 

            get 

            { 

                return scannerProps.TuningMode == TuningMode.On; 

            } 

            set 

            { 

                scannerProps.TuningMode = (value ? TuningMode.On : TuningMode.Off); 

                SetProperties(PropName.TuningMode, (short)scannerProps.TuningMode); 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ???????? ????? ????????? 

        /// </summary> 

        public bool LengthValidationEnabled 

        { 

            get 

            { 

                return validLength; 

            } 

            set 

            { 

                validLength = value; 

 

 

                if (validLength) 

                { 

                    SetCurrentFormatsTable(); 

                } 

                else 

                { 

                    SetEmptyFormatsTable(); 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ????????? ??????????? ?? ????????????? ?????? 

        /// </summary> 

        public int WhiteCoeff 

        { 

            get 


            { 

                return (int)scannerProps.WhiteCoeff; 

            } 

            set 

            { 

                scannerProps.WhiteCoeff = (WhiteCoeff)value; 

                SetProperties(PropName.WhiteCoeff, (short)value); 

            } 

        } 

 

 

        private bool[] _whiteCoeffApplyed = new bool[2]; 

 

 

        /// <summary> 

        /// ??????? ????, ??? ???????????? ?????? ??? ???? ????????? ? ???????? 

        /// </summary> 

        private bool[] WhiteCoeffApplyed 

        { 

            get { return _whiteCoeffApplyed; } 

        } 

 

 

        /// <summary> 

        /// ??????? ????? ??????? ??????? 

        /// </summary> 

        public MemoryBlock WorkBufferTop 

        { 

            get 

            { 

                IntPtr b = new IntPtr(sh.BinBuffer[0].ToInt32() + (y[0] + manufProps.ShiftLines) * this.currentConfiguration.DotsOneSide / DotsPerByteBinary); 

                return new MemoryBlock(b); 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ????? ?????? ??????? 

        /// </summary> 

        public MemoryBlock WorkBufferBottom 

        { 

            get 

            { 

                IntPtr b = new IntPtr(sh.BinBuffer[1].ToInt32() + y[1] * this.currentConfiguration.DotsOneSide / DotsPerByteBinary); 

                return new MemoryBlock(b); 

            } 

        } 

 

 

        /// <summary> 


        /// ??????? ????? ??????? ??????? 

        /// </summary> 

        public MemoryBlock HalfToneBuffer0 

        { 

            get 

            { 

                IntPtr b = new IntPtr(sh.HalftoneBuffer[0].ToInt32() + (y[0] + manufProps.ShiftLines) * this.currentConfiguration.DotsOneSide / DotsPerByteHalftone); 

                return new MemoryBlock(b); 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ????? ?????? ??????? 

        /// </summary> 

        public MemoryBlock HalfToneBuffer1 

        { 

            get 

            { 

                IntPtr b = new IntPtr(sh.HalftoneBuffer[1].ToInt32() + y[1] * this.currentConfiguration.DotsOneSide / DotsPerByteHalftone); 

                return new MemoryBlock(b); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ?? ???????????? 

        /// </summary> 

        public bool ScanningEnabled 

        { 

            get 

            { 

                return scannerProps.WorkMode == WorkMode.Work; 

            } 

            set 

            { 

                scannerProps.WorkMode = value ? WorkMode.Work : WorkMode.Debug; 

                SetProperties(PropName.WorkMode, (short)scannerProps.WorkMode); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????? ??????? ???? 

        /// </summary> 

        public int WorkZoneH 

        { 

            get 

            { 

                return currentConfiguration.MaxLines; 


            } 

        } 

 

 

        /// <summary> 

        /// ?????? ??????? ???? 

        /// </summary> 

        public int WorkZoneW 

        { 

            get 

            { 

                return currentConfiguration.DotsOneSide; 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ????????? ????????, ??????? ????? ???????? ?? ?????? 

        /// ?????? ? ??????? ?????? ???????? 

        /// </summary> 

        /// <param name="str">????? ????????</param> 

        public void ScanningIndicatorMessage(string str) 

        { 

            scannerSocket.SendCommand(Command.umScanIndicator, Encode(str)); 

        } 

 

 

        /// <summary> 

        /// ??????? ?? ????? ??????????? ????? ?? CIS 

        /// </summary> 

        public bool DirtDetectionEnabled 

        { 

            get 

            { 

                return scannerProps.DirtDetection == DirtDetection.On; 

            } 

            set 

            { 

                scannerProps.DirtDetection = (value ? DirtDetection.On : DirtDetection.Off); 

                SetProperties(PropName.DirtDetection, (short)scannerProps.DirtDetection); 

            } 

        } 

 

 

        /// <summary> 

        /// ?????? ?????? ??????????? 

        /// </summary> 

        /// <param name="imageType">??? ???????????? ???????????</param> 

        /// <param name="bufferSize">?????? ???????????? ??????</param> 

        /// <returns>?????? ?????? ???????????</returns> 


        public long GetBufferSize(ImageType imageType, BufferSize bufferSize) 

        { 

            return currentConfiguration.DotsOneSide* 

                   (bufferSize == BufferSize.Scanned ? nStrings : currentConfiguration.MaxLines)/ 

                   (imageType == ImageType.Binary ? DotsPerByteBinary : DotsPerByteHalftone); 

        } 

 

 

        /// <summary> 

        /// ????????? ??????????? ?????? ? ???? 

        /// </summary> 

        /// <param name="fileName">??? ?????</param> 

        /// <param name="imageType">??? ???????????? ???????????</param> 

        /// <param name="side">??????????? ???????</param> 

        /// <param name="bufferSize">?????? ???????????? ??????</param> 

        /// <returns>true - ?????????? ?????? ???????; false - ?????? ??????????</returns> 

        public unsafe bool SaveBuffer(string fileName, ImageType imageType, ScannedSide side, BufferSize bufferSize) 

        { 

            try 

            { 

                // TODO: ??????? ??????? ??????? ?????? ?????? ?? ???????? 

                if (/*WhiteCoeff > 0 && */imageType == ImageType.Halftone) 

                { 

                    // ????????? ????????? ???????? ?? ????????????? ??????? 

                    IntPtr wcPtr = whiteCoeffU.ToPointer(); 

                    // ????????? ???????? ? ??????? ??????? ?????? 

                    int shift = (side == 0 ? 0 : currentConfiguration.DotsOneSide); 

 

 

                    if ((currentConfiguration.Options & HardwareOptions.RightToLeftHalftone) > 0) 

                    { 

                        // ?????????? "??????????" ??????????? 

                        if ((currentConfiguration.Options & HardwareOptions.OneSide) == 0) 

                        { 

                            // ??? ???? ?????????? ??????????? ?????????? ??? ??????? 

                            if ((side == ScannedSide.Top || side == ScannedSide.Undefined) && 

                                !HalftoneFlipped[(int)ScannedSide.Top]) 

                            { 

                                IntPtr p0 = HalfToneBuffer0.ToPointer(); 

                                FlipBufferVertically((byte*)p0.ToPointer(), currentConfiguration.DotsOneSide, nStrings); 

                                HalftoneFlipped[(int)ScannedSide.Top] = true; 

                            } 

                        } 

                        if ((side == ScannedSide.Bottom || side == ScannedSide.Undefined) && 

                            !HalftoneFlipped[(int)ScannedSide.Bottom]) 

                        { 

                            IntPtr p1 = HalfToneBuffer1.ToPointer(); 

                            FlipBufferVertically((byte*)p1.ToPointer(), currentConfiguration.DotsOneSide, nStrings); 

                            HalftoneFlipped[(int)ScannedSide.Bottom] = true; 

                        } 


                    } 

 

 

                    // ??????? 0 ?????????? ?????? ??? ????????????? ??????? 

                    if ((currentConfiguration.Options & HardwareOptions.OneSide) == 0) 

                    { 

                        if ((side == ScannedSide.Top || side == ScannedSide.Undefined) && 

                            !WhiteCoeffApplyed[(int) ScannedSide.Top]) 

                        { 

                            IntPtr p0 = HalfToneBuffer0.ToPointer(); 

                            applyWhiteCoeffs((byte*) p0.ToPointer(), (byte*) p0.ToPointer(), (byte*) wcPtr.ToPointer() + shift, currentConfiguration.DotsOneSide, nStrings); 

 

 

                            WhiteCoeffApplyed[(int) ScannedSide.Top] = true; 

                        } 

                    } 

 

 

                    if ((side == ScannedSide.Bottom || side == ScannedSide.Undefined) &&  

                        !WhiteCoeffApplyed[(int)ScannedSide.Bottom]) 

                    { 

                        IntPtr p1 = HalfToneBuffer1.ToPointer(); 

                        applyWhiteCoeffs((byte*)p1.ToPointer(), (byte*)p1.ToPointer(), (byte*)wcPtr.ToPointer() + shift, currentConfiguration.DotsOneSide, nStrings); 

 

 

                        WhiteCoeffApplyed[(int)ScannedSide.Bottom] = true; 

                    } 

                } 

 

 

                if (side == ScannedSide.Top || side == ScannedSide.Undefined) 

                { 

                    TiffImageHelper.SaveToFile(fileName + "_0.tif", imageType, 

                        imageType == ImageType.Binary ? WorkBufferTop : HalfToneBuffer0, 

                        currentConfiguration.DotsOneSide, 

                        bufferSize == BufferSize.Scanned ? nStrings : currentConfiguration.MaxLines); 

                } 

 

 

                if (side == ScannedSide.Bottom || side == ScannedSide.Undefined) 

                { 

                    TiffImageHelper.SaveToFile(fileName + "_1.tif", imageType, 

                        imageType == ImageType.Binary ? WorkBufferBottom : HalfToneBuffer1, 

                        currentConfiguration.DotsOneSide, 

                        bufferSize == BufferSize.Scanned ? nStrings : currentConfiguration.MaxLines); 

                } 

 

 

                return true; 

            } 


            catch 

            { 

                return false; 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ????, ??? ??????? ??? ??? ?????????? 

        /// </summary> 

        private bool[] HalftoneFlipped = new bool[] { false, false }; 

 

 

        /// <summary> 

        /// ????????? ?????????? ????????? ??????????? ???????????? ???????????? ??? 

        /// </summary> 

        /// <param name="buffer">???????? ???????????</param> 

        /// <param name="width">??????</param> 

        /// <param name="height">??????</param> 

        private static unsafe void FlipBufferVertically(byte* buffer, int width, int height) 

        { 

            // ??? ?????????? ????? ????????????? ?????? ???????? ??????, ?????? 

            // ???? ????? ?????? ????????, ?? ??????? ?????? ?????????????? ? ?? ????? 

            int half = width / 2; 

 

 

            // ???????? ?????? ?????? ? ?????? 

            int offset = 0; 

            // ???? ?? ????? ????? 

            for (int i = 0; i < height; i++) 

            { 

                // ???? ?? ?????? ???????? ?????? ? ?????????? ????? 

                for (int srcIdx = offset, dstIdx = offset + width - 1; 

                    srcIdx < offset + half; 

                    srcIdx++, dstIdx--) 

                { 

                    byte a = buffer[srcIdx]; 

                    buffer[srcIdx] = buffer[dstIdx]; 

                    buffer[dstIdx] = a; 

                } 

 

 

                offset += width; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????????? ?????? ?????? 

        /// true - ????? 


        /// false - ?? ????? 

        /// </summary> 

        public bool Green 

        { 

            get 

            { 

                return (scannerProps.Lamps & Croc.Bpc.GsScannerDriver.Lamps.GreenOn) != 0; 

            } 

            set 

            { 

                Lamps lamps; 

                Lamps propsValue = scannerProps.Lamps; 

                // ????? ??????????? ????????? ?? value ? (1-value) ?????? ???????? 

                // ??? ????????? ??????, ?? ?????????? 

                if (value) 

                { 

                    // ??????? ???????? 

                    lamps = Croc.Bpc.GsScannerDriver.Lamps.GreenOn; 

                    // ? ????????????? ??-?? ??????? ???? 

                    propsValue |= Croc.Bpc.GsScannerDriver.Lamps.GreenOn; 

                } 

                else 

                { 

                    // ??????? ????????? 

                    lamps = Croc.Bpc.GsScannerDriver.Lamps.GreenOff; 

                    // ? ????????????? ??-?? ??????? ???? ???????????? 

                    propsValue &= ~Croc.Bpc.GsScannerDriver.Lamps.GreenOn; 

                } 

                scannerProps.Lamps = propsValue; 

                SetProperties(PropName.Lamps, (short)lamps); 

            } 

        } 

 

 

        /// <summary> 

        /// ???????? ?????????? ??????? ?????? 

        /// true - ????? 

        /// false - ?? ????? 

        /// </summary> 

        public bool Red 

        { 

            get 

            { 

                return (scannerProps.Lamps & Croc.Bpc.GsScannerDriver.Lamps.RedOn) != 0; 

            } 

            set 

            { 

                Lamps lamps; 

                Lamps propsValue = scannerProps.Lamps; 

                if (value) 


                { 

                    // ??????? ???????? 

                    lamps = Croc.Bpc.GsScannerDriver.Lamps.RedOn; 

                    // ? ????????????? ??-?? ??????? ???? ???????????? 

                    propsValue |= Croc.Bpc.GsScannerDriver.Lamps.RedOn; 

                } 

                else 

                { 

                    // ??????? ????????? 

                    lamps = Croc.Bpc.GsScannerDriver.Lamps.RedOff; 

                    // ? ????????????? ??-?? ??????? ???? 

                    propsValue &= ~Croc.Bpc.GsScannerDriver.Lamps.RedOn; 

                } 

                scannerProps.Lamps = propsValue; 

                SetProperties(PropName.Lamps, (short)lamps); 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ?????????????? ????????? ???? 

        /// </summary> 

        public void RestoreLamps() 

        { 

            scannerSocket.SendCommand(Command.umRestoreLamps); 

        } 

 

 

        /// <summary> 

        /// ?????? ??????? ???????? ????? 

        /// </summary> 

        public bool DoubleSheetSensorEnabled 

        { 

            get 

            { 

                return scannerProps.DoubleSheet == DoubleSheet.On; 

            } 

            set 

            { 

                scannerProps.DoubleSheet = (value ? DoubleSheet.On : DoubleSheet.Off); 

                SetProperties(PropName.DoubleSheet, (short)scannerProps.DoubleSheet); 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ???????? ??????? ???????? ?????. ?????????? 0, ???? ?????? ?? ???????? (??? ???????????) 

        /// </summary> 

        public short DoubleSheetSensorCurrentValue 

        { 


            get 

            { 

                return (short)scannerProps.DoubleSheet; 

            } 

        } 

 

 

        /// <summary> 

        /// ?????? ??????????? ???????? ????? 

        /// </summary> 

        /// <param name="l">????? ??????</param> 

        /// <param name="r">????? ???????</param> 

        public void GetDoubleSheetSensorLevel(out short l, out short r) 

        { 

            l = scannerProps.DoubleSheetLevelL; 

            r = scannerProps.DoubleSheetLevelR; 

        } 

 

 

        /// <summary> 

        /// ??????? ???????? ?????? ? ??????? ???????? ???????? ?????. ????? 0, ???? ?????? ?? ???????? (??? ???????????) 

        /// </summary> 

        /// <param name="l">???????? ??????</param> 

        /// <param name="r">???????? ???????</param> 

        public void GetDoubleSheetSensorCurrentValue(out short l, out short r) 

        { 

            l = scannerProps.DoubleSheetLevelL; 

            r = scannerProps.DoubleSheetLevelR; 

        } 

 

 

        /// <summary> 

        /// ?????? ??????????? ???????? ????? 

        /// </summary> 

        /// <param name="l">????? ??????</param> 

        /// <param name="r">????? ???????</param> 

        public void SetDoubleSheetSensorLevel(short l, short r) 

        { 

            scannerProps.DoubleSheetLevelL = l; 

            SetProperties(PropName.DoubleSheetLevelL, l); 

            scannerProps.DoubleSheetLevelR = r; 

            SetProperties(PropName.DoubleSheetLevelR, r); 

        } 

 

 

        /// <summary> 

        /// ?????? ??????????? ???????? ????? ??? ??????? ????????? 

        /// </summary> 

        /// <param name="nLeftSensorLevel">????? ??????</param> 

        /// <param name="nRightSensorLevel">????? ???????</param> 


        public void SetDoubleSheetSensorCurrentSheetLevel(short nLeftSensorLevel, short nRightSensorLevel) 

        { 

            byte[] data = new byte[4]; 

            data[0] = (byte)(nLeftSensorLevel & 0xFF); 

            data[1] = (byte)(nLeftSensorLevel >> 8); 

            data[2] = (byte)(nRightSensorLevel & 0xFF); 

            data[3] = (byte)(nRightSensorLevel >> 8); 

            scannerSocket.SendCommand(Command.umSetDoubleSheetSensorCurrentLevel, data); 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ???????? ???????? ????? 

        /// </summary> 

        /// <param name="leftWork">??????? ?????? ?????? ???????</param> 

        /// <param name="rightWork">??????? ?????? ??????? ???????</param> 

        public void CheckDoubleSheetSensor(out bool leftWork, out bool rightWork) 

        { 

            UserMessage um = SendAndWaitAnswer(Command.umCheckDoubleSheetSensor); 

            BinaryReader br = new BinaryReader(new MemoryStream(um.Data)); 

            // ???? == 0, ?????? ???????? 

            leftWork = (br.ReadInt32() == 0); 

            rightWork = (br.ReadInt32() == 0); 

        } 

 

 

        /// <summary> 

        /// ???????? ????????? ???????? TRUE, ????? ? ?????? ???????? ?????????.  

        /// ????? ????, ??? ????????? ??????? ??????, ???????? ????????? ???????? FALSE. 

        /// </summary> 

        public bool ScannerBusy 

        { 

            get 

            { 

                return scannerBusy; 

            } 

        } 

 

 

        /// <summary> 

        /// ????? ?????????? ??????? ????????? ??????? 

        /// </summary> 

        private void SendEvents() 

        { 

            while (true) 

            { 

                try 

                { 

                    doEvent(); 

                } 


                catch (ThreadAbortException ex) 

                { 

                    _logger.LogException(Message.ScannerManagerScannerSendEventsThreadAborted, ex); 

                    throw ex; 

                } 

                catch (Exception ex) 

                { 

                    _logger.LogException(Message.ScannerManagerScannerSendEventsThreadException, ex); 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ??????? ???? ????????? ?? ??????? ? ?????? ?????. ??????? 

        /// </summary> 

        private void doEvent() 

        { 

            // ???????? ??????? - ?? ??????? ????????? 

            // ? ??????? ????? ???? ????-?? ???-?? ?????? 

            mre.WaitOne(Timeout, false); 

            if (events.Count != 0) 

            { 

                // ???? ??? ?????????? 

                UserMessage um; 

                lock (events) 

                { 

                    // ?????? ????????? ????????? 

                    um = (UserMessage)events.Dequeue(); 

                } 

                switch (um.Command) 

                { 

                    case Command.umReadyToScanning: 

                        { 

                            scannerBusy = false; 

                            sheetScanning = false; 

                            if (pEvent != null) 

                            { 

                                pEvent.ReadyToScanning(this); 

                            } 

                            break; 

                        } 

                    // ????? ???????? 

                    case Command.umPageIn: 

                        { 

                            // ??????? ????? ??????????????? ????? 

                            nStrings = 0; 

                            scannerBusy = true; 

                            sheetScanning = true; 

                            WhiteCoeffApplyed[0] = false; 


                            WhiteCoeffApplyed[1] = false; 

                            HalftoneFlipped[0] = HalftoneFlipped[1] = false; 

                            if (pEvent != null) 

                            { 

                                pEvent.NewSheet(this); 

                            } 

                            break; 

                        } 

                    case Command.umError: 

                        { 

                            // ??????? ??? ?????? 

                            ScannerError err = (ScannerError)(um.Data[0] | um.Data[1] << 8); 

                            // ???? ??? ???????????? ?????? 

                            if (err == ScannerError.DirtOnZeroSide || err == ScannerError.DirtOnFirstSide || err == ScannerError.DoublePaperSensorFail) 

                            { 

                                sheetScanning = false; 

                            } 

                            if (pEvent != null) 

                            { 

                                pEvent.Error(this, err); 

                            } 

                            break; 

                        } 

                    case Command.umScanBinStrip: 

                        { 

                            int stripSize = um.Data[0] | um.Data[1] << 8 | um.Data[2] << 16 | um.Data[3] << 24; 

                            this.nTreshold0 = um.Data[4] | um.Data[5] << 8 | um.Data[6] << 16 | um.Data[7] << 24; 

                            this.nTreshold1 = um.Data[8] | um.Data[9] << 8 | um.Data[10] << 16 | um.Data[11] << 24; 

                            nStrings += stripSize; 

                            if (pEvent != null) 

                            { 

                                // ???? ????????????? ????? 256 ????? 

                                if (stripSize < 256) 

                                { 

                                    // ?????? ???? ???????? 

                                    pEvent.SheetIsReady(this, (short)nStrings, (short)nStrings); 

                                } 

                                else 

                                { 

                                    // ????? ??? ????????? ?????? 

                                    pEvent.NextBuffer(this, (short)nStrings, (short)nStrings); 

                                } 

                            } 

                            break; 

                        } 

                } 

            } 

            lock (events) 

            { 

                // ???? ?????? ?????????? 


                if (events.Count == 0) 

                { 

                    // ???? ???????? 

                    mre.Reset(); 

                } 

                else 

                { 

                    // ???? ??? ???-?? ???????? ??????? ???? 

                    mre.Set(); 

                } 

            } 

        } 

 

 

 

 

        /// <summary> 

        /// ???????? ????? ?????? ????????? ?? ??????? 

        /// </summary> 

        private unsafe void Work() 

        { 

            UserMessage um; 

            while (true) 

            { 

                try 

                { 

                    // ??????? ????????? ?? ??????? 

                    um = scannerSocket.GetCommand(Timeout); 

                    switch (um.Command) 

                    { 

                        // ??????? ??????? ???? ???????? ? ?????????? 

                        case Command.umReadyToScanning: 

                        case Command.umPageIn: 

                        case Command.umError: 

                        case Command.umScanBinStrip: 

                            { 

                                // ??????? ??????? ??????? 

                                lock (events) 

                                { 

                                    // ??????? ???? ??????? 

                                    events.Enqueue(um); 

                                    // ??????? ???? ??????? 

                                    mre.Set(); 

                                } 

                                break; 

                            } 

                        // ??????? ??????? ??????? 

                        case Command.umGetVersion: 

                        case Command.umGetProps: 

                        case Command.umGetManufProps: 


                        case Command.umRevers: 

                        case Command.umCheckDoubleSheetSensor: 

                        case Command.umGetWhiteCoef: 

                            { 

                                this.ReleaseWaiting(um); 

                                break; 

                            } 

                        case Command.umSheetDroped: 

                            { 

                                this.ReleaseWaiting(um); 

                                scannerBusy = false; 

                                break; 

                            } 

                        case Command.None: 

                        default: 

                            break; 

                    } 

                } 

                catch (ThreadAbortException ex) 

                { 

                    _logger.LogException(Message.ScannerManagerScannerWorkThreadAborted, ex); 

                    throw ex; 

                } 

                catch (Exception ex) 

                { 

                    _logger.LogException(Message.ScannerManagerScannerWorkThreadException, ex); 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ??????? 

        /// </summary> 

        /// <param name="command">?????????? ? ????????? ???????</param> 

        /// <returns>??????????? ?????????</returns> 

        private UserMessage SendAndWaitAnswer(Command command) 

        { 

            return SendAndWaitAnswer(command, null, command, false); 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ??????? 

        /// </summary> 

        /// <param name="command">?????????? ? ????????? ???????</param> 

        /// <param name="ignoreTimeout">???????????? ????????? ????????</param> 

        /// <returns>??????????? ?????????</returns> 

        private UserMessage SendAndWaitAnswer(Command command, bool ignoreTimeout) 

        { 


            return SendAndWaitAnswer(command, null, command, ignoreTimeout); 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ??????? 

        /// </summary> 

        /// <param name="sendCommand">?????????? ???????</param> 

        /// <param name="sendData">?????????? ??????</param> 

        /// <param name="waitCommand">????????? ???????</param> 

        /// <returns>??????????? ?????????</returns> 

        private UserMessage SendAndWaitAnswer(Command sendCommand, short sendData, Command waitCommand) 

        { 

            byte[] data = new byte[2]; 

            data[0] = (byte)(sendData & 0xFF); 

            data[1] = (byte)(sendData >> 8); 

            return SendAndWaitAnswer(sendCommand, data, waitCommand, false); 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ??????? 

        /// </summary> 

        /// <param name="sendCommand">?????????? ???????</param> 

        /// <param name="sendData">?????????? ??????</param> 

        /// <param name="waitCommand">????????? ???????</param> 

        /// <param name="ignoreTimeout">???????????? ????????? ????????</param> 

        /// <returns>??????????? ?????????</returns> 

        private UserMessage SendAndWaitAnswer(Command sendCommand, byte[] sendData, Command waitCommand, bool ignoreTimeout) 

        { 

            string key = waitCommand.ToString(); 

            UserMessage um = null; 

            ManualResetEvent mre = null; 

            // waitEvents ????? ?????????????? ?????????????? ?????? ??????? 

            // ??????? ?????????? ?????????????? ?????? ? ???? 

            lock (this.waitEvents) 

            { 

                if (!this.waitEvents.Contains(key)) 

                { 

                    mre = new ManualResetEvent(false); 

                    this.waitEvents.Add(key, mre); 

                } 

            } 

            this.scannerSocket.SendCommand(sendCommand, sendData); 

            if (mre != null) 

            { 

                // ??????? ?????? ???? ? 5 ??? ?????? ??? ??????? ??????? 

                if (mre.WaitOne(Timeout * 5, false)) 

                { 

                    lock (this.recevedEvents) 


                    { 

                        um = (UserMessage)this.recevedEvents[key]; 

                        this.recevedEvents.Remove(key); 

                    } 

                } 

            } 

            if (um == null && !ignoreTimeout) 

            { 

                throw new Exception("??? ?????? " + key); 

            } 

            return um; 

        } 

 

 

        /// <summary> 

        /// ???????? ?? ??????? ???????? ? ??????????? ?????????? 

        /// </summary> 

        /// <param name="um">????????? ?? ???????</param> 

        private void ReleaseWaiting(UserMessage um) 

        { 

            string key = um.Command.ToString(); 

            // waitEvents ????? ?????????????? ?????????????? ?????? ??????? 

            // ??????? ?????????? ?????????????? ?????? ? ???? 

            lock (this.waitEvents) 

            { 

                // recevedEvents ??-?? ????? ?????????????? ?????????????? ?????? ??????? 

                lock (this.recevedEvents) 

                { 

                    // ???????? ????????? ????????? 

                    this.recevedEvents[key] = um; 

                } 

                // ???? ???? ???-?? ?????? ??????? 

                if (this.waitEvents.Contains(key)) 

                { 

                    // ??????? ?????? ??????????, ?? ??????? ?? ???? 

                    ManualResetEvent mre = (ManualResetEvent)this.waitEvents[key]; 

                    // ?????? ?????? ?????????? ?????????? ?? ??????? 

                    this.waitEvents.Remove(key); 

                    // ? ????????? ?????????? 

                    mre.Set(); 

                } 

            } 

        } 

 

 

        /// <summary> 

        /// ?????? ???????? ??????? 

        /// </summary> 

        public int DriverVersion 

        { 


            get; 

            private set; 

        } 

 

 

        /// <summary> 

        /// ?????? ??????? 

        /// </summary> 

        public ScannerVersion Version 

        { 

            get 

            { 

                return this.currentConfiguration.ScannerVersion; 

            } 

        } 

 

 

        #region Native types 

 

 

        /// <summary> 

        /// ?????????? ??????? ?????????? 

        /// </summary> 

        class ValidPageLength 

        { 

            /// <summary> 

            /// ?????????? ?????? ????????? 

            /// </summary> 

            /// <param name="width">?????? ?????????</param> 

            /// <param name="minLength">??????????? ????? ?????????</param> 

            /// <param name="maxLength">???????????? ????? ?????????</param> 

            public ValidPageLength(int width, int minLength, int maxLength) 

            { 

                this.width = width; 

                this.minLength = minLength; 

                this.maxLength = maxLength; 

            } 

            /// <summary> 

            /// ?????? ????????? 

            /// </summary> 

            public int width; 

            /// <summary> 

            /// ??????????? ????? ????????? 

            /// </summary> 

            public int minLength; 

            /// <summary> 

            /// ???????????? ????? ????????? 

            /// </summary> 

            public int maxLength; 

        } 


 
 

        /// <summary> 

        /// ?????????? ?????? 

        /// </summary> 

        class ValidPageOffset 

        { 

            /// <summary> 

            /// ????? 

            /// </summary> 

            /// <param name="width">?????? ?????????</param> 

            /// <param name="maxLength">???????????? ????? ??????? ?? ???? ??????</param> 

            public ValidPageOffset(int width, int maxLength) 

            { 

                this.width = width; 

                this.maxLength = maxLength; 

            } 

 

 

            /// <summary> 

            /// ?????? ????????? 

            /// </summary> 

            public int width; 

 

 

            /// <summary> 

            /// ???????????? ????? ??????? ?? ???? ?????? 

            /// </summary> 

            public int maxLength; 

        } 

 

 

        /// <summary> 

        /// ????????????? ?????????? 

        /// </summary> 

        struct umConnectConfirmation 

        { 

            /// <summary> 

            /// ???????????? ?????????? ?? ????????? ?????? 

            /// </summary> 

            /// <param name="data">?????? ?????? ?? GS2Manager</param> 

            public umConnectConfirmation(byte[] data) 

            { 

                this.answer = 

                    data[0] 

                    | data[1] << 8 

                    | data[2] << 16 

                    | data[3] << 24; 

                this.status = 

                    data[4] 


                    | data[5] << 8 

                    | data[6] << 16 

                    | data[7] << 24; 

            } 

 

 

            /// <summary> 

            /// ????? ?? ?????? ?????????? 

            /// </summary> 

            public int answer; 

 

 

            /// <summary> 

            /// ?????? ??????? 

            /// </summary> 

            public int status; 

        } 

 

 

        /// <summary> 

        /// ?????? ????????? 

        /// </summary> 

        struct vers 

        { 

            /// <summary> 

            /// ?????? ????????? 

            /// </summary> 

            /// <param name="data">??????????? ??????</param> 

            public vers(byte[] data) 

            { 

                this.drv = 

                    data[0] 

                    | data[1] << 8 

                    | data[2] << 16 

                    | data[3] << 24; 

                this.man = 

                    data[4] 

                    | data[5] << 8 

                    | data[6] << 16 

                    | data[7] << 24; 

            } 

 

 

            /// <summary> 

            /// ?????? ???????? 

            /// </summary> 

            public int drv; 

 

 

            /// <summary> 


            /// ?????? ????????? 

            /// </summary> 

            public int man; 

        } 

 

 

        /// <summary> 

        /// ????? ???????????? 

        /// </summary> 

        [Flags] 

        private enum HardwareOptions 

        { 

            /// <summary> 

            /// ??????????? ?????? ??????? 

            /// </summary> 

            Default = 0, 

 

 

            /// <summary> 

            /// ????????????? (???? ??????? ? ???? ?????) 

            /// </summary> 

            OneSide = 0x1, 

 

 

            /// <summary> 

            /// ??????? ??????? ???????????? ???????????? ??? 

            /// </summary> 

            RightToLeftHalftone = 0x2, 

 

 

            /// <summary> 

            /// ??????? ?????? ????? ?????????? ????????? ?????????? 

            /// </summary> 

            EnhancedDrop = 0x4, 

        } 

 

 

        /// <summary> 

        /// ???????? ?????? ????????? (??????????????) ??????? 

        /// </summary> 

        private class HardwareConfiguration 

        { 

            /// <summary> 

            /// ???? ?????? ??? ????????? ?????? ?? ????????????? ???????? 

            /// </summary> 

            public readonly int UdpPortReceive; 

 

 

            /// <summary> 

            /// ???? ?????? ??? ?????????????? ???????? 


            /// </summary> 

            public readonly int UdpPortSend; 

 

 

            /// <summary> 

            /// ???? ?????? ??????? ?? ???????? 

            /// </summary> 

            public readonly int TcpPport; 

 

 

            /// <summary> 

            /// ?????? ???????? ???????, ??????????????? ?????? 

            /// </summary> 

            public readonly ScannerVersion ScannerVersion; 

 

 

            /// <summary> 

            /// ???????????? ????? ????? 

            /// </summary> 

            public readonly int MaxLines; 

 

 

            /// <summary> 

            /// ????? ???????? 

            /// </summary> 

            public readonly int DotsOneLine; 

 

 

            /// <summary> 

            /// ????? ???????? ? ????? ??????? 

            /// </summary> 

            public readonly int DotsOneSide; 

 

 

            /// <summary> 

            /// ?????? ???????????? ?????? 

            /// </summary> 

            public readonly int SizeofHalftoneBuffer; 

 

 

            /// <summary> 

            /// ?????? ????????? ?????? 

            /// </summary> 

            public readonly int SizeofBinaryBuffer; 

 

 

            /// <summary> 

            /// ????? ???????????? 

            /// </summary> 

            public readonly HardwareOptions Options = HardwareOptions.Default; 


 
 

            /// <summary> 

            /// ???????? ?????? ????????? (??????????????) ??????? 

            /// </summary> 

            /// <param name="udpPortReceive">???? ?????? ??? ?????????????? ????????</param> 

            /// <param name="udpPortSend">???? ?????? ??? ?????????????? ????????</param> 

            /// <param name="tcpPport">???? ?????? ??????? ?? ????????</param> 

            /// <param name="maxLines">???????????? ????? ?????</param> 

            /// <param name="dotsOneLine">?????????? ????? ?? ??? ???????</param> 

            /// <param name="scannerVersion">?????? ???????? ???????, ??????????????? ??????</param> 

            /// <param name="options">????? ????????????</param> 

            public HardwareConfiguration(int udpPortReceive, int udpPortSend, int tcpPport, int maxLines, int dotsOneLine, ScannerVersion scannerVersion,

HardwareOptions options) 

            { 

                UdpPortReceive = udpPortReceive; 

                UdpPortSend = udpPortSend; 

                TcpPport = tcpPport; 

                MaxLines = maxLines; 

                DotsOneLine = dotsOneLine; 

                DotsOneSide = DotsOneLine / 2; 

                SizeofHalftoneBuffer = DotsOneSide * maxLines / BaseSharedMemory.DotsPerByteHalftone; 

                SizeofBinaryBuffer = DotsOneSide * maxLines / BaseSharedMemory.DotsPerByteBinary; 

                ScannerVersion = scannerVersion; 

                Options = options; 

            } 

        } 

 

 

        #endregion 

    } 

}


