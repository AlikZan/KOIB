using System; 

using System.Runtime.InteropServices; 

using Mono.Unix.Native; 

 

 

namespace Croc.Bpc.GsScannerDriver 

{ 

	/// <summary> 

	/// ????????? ????? ??????, ??????????? ????? ?????????? ???????? ? ??????? ?????????? ???????? 

	/// </summary> 

	public abstract class BaseSharedMemory 

	{ 

		/// <summary> 

		/// ????? ????? ????????? ?????? ? ????? ????? 

		/// </summary> 

		public const int DotsPerByteBinary = 8; 

 

 

		/// <summary> 

		/// ????? ????? ???????????? ?????? ? ????? ????? 

		/// </summary> 

		public const int DotsPerByteHalftone = 1; 

 

 

		/// <summary> 

		/// ????? ????? ? ????? ??????????? ?????? 

		/// </summary> 

        protected const int LINES = 16; 

 

 

		/// <summary> 

		/// ???? ????? ???????? ?????????? 

		/// </summary> 

        public const int MaxSheetFormats = 20; 

 

 

		/// <summary> 

		/// ???? ????? ?????????? ???????? 

		/// </summary> 

        public const int MaxSheetOffset = 20; 

 

 

		/// <summary> 

		/// ?????????? ????????????? ????? ?????? 

		/// </summary> 

        protected const int SHMKEY = 0x10; 

 

 

		/// <summary> 

		/// ???? ???????? ?????? 


		/// </summary> 

        protected const int IPC_CREAT = 01000; 

 

 

		/// <summary> 

		/// ?????????? ????? ???????? ?????? 

		/// </summary> 

        protected const int IPC_EXCL = 02000; 

 

 

		/// <summary> 

		/// ???? ???????? ?????? 

		/// </summary> 

		protected const int IPC_RMID = 0; 

 

 

        /// <summary> 

        /// ????? ??????? ? ??????????? ?????? 

        /// </summary> 

        protected const int SHM_PERMISSION = 0600; 

 

 

		/// <summary> 

		/// ????????? ?? ?????????? / ????????????? shared memory 

		/// </summary> 

		protected const string NoSharedMemory = "?? ????????? ????? ????????, ?????? {0} ({1}): {2} ({3})"; 

 

 

		/// <summary> 

		/// ???????? ????????????? ????? ?????? 

		/// </summary> 

		/// <param name="key">?????????? ????</param> 

		/// <param name="size">??????</param> 

		/// <param name="shmflg">?????????????? ?????</param> 

		/// <returns>????????????? ??????</returns> 

		[DllImport("libc")] 

		protected static extern int shmget( long/*(key_t)*/ key, int size, int shmflg ); 

 

 

		/// <summary> 

		/// ???????????? ? ????? ?????? 

		/// </summary> 

		/// <param name="shmid">????????????? ??????</param> 

		/// <param name="shmaddr">????? ?????? ???? ???????? ?????????????? ????????</param> 

		/// <param name="shmflg">????? ???????????</param> 

		/// <returns>????? ? ???????? ???????????? ????????</returns> 

		[DllImport("libc")] 

		protected static extern int shmat( int shmid, int/*(void*)*/ shmaddr, int shmflg ); 

 

 


		/// <summary> 

		/// ??????????? ?? ????? ?????? 

		/// </summary> 

		/// <param name="shmaddr">????? ????? ?????? ? ???????? ???????????? ????????</param> 

		/// <returns>????? ????????</returns> 

		[DllImport("libc")] 

		protected static extern int shmdt( int/*(void*)*/shmaddr ); 

 

 

		/// <summary> 

		/// ??????????? 

		/// </summary> 

		/// <param name="shmid">????????????? ??????</param> 

		/// <param name="cmd">????????</param> 

		/// <param name="buf">?????</param> 

		/// <returns>????? ????????</returns> 

		[DllImport("libc")] 

		protected static extern int shmctl(int shmid, int cmd, int /*(shmid_ds*)*/ buf); 

 

 

		/// <summary> 

		/// ????????? ???????? ???????? ?? ?????????????? ??????? 

		/// ?????? ????????????? ?? ??????? ?????? ????????? 

		/// </summary> 

		[StructLayout(LayoutKind.Sequential)] 

		protected struct	SListFormatsEqualSize 

		{ 

			public uint	amountFormats; 

			[MarshalAs (UnmanagedType.ByValArray, SizeConst= MaxSheetFormats )] 

			public uint[]	width; 

			[MarshalAs (UnmanagedType.ByValArray, SizeConst= MaxSheetFormats )] 

			public uint[]	heightMin; 

			[MarshalAs (UnmanagedType.ByValArray, SizeConst= MaxSheetFormats )] 

			public uint[]	heightMax; 

		} 

 

 

		/// <summary> 

		/// ?????????? ??????? ?????? 

		/// </summary> 

		[StructLayout(LayoutKind.Sequential)] 

		protected	struct	SListFormats 

		{ 

			public uint	amountFormats; 

			public SFormats[]	formats; 

		} 

 

 

		/// <summary> 

		/// ???? ???????? ??????????? ??????? 


		/// </summary> 

		[StructLayout(LayoutKind.Sequential)] 

		protected	struct	SFormats 

		{ 

			public uint	width; 

			public uint	heightMin; 

			public uint	heightMax; 

		} 

 

 

		/// <summary> 

		/// ????????? ???????? ???????? ?? ?????????????? ??????? 

		/// ?????? ????????????? ?? ??????? ?????? ????????? 

		/// </summary> 

		[StructLayout(LayoutKind.Sequential)] 

		protected	struct	SListShiftsEqualSize 

		{ 

			public uint	amountShifts; 

			[MarshalAs (UnmanagedType.ByValArray, SizeConst= MaxSheetOffset )] 

			public uint[]	width; 

			[MarshalAs (UnmanagedType.ByValArray, SizeConst= MaxSheetOffset )] 

			public uint[]	shift; 

		} 

 

 

		/// <summary> 

		/// ?????????? ?????? 

		/// </summary> 

		[StructLayout(LayoutKind.Sequential)] 

		protected	struct SShifts 

		{ 

			public uint	width; 

			public uint	shift; 

		} 

 

 

		/// <summary> 

		/// ?????????? ??????? ???????? 

		/// </summary> 

		[StructLayout(LayoutKind.Sequential)] 

		protected	struct	SListShifts 

		{ 

			public uint		amountShifts; 

			public SShifts[]	shitfs; 

		} 

 

 

		/// <summary> 

		/// ???????? ??????? 

		/// </summary> 


		[StructLayout(LayoutKind.Sequential)] 

		protected	struct	SProps 

		{ 

			public uint		command; 

			public SIB2003.ManufProps	prop; 

		} 

 

 

		/// <summary> 

		/// ????????? ?? ?????? ? ???????? ???????????? ???????? 

		/// </summary> 

		protected int ptr; 

 

 

		/// <summary> 

		/// ????????????? ????? ?????? 

		/// </summary> 

		protected int shmid; 

 

 

        /// <summary> 

        /// ???????? ?????? 

        /// </summary> 

        public IntPtr[] BinBuffer { get; protected set; } 

 

 

        /// <summary> 

        /// ??????????e ?????a 

        /// </summary> 

        public IntPtr[] HalftoneBuffer { get; protected set; } 

 

 

		/// <summary> 

		/// ???? ????? 

		/// </summary> 

		public IntPtr Buffer 

		{ 

			get 

			{ 

				return new IntPtr( ptr ); 

			} 

		} 

 

 

		/// <summary> 

		/// ?????? ?????? 

		/// </summary> 

		public int BufferSize { get; private set; } 

 

 


        /// <summary> 

        /// ??? ??????????? ?????? 

        /// </summary> 

        protected Type ShmType; 

 

 

        /// <summary> 

        /// ??????????? ??????????? ?????? 

        /// </summary> 

        /// <param name="allowCreate">????????? ????????, ???? ??????? ?????? ? ????? ??????????????? ???</param> 

        /// <param name="type">??? ????????? ??????</param> 

        /// <param name="oneSide">??????? ?????????????? ???????</param> 

        protected BaseSharedMemory(bool allowCreate, Type type, bool oneSide) 

        { 

	        HalftoneBuffer = new IntPtr[2]; 

	        BinBuffer = new IntPtr[2]; 

 

 

            ShmType = type; 

            BufferSize = Marshal.SizeOf(ShmType); 

            shmid = shmget(SHMKEY, 0, 0); 

            Errno errno = Stdlib.GetLastError(); 

 

 

            if (shmid == -1) 

            { 

                if (allowCreate) 

                { 

                    shmid = shmget(SHMKEY, BufferSize, SHM_PERMISSION | IPC_CREAT | IPC_EXCL); 

                    errno = Stdlib.GetLastError(); 

                    if (shmid == -1) 

                    { 

                        throw new Exception(string.Format(NoSharedMemory, BufferSize, "shmget-new", errno, Stdlib.strerror(errno))); 

                    } 

                } 

                else 

                { 

                    throw new Exception(string.Format(NoSharedMemory, BufferSize, "shmget", errno, Stdlib.strerror(errno))); 

                } 

            } 

            ptr = shmat(shmid, 0, 0); 

            errno = Stdlib.GetLastError(); 

            if (ptr == -1) 

            { 

                throw new Exception(string.Format(NoSharedMemory, BufferSize, "shmat", errno, Stdlib.strerror(errno))); 

            } 

 

 

            // ??????? ????????? ?? ????? ??????? ??????? (??? ????? ????? 0) 

            BinBuffer[0] = GetDataPointer("oneSideBin"); 


            HalftoneBuffer[0] = GetDataPointer("oneSide"); 

            if(oneSide) 

            { 

                // ?????? ? ????? ????????, ??? ????????????? ????????? ??? ??????????? ? ???? ? ???? ?????? 

                BinBuffer[1] = BinBuffer[0]; 

                HalftoneBuffer[1] = HalftoneBuffer[0]; 

            } 

            else 

            { 

                BinBuffer[1] = GetDataPointer("twoSideBin"); 

                HalftoneBuffer[1] = GetDataPointer("twoSide"); 

            } 

        } 

 

 

	    /// <summary> 

		/// ???????????? ??????????? ?????? 

		/// </summary> 

		public void Close() 

		{ 

			shmdt( ptr ); 

		} 

 

 

	    /// <summary> 

	    /// ???????? ????????? ?? ???? ????????? ?????? 

	    /// </summary> 

	    /// <param name="fieldName">??? ????? ?????????</param> 

	    /// <returns>?????????</returns> 

	    protected IntPtr GetDataPointer(string fieldName) 

	    { 

	        return new IntPtr(ptr + Marshal.OffsetOf(ShmType, fieldName).ToInt32()); 

	    } 

	} 

}


