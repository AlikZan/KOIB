using System; 

using System.Net; 

using System.Net.Sockets; 

 

 

namespace Croc.Bpc.GsScannerDriver 

{ 

	/// <summary> 

	/// ????? ?????????????? ?? ???????? 

	/// </summary> 

	public class ScannerSocket 

	{ 

		/// <summary> 

		/// ????? ?????????????? ?? ???????? 

		/// </summary> 

		private Socket s; 

 

 

		/// <summary> 

		/// ???????? ????????? ?????????? ?????? ?? ??????????? ?? ???-?????? ??????????? 

		/// </summary> 

		/// <param name="s">?????</param> 

		public ScannerSocket( Socket s ) 

		{ 

			this.s = s; 

			// ????????????? ??????? ??????? 

			SetBuffers( s ); 

 

 

		} 

 

 

		/// <summary> 

		/// ???????? ?????????? ?????? 

		/// </summary> 

		/// <param name="milliSecondWait">???????</param> 

		private void WaitForData( int milliSecondWait ) 

		{ 

			if ( !s.Poll( milliSecondWait * 1000, SelectMode.SelectRead ) ) 

			{ 

				throw new Exception( "??????? ???????? ?????? ?????!" ); 

			} 

		} 

 

 

		/// <summary> 

		/// ???????? ??????? ?????? ??? ?????? 

		/// </summary> 

		/// <param name="milliSecondWait">???????</param> 

		/// <returns>?????? ??????</returns> 


		private bool IsDataForRead( int milliSecondWait ) 

		{ 

			return s.Poll( milliSecondWait * 1000, SelectMode.SelectRead ); 

		} 

 

 

		/// <summary> 

		/// ????????? ???????? ??????? 

		/// </summary> 

		/// <param name="s">?????</param> 

		public static void SetBuffers( Socket s ) 

		{ 

			s.SetSocketOption( SocketOptionLevel.Socket, SocketOptionName.ReceiveBuffer, 1024*128 ); 

			s.SetSocketOption( SocketOptionLevel.Socket, SocketOptionName.SendBuffer, 1024*128 ); 

			s.SetSocketOption( SocketOptionLevel.Tcp, SocketOptionName.NoDelay, 1 ); 

		} 

 

 

		/// <summary> 

		/// ???????? ?????? ?? ?????? 

		/// </summary> 

		/// <param name="milliSecondWait">??????? ????? ??????</param> 

		/// <param name="size">??????? ???? ????????</param> 

		/// <returns>?????? ??????</returns> 

		private byte[] Receive( int milliSecondWait, int size ) 

		{ 

			byte[] buffer = new byte[ size ]; 

			int index = 0; 

			int received; 

			while ( size > 0 && IsDataForRead( milliSecondWait ) ) 

			{ 

				received = s.Receive( buffer, index, size, SocketFlags.None ); 

				index += received; 

				size -= received; 

			} 

			return buffer; 

		} 

 

 

		/// <summary> 

		/// ???????? ????????? ?? ??????? 

		/// </summary> 

		/// <param name="milliSecondWait">??????? ????? ??????</param> 

		/// <returns>?????????????? ?????????</returns> 

		public UserMessage GetCommand( int milliSecondWait ) 

		{ 

			// ??????? ????????? - ?????? 8 ????. 

			comlen cl = new comlen( Receive( milliSecondWait, 8 ) ); 

			// ?? ????????? ???????? ????? ?????? ? ????????? ???????????????? ????????? 

			UserMessage um = new UserMessage( (Command)cl.CommandID, Receive( milliSecondWait, cl.datalen ) ); 


			return um; 

		} 

 

 

		/// <summary> 

		/// ??????? ??????? ??????? 

		/// </summary> 

		/// <param name="command">????????</param> 

		/// <param name="data">??????</param> 

		public void SendCommand( Command command, byte[] data ) 

		{ 

			comlen cl; 

			cl.CommandID=(int)command; 

			if ( data != null ) 

			{ 

				cl.datalen=data.Length; 

			} 

			else 

			{ 

				cl.datalen = 0; 

			} 

			// ?.?. ????????? ?????????? ? 2 ?????? 

			// ?????????? ?????????????????? 

			lock ( s ) 

			{ 

				s.Send( cl.data() ); 

				if ( data != null ) 

				{ 

					s.Send( data ); 

				} 

			} 

		} 

 

 

		/// <summary> 

		/// ??????? ??????? ??????? 

		/// </summary> 

		/// <param name="command">???????</param> 

		/// <param name="commandData">?????? ???????</param> 

		public void SendCommand( Command command, short commandData ) 

		{ 

			byte[] data = new byte[2]; 

			data[0] = (byte) (commandData & 0xFF); 

			data[0] = (byte) (commandData >> 8 ); 

			SendCommand( command, data ); 

		} 

 

 

		/// <summary> 

		/// ??????? ??????? ??????? 


		/// </summary> 

		/// <param name="message">?????????????? ?????????</param> 

		public void SendCommand( UserMessage message ) 

		{ 

			SendCommand( message.Command, message.Data ); 

		} 

 

 

		/// <summary> 

		/// ??????? ??????? ??????? 

		/// </summary> 

		/// <param name="command">????????? ??????? (??? ??????)</param> 

		public void SendCommand( Command command ) 

		{ 

			SendCommand( command, null ); 

		} 

 

 

		/// <summary> 

		/// ??????? ????? 

		/// </summary> 

		public void Close() 

		{ 

			s.Close(); 

		} 

	} 

}


