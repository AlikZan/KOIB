using System; 

using System.Collections; 

using System.Collections.Generic; 

using System.Threading; 

 

 

namespace Croc.Core.Utils.Collections 

{ 

	/// <summary> 

	/// ?????????? ??????-?????????? ??????????? ?? ???????? ???????. 

	/// ??? ???????????? ??????? ?? ??????? (<see cref="Dequeue()"/>) ????? ??????????? ?? ??? ??? ????, 

	/// ? ??????? ?? ???????? ?????? (?????????? ? ??????? <see cref="Enqueue"/>). 

	/// ??????? ???????????? ???????? (<see cref="Close"/>) ? ???????? (<see cref="Open"/>).  

	/// ??????? ????????? ??????? ? ???????? ??????? ????????????? ??????????. 

	/// ??? ???????? ??????? ?? ????????? 

	/// </summary> 

	public class BlockingQueue<T> : IDisposable 

	{ 

		private readonly Queue<T> m_queue; 

		private Boolean m_bOpen; 

		private Boolean m_bDisposed; 

		private readonly EventWaitHandle m_eventEmpty = new ManualResetEvent(true); 

 

 

		/// <summary> 

		/// Create new BlockingQueue. 

		/// </summary> 

		public BlockingQueue() 

		{ 

			m_queue = new Queue<T>(); 

			m_bOpen = true; 

		} 

 

 

		/// <summary> 

		/// ??????? ?? ??????????? ???????. 

		/// </summary> 

		public WaitHandle EmptiedWaitHandle 

		{ 

			get { return m_eventEmpty; } 

		} 

 

 

		public void Dispose() 

		{ 

			lock (SyncRoot) 

			{ 

				if (!m_bDisposed) 

				{ 

					m_bOpen = false; 


					m_bDisposed = true; 

					m_queue.Clear(); 

					m_eventEmpty.Close(); 

					Monitor.PulseAll(SyncRoot); // resume any waiting threads 

				} 

			} 

		} 

 

 

		private void throwIfDisposed() 

		{ 

			if (m_bDisposed) 

				throw new ObjectDisposedException(GetType().FullName); 

		} 

 

 

		private Object SyncRoot 

		{ 

			get { return ((ICollection) m_queue).SyncRoot; } 

		} 

 

 

		/// <summary> 

		/// ?????????? ?????????? ???????? ? ???????. 

		/// </summary> 

		/// <remarks> 

		/// ??? ???????? ? disposed ????????? ?????????? 0. 

		/// </remarks> 

		public Int32 Count 

		{ 

			get 

			{ 

				lock (SyncRoot) 

					return m_queue.Count; 

			} 

		} 

 

 

		/// <summary> 

		/// ??????? ??? ??????? ?? ???????. 

		/// </summary> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		public void Clear() 

		{ 

			lock (SyncRoot) 

			{ 

				throwIfDisposed(); 

				m_queue.Clear(); 

				m_eventEmpty.Set(); 

			} 


		} 

 

 

		/// <summary> 

		/// ????????? ??????? ?? ????? ????? ????????. 

		/// ??? ??????? ????????? ?????? ??????? ? <see cref="Enqueue"/> ????? ????????????? <see cref="InvalidOperationException"/>. 

		/// </summary> 

		public void Close() 

		{ 

			lock (SyncRoot) 

			{ 

				if (m_bDisposed) 

					return; 

 

 

				m_bOpen = false; 

				Monitor.PulseAll(SyncRoot); // resume any waiting threads 

			} 

		} 

 

 

		/// <summary> 

		/// ??????? ? ?????????? ?????? ?? ?????? ???????. 

		/// </summary> 

		/// <exception cref="InvalidOperationException">????? ???????, ???? ??????? ???? ???????</exception> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		/// <returns>??????.</returns> 

		public T Dequeue() 

		{ 

			return Dequeue(Timeout.Infinite); 

		} 

 

 

		/// <summary> 

		/// ??????? ? ?????????? ?????? ?? ?????? ???????. 

		/// </summary> 

		/// <param name="timeout">????-??? ???????? ????? ?????????</param> 

		/// <exception cref="InvalidOperationException">????? ???????, ???? ??????? ???? ???????</exception> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		/// <returns>??????.</returns> 

		public T Dequeue(TimeSpan timeout) 

		{ 

			return Dequeue(timeout.Milliseconds); 

		} 

 

 

		/// <summary> 

		/// ??????? ? ?????????? ?????? ?? ?????? ???????. 

		/// </summary> 

		/// <param name="timeoutMilliseconds">????-??? ???????? ????? ????????? (? ????????????)</param> 


		/// <exception cref="InvalidOperationException">????? ???????, ???? ??????? ???? ???????</exception> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		/// <returns>??????.</returns> 

		public T Dequeue(Int32 timeoutMilliseconds) 

		{ 

			lock (SyncRoot) 

			{ 

				throwIfDisposed(); 

				while (m_bOpen && (m_queue.Count == 0)) 

				{ 

					if (!Monitor.Wait(SyncRoot, timeoutMilliseconds)) 

						throw new InvalidOperationException("Timeout"); 

				} 

				if (m_bOpen) 

				{ 

					var value = m_queue.Dequeue(); 

					signalIfEmptyUnsafe(); 

					return value; 

				} 

 

 

				throw new InvalidOperationException("Queue Closed"); 

			} 

		} 

 

 

		/// <summary> 

		/// ????????????? ???????, ????????? ????? ????????? ???????? <see cref="EmptiedWaitHandle"/>, ???? ??????? ?????. 

		/// </summary> 

		private void signalIfEmptyUnsafe() 

		{ 

			if (m_queue.Count == 0) 

				m_eventEmpty.Set(); 

		} 

 

 

		/// <summary> 

		/// ???????? ??????? ?????? ?? ?????? ???????. 

		/// </summary> 

		/// <param name="value">?????? ?? ???????</param> 

		/// <exception cref="InvalidOperationException">????? ???????, ???? ??????? ???? ???????</exception> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		/// <returns><value>true</value> - ?????? ??????? ???????? ?? ???????, <value>false</value> - ??????? ???? ???????</returns> 

		public Boolean TryDequeue(out T value) 

		{ 

			return TryDequeue(Timeout.Infinite, out value); 

		} 

 

 

		/// <summary> 


		/// ???????? ??????? ?????? ?? ?????? ???????. 

		/// </summary> 

		/// <param name="timeoutMilliseconds">????-??? ????????</param> 

		/// <param name="value">?????? ?? ???????</param> 

		/// <exception cref="InvalidOperationException">????? ???????, ???? ??????? ???? ???????</exception> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		/// <returns><value>true</value> - ?????? ??????? ???????? ?? ???????, <value>false</value> - ????? ????-???, ???? ??????? ???? ???????</returns> 

		public Boolean TryDequeue(Int32 timeoutMilliseconds, out T value) 

		{ 

			value = default(T); 

			lock (SyncRoot) 

			{ 

				if (!m_bOpen) 

					return false; 

 

 

				while (m_bOpen && m_queue.Count == 0) 

				{ 

					if (!Monitor.Wait(SyncRoot, timeoutMilliseconds)) 

						return false; 

				} 

				if (m_bOpen) 

				{ 

					value = m_queue.Dequeue(); 

					signalIfEmptyUnsafe(); 

					return true; 

				} 

				return false; 

			} 

		} 

 

 

		/// <summary> 

		/// ???????? ?????? ? ????? ???????. 

		/// </summary> 

		/// <exception cref="InvalidOperationException">??????? ???????</exception> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		/// <param name="obj">?????? ??? ????????? ? ???????</param> 

		public void Enqueue(T obj) 

		{ 

			lock (SyncRoot) 

			{ 

				throwIfDisposed(); 

				if (!m_bOpen) 

					throw new InvalidOperationException("????????? ??????? ? ???????? ??????? ???????????"); 

 

 

				m_queue.Enqueue(obj); 

				m_eventEmpty.Reset(); 

				Monitor.Pulse(SyncRoot); 


			} 

		} 

 

 

		/// <summary> 

		/// ????????? ??????? - ????????? ????????? ????? ????????. 

		/// </summary> 

		/// <exception cref="ObjectDisposedException">?????? ??? ?????????? (?????? ????? <see cref="Dispose"/>)</exception> 

		public void Open() 

		{ 

			lock (SyncRoot) 

			{ 

				throwIfDisposed(); 

				m_bOpen = true; 

			} 

		} 

 

 

		/// <summary> 

		/// ?????????? ??????? ????, ??? ??????? ???????. 

		/// </summary> 

		public Boolean IsClosed 

		{ 

			get { return !m_bOpen; } 

		} 

	} 

}


