using System; 

using System.Collections.Generic; 

using System.IO; 

using System.Text; 

 

 

using ICSharpCode.SharpZipLib.Zip; 

 

 

namespace Croc.Core.Utils 

{ 

    /// <summary> 

    /// ????? ????????? ???????? ? ?????????? ?????? ?/?? zip-?????? 

    /// </summary> 

    public static class ZipCompressor 

    { 

        /// <summary> 

        /// ??????? ?????? ?? ????????? 

        /// </summary> 

        public const int DEFAULT_COMPRESS_LEVEL = 5; 

 

 

        /// <summary> 

        /// ????????? ?????? ? zip-????? 

        /// </summary> 

        /// <param name="dataStr">?????? ??? ????????</param> 

        /// <returns>??????????? ??????</returns> 

        public static string Compress(string dataStr) 

        { 

			return Compress(dataStr, "zip", DEFAULT_COMPRESS_LEVEL); 

        } 

 

 

        /// <summary> 

        /// ????????? ?????? ? zip-????? ? ???????? ?????? ?????? ? ?????????????? ???????? ????????? 

        /// </summary> 

        /// <returns></returns> 

		public static string Compress(string dataStr, string archiveName, int compressLevel) 

        { 

			//????????? ? ??????? ?? ????????? ???????? ??? ????????? ???? ?? ??????? ? ?? ???????? ? ?????? 

			var enc = Encoding.Unicode; 

 

 

            using (var outputMemStream = new MemoryStream()) 

            { 

                using (var outputZipStream = new ZipOutputStream(outputMemStream)) 

                { 

                    // ??????? ?????? 

					outputZipStream.SetLevel(compressLevel); 

 


 
                    // ??????????? ?????? ? ?????? ???? 

                    var data = enc.GetBytes(dataStr); 

 

 

                    // ???????? ????????? ? ?????? 

                    ZipEntry entry = new ZipEntry(archiveName); 

                    entry.Size = data.Length; 

                    entry.DateTime = DateTime.Now; 

                    outputZipStream.PutNextEntry(entry); 

 

 

                    byte[] buffer = new byte[4096]; 

                    using (var tmpMemStream = new MemoryStream(data)) 

                    { 

                        int readedBytes; 

                        do 

                        { 

                            readedBytes = tmpMemStream.Read(buffer, 0, buffer.Length); 

                            outputZipStream.Write(buffer, 0, readedBytes); 

                        } 

                        while (readedBytes > 0); 

                    } 

 

 

                    outputZipStream.CloseEntry(); 

                    outputZipStream.Finish(); 

                    outputZipStream.Close(); 

                } // using ZipOutputStream 

 

 

                var zipData = outputMemStream.GetBuffer(); 

                return enc.GetString(zipData); 

            } // using MemoryStream 

        } 

 

 

        /// <summary> 

        /// ????????????? zip-?????? ? ??????????? ???????? ????????? 

        /// </summary> 

		/// <param name="dataStr">?????? ??? ??????????</param> 

        /// <returns></returns> 

        public static Stream Uncompress(string dataStr) 

        { 

            var data = Encoding.Unicode.GetBytes(dataStr); 

            using (var memStream = new MemoryStream(data)) 

            { 

                return Uncompress(memStream); 

            } 

        } 


 
 

        /// <summary> 

        /// ????????????? zip-????? ? ??????????? ???????? ????????? 

        /// </summary> 

		/// <param name="dataStream">??????????????? ?????</param> 

        /// <returns>????? ? ?????????????? ???????.  

        /// ????? ????????????? ?????????? ??????? ???? ????? (??????? ????? Close();)</returns> 

        public static Stream Uncompress(Stream dataStream) 

        { 

			//????????? ? ??????? ?? ????????? ???????? ??? ????????? ???? ?? ??????? ? ?? ???????? ? ?????? 

			var inputZipStream = new ZipInputStream(dataStream); 

 

 

            // ?????? ??? ?????? ?????? ?????, ????? ???????? "?????????"  

            // (????????????, ??? ??? ? ?????? ?????? ????) 

            try 

            { 

                inputZipStream.GetNextEntry(); 

            } 

            catch (Exception ex) 

            { 

                throw new ArgumentException("?????????? ?????? ?? ???????? zip-???????", ex); 

            } 

 

 

            return inputZipStream; 

        } 

    } 

}


